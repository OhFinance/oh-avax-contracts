{
  "address": "0x984E418C5d05c97F75156957405598CdE0475775",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivativeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "derivative_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "extraReward_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comptroller_",
          "type": "address"
        }
      ],
      "name": "initializeBenqiStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x251d5eef63ef3a9b896f5b623bef362e53db33a2f4774d42573cb181819cf34a",
  "receipt": {
    "to": null,
    "from": "0x000000010b5AFA32AB82B72625D68571B11EAE13",
    "contractAddress": "0x984E418C5d05c97F75156957405598CdE0475775",
    "transactionIndex": 0,
    "gasUsed": "1696479",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9cb64e38e7c7d5c8f0ed48cf0ee6edddd23010a6c21c7001a1b3edb86763edad",
    "transactionHash": "0x251d5eef63ef3a9b896f5b623bef362e53db33a2f4774d42573cb181819cf34a",
    "logs": [],
    "blockNumber": 6502792,
    "cumulativeGasUsed": "1696479",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bda25618f447c2b914f654c498263762",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"derivative_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extraReward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller_\",\"type\":\"address\"}],\"name\":\"initializeBenqiStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"https://compound.finance/docs/ctokens\",\"kind\":\"dev\",\"methods\":{\"derivativeBalance()\":{\"details\":\"Balance of derivative tokens received from Strategy, if applicable\",\"returns\":{\"_0\":\"The balance of derivative tokens\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"initializeBenqiStrategy(address,address,address,address,address,address,address)\":{\"details\":\"The function should be called at time of deployment\",\"params\":{\"bank_\":\"the bank associated with the strategy\",\"comptroller_\":\"the Benqi rewards contract\",\"derivative_\":\"the qiToken address received from Benqi\",\"extraReward_\":\"the address of the reward token WAVAX\",\"registry_\":\"the registry contract\",\"reward_\":\"the address of the reward token QI\",\"underlying_\":\"the underlying token that is deposited\"}},\"investedBalance()\":{\"details\":\"Get the exchange rate (which is scaled up by 1e18) and multiply by amount of qiTokens\",\"returns\":{\"_0\":\"The amount of underlying the strategy has invested\"}},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"rewardBalance()\":{\"details\":\"Balance of reward tokens awaiting liquidation, if applicable\"},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"sweep(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to sweep\",\"recipient\":\"The address to send the sweeped tokens to\",\"token\":\"The address of the token to sweep\"}},\"underlyingBalance()\":{\"details\":\"Balance of underlying awaiting Strategy investment\"}},\"title\":\"Oh! Finance Benqi Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bank()\":{\"notice\":\"The Bank that the Strategy is associated with\"},\"constructor\":{\"notice\":\"Initialize the Benqi Strategy Logic\"},\"derivative()\":{\"notice\":\"The derivative token received from AaveV2 (aToken)\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"initializeBenqiStrategy(address,address,address,address,address,address,address)\":{\"notice\":\"Initializes the Benqi Strategy Proxy\"},\"investedBalance()\":{\"notice\":\"Get the balance of underlying invested by the Strategy\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"reward()\":{\"notice\":\"The reward token received from AaveV2 (stkAave)\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"sweep(address,uint256,address)\":{\"notice\":\"Governance function to sweep any stuck / airdrop tokens to a given recipient\"},\"underlying()\":{\"notice\":\"The underlying token the Strategy invests in AaveV2\"}},\"notice\":\"Standard, unleveraged strategy. Invest underlying tokens into derivative cTokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/benqi/OhAvalancheBenqiStrategy.sol\":\"OhAvalancheBenqiStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ohfinance/oh-contracts/contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILiquidator {\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\\r\\n\\r\\n    function sushiswapRouter() external view returns (address);\\r\\n\\r\\n    function uniswapRouter() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x06e860aed460fcad6bda1d677e83ee5155a74767378445103224319712f65d91\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IBankStorage} from \\\"./IBankStorage.sol\\\";\\r\\n\\r\\ninterface IBank is IBankStorage {\\r\\n    function strategies(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function strategyBalance(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function invest(address strategy, uint256 amount) external;\\r\\n\\r\\n    function investAll(address strategy) external;\\r\\n\\r\\n    function exit(address strategy, uint256 amount) external;\\r\\n\\r\\n    function exitAll(address strategy) external;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositFor(uint256 amount, address recipient) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6de3defe08ace109d27988c102a358967a5265c2462193ab25681d8fa659aaa\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/bank/IBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBankStorage {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xda98d80e7a82404afa0ca24e3ce36ea5761301ab9bc4c573ee199af735f6f544\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyBase} from \\\"./IStrategyBase.sol\\\";\\r\\n\\r\\ninterface IStrategy is IStrategyBase {\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function invest() external;\\r\\n\\r\\n    function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8ddfe37d38ab5c1f10e649025c31f04bdadd42fb93e9ab422799925624494fb\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyStorage} from \\\"./IStrategyStorage.sol\\\";\\r\\n\\r\\ninterface IStrategyBase is IStrategyStorage {\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function derivativeBalance() external view returns (uint256);\\r\\n\\r\\n    function rewardBalance() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d2b099e226a7b99500af8c9c2beb5cf8a8da9a6675c6ca9f89ba229a270764\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IStrategyStorage {\\r\\n    function bank() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function derivative() external view returns (address);\\r\\n\\r\\n    function reward() external view returns (address);\\r\\n\\r\\n    // function investedBalance() external view returns (uint256);\\r\\n\\r\\n    // function invest() external;\\r\\n\\r\\n    // function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    // function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe02fa4951275170cfea55e68ec215048a1d2453255563cea3aae5d27d1248f93\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // safely transfer tokens without underflowing\\r\\n    function safeTokenTransfer(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            IERC20(token).safeTransfer(recipient, balance);\\r\\n            return balance;\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(recipient, amount);\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x554436aaa2fe9d290e98e1872d43990d713d8bd1061474cc423edeec6d1eb92d\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @title Oh! Finance Base Upgradeable\\r\\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\\r\\nabstract contract OhUpgradeable {\\r\\n    function getAddress(bytes32 slot) internal view returns (address _address) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _address := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\\r\\n        uint256 bool_;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            bool_ := sload(slot)\\r\\n        }\\r\\n        _bool = bool_ == 1;\\r\\n    }\\r\\n\\r\\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _bytes32 := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _uint := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddress(bytes32 slot, address _address) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _address)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _bytes32)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Set a boolean storage variable in a given slot\\r\\n    /// @dev Convert to a uint to take up an entire contract storage slot\\r\\n    function setBoolean(bytes32 slot, bool _bool) internal {\\r\\n        uint256 bool_ = _bool ? 1 : 0;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, bool_)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _uint)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5dd7d929b429b1987fd0b51a6cd2fa6d65eba8fcea83c08885ba594c14f7bf4e\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/registry/OhSubscriberUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber Upgradeable\\r\\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\\r\\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Verify the registry storage slot is correct\\r\\n    constructor() {\\r\\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.subscriber.registry\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Subscriber\\r\\n    /// @param registry_ The Registry contract address\\r\\n    /// @dev Always call this method in the initializer function for any derived classes\\r\\n    function initializeSubscriber(address registry_) internal initializer {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _setRegistry(registry_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        _setRegistry(registry_);\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return getAddress(_REGISTRY_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address registry_) private {\\r\\n        setAddress(_REGISTRY_SLOT, registry_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32f5c681a6a387937e51f03e9e45762fb0a7d73fa060f9eb6746d273c792e215\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IBank} from \\\"../interfaces/bank/IBank.sol\\\";\\r\\nimport {IStrategyBase} from \\\"../interfaces/strategies/IStrategyBase.sol\\\";\\r\\nimport {ILiquidator} from \\\"../interfaces/ILiquidator.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\r\\nimport {OhSubscriberUpgradeable} from \\\"../registry/OhSubscriberUpgradeable.sol\\\";\\r\\nimport {OhStrategyStorage} from \\\"./OhStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Strategy\\r\\n/// @notice Base Upgradeable Strategy Contract to build strategies on\\r\\ncontract OhStrategy is OhSubscriberUpgradeable, OhStrategyStorage, IStrategyBase {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Liquidate(address indexed router, address indexed token, uint256 amount);\\r\\n    event Sweep(address indexed token, uint256 amount, address recipient);\\r\\n\\r\\n    /// @notice Only the Bank can execute these functions\\r\\n    modifier onlyBank() {\\r\\n        require(msg.sender == bank(), \\\"Strategy: Only Bank\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the base Strategy\\r\\n    /// @param registry_ Address of the Registry\\r\\n    /// @param bank_ Address of Bank\\r\\n    /// @param underlying_ Underying token that is deposited\\r\\n    /// @param derivative_ Derivative token received from protocol, or address(0)\\r\\n    /// @param reward_ Reward token received from protocol, or address(0)\\r\\n    function initializeStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        initializeSubscriber(registry_);\\r\\n        initializeStorage(bank_, underlying_, derivative_, reward_);\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of underlying awaiting Strategy investment\\r\\n    function underlyingBalance() public view override returns (uint256) {\\r\\n        return IERC20(underlying()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of derivative tokens received from Strategy, if applicable\\r\\n    /// @return The balance of derivative tokens\\r\\n    function derivativeBalance() public view override returns (uint256) {\\r\\n        if (derivative() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(derivative()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of reward tokens awaiting liquidation, if applicable\\r\\n    function rewardBalance() public view override returns (uint256) {\\r\\n        if (reward() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(reward()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Governance function to sweep any stuck / airdrop tokens to a given recipient\\r\\n    /// @param token The address of the token to sweep\\r\\n    /// @param amount The amount of tokens to sweep\\r\\n    /// @param recipient The address to send the sweeped tokens to\\r\\n    function sweep(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address recipient\\r\\n    ) external onlyGovernance {\\r\\n        // require(!_protected[token], \\\"Strategy: Cannot sweep\\\");\\r\\n        TransferHelper.safeTokenTransfer(recipient, token, amount);\\r\\n        emit Sweep(token, amount, recipient);\\r\\n    }\\r\\n\\r\\n    /// @dev Liquidation function to swap rewards for underlying\\r\\n    function liquidate(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        // if (amount > minimumSell())\\r\\n\\r\\n        // find the liquidator to use\\r\\n        address manager = manager();\\r\\n        address liquidator = IManager(manager).liquidators(from, to);\\r\\n\\r\\n        // increase allowance and liquidate to the manager\\r\\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\\r\\n        uint256 received = ILiquidator(liquidator).liquidate(manager, from, to, amount, 1);\\r\\n\\r\\n        // notify revenue and transfer proceeds back to strategy\\r\\n        IManager(manager).accrueRevenue(bank(), to, received);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9736e9a693e027f9931a6420d572cb170c369922571592a6ef3439f176a6a8a\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/strategies/OhStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IStrategyStorage} from \\\"../interfaces/strategies/IStrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhStrategyStorage is Initializable, OhUpgradeable, IStrategyStorage {\\r\\n    bytes32 internal constant _BANK_SLOT = 0xd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74;\\r\\n    bytes32 internal constant _UNDERLYING_SLOT = 0x0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812;\\r\\n    bytes32 internal constant _DERIVATIVE_SLOT = 0x4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3;\\r\\n    bytes32 internal constant _REWARD_SLOT = 0xaeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_BANK_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.bank\\\")) - 1));\\r\\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.underlying\\\")) - 1));\\r\\n        assert(_DERIVATIVE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.derivative\\\")) - 1));\\r\\n        assert(_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.reward\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeStorage(\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        _setBank(bank_);\\r\\n        _setUnderlying(underlying_);\\r\\n        _setDerivative(derivative_);\\r\\n        _setReward(reward_);\\r\\n    }\\r\\n\\r\\n    /// @notice The Bank that the Strategy is associated with\\r\\n    function bank() public view override returns (address) {\\r\\n        return getAddress(_BANK_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The underlying token the Strategy invests in AaveV2\\r\\n    function underlying() public view override returns (address) {\\r\\n        return getAddress(_UNDERLYING_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The derivative token received from AaveV2 (aToken)\\r\\n    function derivative() public view override returns (address) {\\r\\n        return getAddress(_DERIVATIVE_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The reward token received from AaveV2 (stkAave)\\r\\n    function reward() public view override returns (address) {\\r\\n        return getAddress(_REWARD_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setBank(address _address) internal {\\r\\n        setAddress(_BANK_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setUnderlying(address _address) internal {\\r\\n        setAddress(_UNDERLYING_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setDerivative(address _address) internal {\\r\\n        setAddress(_DERIVATIVE_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setReward(address _address) internal {\\r\\n        setAddress(_REWARD_SLOT, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb844858c0fdd73fdb58f6920a1d6a1cc4b192678f630fa4d0f35133624edbaa5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IWAVAX {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0ad508ff120b889235a8101511a4c7034e5d4275e0b33e58060c95d2448d8391\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/benqi/IAvalancheBenqiStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IAvalancheBenqiStrategyStorage {\\r\\n    function extraReward() external view returns (address);\\r\\n    \\r\\n    function comptroller() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x19b2cec3c0e801edfa405e38d52ba977771a85c17e32b8d0ac4ec761579aec27\",\"license\":\"MIT\"},\"contracts/strategies/benqi/OhAvalancheBenqiHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IWAVAX} from \\\"../../interfaces/IWAVAX.sol\\\"; \\r\\nimport {IQiToken} from \\\"./interfaces/IQiToken.sol\\\";\\r\\nimport {IBenqiComptroller} from \\\"./interfaces/IBenqiComptroller.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Oh! Finance Benqi Helper\\r\\n/// @notice Helper functions to interact with the Benqi Protocol\\r\\n/// @dev https://compound.finance\\r\\nabstract contract OhAvalancheBenqiHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Get the exchange rate of QiTokens => underlying\\r\\n    /// @dev https://compound.finance/docs/ctokens#exchange-rate\\r\\n    /// @param qiToken The qiToken address rate to get\\r\\n    /// @return The exchange rate scaled by 1e18\\r\\n    function getExchangeRate(address qiToken) internal view returns (uint256) {\\r\\n        return IQiToken(qiToken).exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /// @notice Enter the market (approve), required before calling borrow\\r\\n    /// @param comptroller The Benqi Comptroller (rewards contract)\\r\\n    /// @param qiToken The qiToken market to enter\\r\\n    function enter(address comptroller, address qiToken) internal {\\r\\n        address[] memory qiTokens = new address[](1);\\r\\n        qiTokens[0] = qiToken;\\r\\n        IBenqiComptroller(comptroller).enterMarkets(qiTokens);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint qiTokens by providing/lending underlying as collateral\\r\\n    /// @param underlying The underlying to lend to Compound\\r\\n    /// @param qiToken The Compound qiToken\\r\\n    /// @param amount The amount of underlying to lend\\r\\n    function mint(\\r\\n        address underlying,\\r\\n        address qiToken,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        IERC20(underlying).safeIncreaseAllowance(qiToken, amount);\\r\\n        uint256 result = IQiToken(qiToken).mint(amount);\\r\\n        require(result == 0, \\\"Benqi: Borrow failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Borrow underlying tokens from a given qiToken against collateral\\r\\n    /// @param qiToken The qiToken corresponding the underlying we want to borrow\\r\\n    /// @param amount The amount of underlying to borrow\\r\\n    function borrow(address qiToken, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 result = IQiToken(qiToken).borrow(amount);\\r\\n        require(result == 0, \\\"Benqi: Borrow failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Repay loan with a given amount of underlying\\r\\n    /// @param underlying The underlying to repay\\r\\n    /// @param qiToken The qiToken for the underlying\\r\\n    /// @param amount The amount of underlying to repay\\r\\n    function repay(\\r\\n        address underlying,\\r\\n        address qiToken,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20(underlying).safeIncreaseAllowance(qiToken, amount);\\r\\n        uint256 result = IQiToken(qiToken).repayBorrow(amount);\\r\\n        require(result == 0, \\\"Benqi: Repay failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem qiTokens for underlying\\r\\n    /// @param qiToken The qiToken to redeem\\r\\n    /// @param amount The amount of qiTokens to redeem\\r\\n    function redeem(address qiToken, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 result = IQiToken(qiToken).redeem(amount);\\r\\n        require(result == 0, \\\"Benqi: Redeem qiToken\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem qiTokens for underlying\\r\\n    /// @param qiToken The qiToken to redeem\\r\\n    /// @param amount The amount of underlying tokens to receive\\r\\n    function redeemUnderlying(address qiToken, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 result = IQiToken(qiToken).redeemUnderlying(amount);\\r\\n        require(result == 0, \\\"Benqi: Redeem underlying\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Claim QI rewards from Comptroller for this address\\r\\n    /// @param comptroller The Benqi Comptroller, Reward Contract\\r\\n    function claim(address comptroller, uint rewardType) internal {\\r\\n        IBenqiComptroller(comptroller).claimReward(uint8(rewardType), address(this));\\r\\n    }\\r\\n\\r\\n    function wrap(address wavax, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n        IWAVAX(wavax).deposit{value: amount}();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc3c219423b092615ee31914109fdfd2e4125571d18da497a08794c3fa89f328e\",\"license\":\"MIT\"},\"contracts/strategies/benqi/OhAvalancheBenqiStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {IStrategy} from \\\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\\\";\\r\\nimport {TransferHelper} from \\\"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport {OhStrategy} from \\\"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\\\";\\r\\nimport {OhAvalancheBenqiHelper} from \\\"./OhAvalancheBenqiHelper.sol\\\";\\r\\nimport {OhAvalancheBenqiStrategyStorage} from \\\"./OhAvalancheBenqiStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Benqi Strategy\\r\\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative cTokens\\r\\n/// @dev https://compound.finance/docs/ctokens\\r\\ncontract OhAvalancheBenqiStrategy is IStrategy, OhAvalancheBenqiHelper, OhStrategy, OhAvalancheBenqiStrategyStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Initialize the Benqi Strategy Logic\\r\\n    constructor() initializer {\\r\\n        assert(registry() == address(0));\\r\\n        assert(bank() == address(0));\\r\\n        assert(underlying() == address(0));\\r\\n        assert(reward() == address(0));\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the Benqi Strategy Proxy\\r\\n    /// @param registry_ the registry contract\\r\\n    /// @param bank_ the bank associated with the strategy\\r\\n    /// @param underlying_ the underlying token that is deposited\\r\\n    /// @param derivative_ the qiToken address received from Benqi\\r\\n    /// @param reward_ the address of the reward token QI\\r\\n    /// @param extraReward_ the address of the reward token WAVAX\\r\\n    /// @param comptroller_ the Benqi rewards contract\\r\\n    /// @dev The function should be called at time of deployment\\r\\n    function initializeBenqiStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_,\\r\\n        address extraReward_,\\r\\n        address comptroller_\\r\\n    ) public initializer {\\r\\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\\r\\n        initializeBenqiStorage(extraReward_, comptroller_);\\r\\n\\r\\n        IERC20(derivative_).safeApprove(underlying_, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the balance of underlying invested by the Strategy\\r\\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of qiTokens\\r\\n    /// @return The amount of underlying the strategy has invested\\r\\n    function investedBalance() public view override returns (uint256) {\\r\\n        uint256 exchangeRate = getExchangeRate(derivative());\\r\\n        return exchangeRate.mul(derivativeBalance()).div(1e18);\\r\\n    }\\r\\n\\r\\n    // Get the balance of extra rewards received by the Strategy\\r\\n    function extraRewardBalance() public view returns (uint256) {\\r\\n        return IERC20(extraReward()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function invest() external override onlyBank {\\r\\n        _compound();\\r\\n        _deposit();\\r\\n    }\\r\\n\\r\\n    function _compound() internal {\\r\\n        claim(comptroller(), 0);\\r\\n        uint256 amount = rewardBalance();\\r\\n        if (amount > 0) {\\r\\n            liquidate(reward(), underlying(), amount);\\r\\n        }\\r\\n\\r\\n        claim(comptroller(), 1);\\r\\n        wrap(extraReward(), address(this).balance);\\r\\n        uint256 extraAmount = extraRewardBalance();\\r\\n        if (extraAmount > 0) {\\r\\n            liquidate(extraReward(), underlying(), extraAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // deposit underlying tokens into Benqi, minting qiTokens\\r\\n    function _deposit() internal {\\r\\n        uint256 amount = underlyingBalance();\\r\\n        if (amount > 0) {\\r\\n            mint(underlying(), derivative(), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // withdraw all underlying by redeem all qiTokens\\r\\n    function withdrawAll() external override onlyBank {\\r\\n        uint256 invested = investedBalance();\\r\\n        _withdraw(msg.sender, invested);\\r\\n    }\\r\\n\\r\\n    // withdraw an amount of underlying tokens\\r\\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\\r\\n        uint256 withdrawn = _withdraw(msg.sender, amount);\\r\\n        return withdrawn;\\r\\n    }\\r\\n\\r\\n    // withdraw underlying tokens from the protocol after redeeming them from Benqi\\r\\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // calculate amount of shares to redeem\\r\\n        uint256 invested = investedBalance();\\r\\n        uint256 supplyShare = amount.mul(1e18).div(invested);\\r\\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\\r\\n\\r\\n        // safely redeem from Benqi\\r\\n        if (redeemAmount > invested) {\\r\\n            redeemUnderlying(derivative(), invested);\\r\\n        } else {\\r\\n            redeemUnderlying(derivative(), redeemAmount);\\r\\n        }\\r\\n\\r\\n        // withdraw to bank\\r\\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\\r\\n        return withdrawn;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x3a6fe4b37db9fc6cda5dc46945833cad9f883726760a69309b0c76f3725df9cb\",\"license\":\"MIT\"},\"contracts/strategies/benqi/OhAvalancheBenqiStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\\\";\\r\\nimport {IAvalancheBenqiStrategyStorage} from \\\"../../interfaces/strategies/benqi/IAvalancheBenqiStrategyStorage.sol\\\";\\r\\n\\r\\ncontract OhAvalancheBenqiStrategyStorage is Initializable, OhUpgradeable, IAvalancheBenqiStrategyStorage {\\r\\n    bytes32 internal constant _EXTRA_REWARD_SLOT = 0xf2cb7633197ad5c3d2c45444a2d158a3bab1c87ccd1ead8e7d92ff6b3750217d;\\r\\n    bytes32 internal constant _COMPTROLLER_SLOT = 0x2ef367ab1438cccede22571406f238368481af421cdc06cfd765d150e76c9965;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_EXTRA_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.benqiStrategy.extraReward\\\")) - 1));\\r\\n        assert(_COMPTROLLER_SLOT == bytes32(uint256(keccak256(\\\"eip1967.benqiStrategy.comptroller\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeBenqiStorage(address extraReward_, address comptroller_) internal initializer {\\r\\n        _setExtraReward(extraReward_);\\r\\n        _setComptroller(comptroller_);\\r\\n    }\\r\\n\\r\\n    function comptroller() public view override returns (address) {\\r\\n        return getAddress(_COMPTROLLER_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setComptroller(address comptroller_) internal {\\r\\n        setAddress(_COMPTROLLER_SLOT, comptroller_);\\r\\n    }\\r\\n\\r\\n    function extraReward() public view override returns (address) {\\r\\n        return getAddress(_EXTRA_REWARD_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setExtraReward(address extraReward_) internal {\\r\\n        setAddress(_EXTRA_REWARD_SLOT, extraReward_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3604a766ef1d7304aa056df956eae19756e8612ef2486b1736ae4d153a9af5cb\",\"license\":\"MIT\"},\"contracts/strategies/benqi/interfaces/IBenqiComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBenqiComptroller {\\r\\n    function getAccountLiquidity(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address qiTokenModify,\\r\\n        uint256 redeemTokens,\\r\\n        uint256 borrowAmount\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function claimReward(uint8 rewardType, address holder) external;\\r\\n\\r\\n    // function claimReward(uint8 rewardType, address holder, address[] memory qiTokens) external;\\r\\n\\r\\n    function enterMarkets(address[] calldata qiTokens) external returns (uint256[] memory);\\r\\n\\r\\n    function exitMarket(address qiToken) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0d4b33b16b1dd90f5ca538e7143d0b9dde79df9b82729b71cb74c30e124fbeeb\",\"license\":\"MIT\"},\"contracts/strategies/benqi/interfaces/IQiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IQiToken {\\r\\n    function underlying() external;\\r\\n\\r\\n    function mint(uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n    function exchangeRateStored() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf50bd58dd51fbff465c3a1bf4ea630ff42f91b4f700078556be28b4bdd410ef0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c806369e30ab7116100a0578063a91ee0dc11610064578063a91ee0dc146102ff578063aa5c3ab414610332578063c9168a5914610347578063dc2c256f1461035c578063e8b5e51f1461039f5761012a565b806369e30ab7146102965780636f307dc3146102ab57806376cdb03b146102c05780637b103999146102d5578063853828b6146102ea5761012a565b80633a88ac0f116100e75780633a88ac0f1461022d578063481c6a751461024257806359356c5c146102575780635aa6e6751461026c5780635fe3b567146102815761012a565b80631417030e1461012f57806319776d8e146101965780631985a89f146101bd578063228cb733146101ee5780632e1a7d4d146102035761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b50610194600480360360e081101561015257600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c090910135166103b4565b005b3480156101a257600080fd5b506101ab61048a565b60408051918252519081900360200190f35b3480156101c957600080fd5b506101d2610532565b604080516001600160a01b039092168252519081900360200190f35b3480156101fa57600080fd5b506101d2610562565b34801561020f57600080fd5b506101ab6004803603602081101561022657600080fd5b503561058d565b34801561023957600080fd5b506101d2610605565b34801561024e57600080fd5b506101d2610630565b34801561026357600080fd5b506101ab610672565b34801561027857600080fd5b506101d261067c565b34801561028d57600080fd5b506101d26106be565b3480156102a257600080fd5b506101ab6106e9565b3480156102b757600080fd5b506101d26106f3565b3480156102cc57600080fd5b506101d261071e565b3480156102e157600080fd5b506101d2610749565b3480156102f657600080fd5b50610194610774565b34801561030b57600080fd5b506101946004803603602081101561032257600080fd5b50356001600160a01b03166107f1565b34801561033e57600080fd5b506101ab6108d7565b34801561035357600080fd5b506101ab610901565b34801561036857600080fd5b506101946004803603606081101561037f57600080fd5b506001600160a01b03813581169160208101359160409091013516610940565b3480156103ab57600080fd5b50610194610a03565b600054610100900460ff16806103cd57506103cd610a7e565b806103db575060005460ff16155b6104165760405162461bcd60e51b815260040180806020018281038252602e815260200180611c20602e913960400191505060405180910390fd5b600054610100900460ff16158015610441576000805460ff1961ff0019909116610100171660011790555b61044e8888888888610a8f565b6104588383610b4b565b61046e6001600160a01b03861687600019610c01565b8015610480576000805461ff00191690555b5050505050505050565b600080610495610532565b6001600160a01b031614156104ac5750600061052f565b6104b4610532565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561050057600080fd5b505afa158015610514573d6000803e3d6000fd5b505050506040513d602081101561052a57600080fd5b505190505b90565b600061055d7f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3610d14565b905090565b600061055d7faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c610d14565b600061059761071e565b6001600160a01b0316336001600160a01b0316146105f2576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006105fe3384610d18565b9392505050565b600061055d7ff2cb7633197ad5c3d2c45444a2d158a3bab1c87ccd1ead8e7d92ff6b3750217d610d14565b600061063a610749565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561050057600080fd5b60006104b46106f3565b6000610686610749565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561050057600080fd5b600061055d7f2ef367ab1438cccede22571406f238368481af421cdc06cfd765d150e76c9965610d14565b60006104b4610605565b600061055d7f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812610d14565b600061055d7fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74610d14565b600061055d7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c610d14565b61077c61071e565b6001600160a01b0316336001600160a01b0316146107d7576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006107e1610901565b90506107ed3382610d18565b5050565b6107f961067c565b6001600160a01b0316336001600160a01b03161461085e576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61086781610db7565b61086f61067c565b6001600160a01b0316336001600160a01b0316146108d4576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6000806108e2610562565b6001600160a01b031614156108f95750600061052f565b6104b4610562565b60008061091461090f610532565b610de1565b905061093a670de0b6b3a764000061093461092d61048a565b8490610e4e565b90610ea7565b91505090565b61094861067c565b6001600160a01b0316336001600160a01b0316146109ad576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b6109b8818484610f0e565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b610a0b61071e565b6001600160a01b0316336001600160a01b031614610a66576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610a6e610fda565b610a76611057565b565b3b151590565b6000610a8930610a78565b15905090565b600054610100900460ff1680610aa85750610aa8610a7e565b80610ab6575060005460ff16155b610af15760405162461bcd60e51b815260040180806020018281038252602e815260200180611c20602e913960400191505060405180910390fd5b600054610100900460ff16158015610b1c576000805460ff1961ff0019909116610100171660011790555b610b2586611082565b610b3185858585611187565b8015610b43576000805461ff00191690555b505050505050565b600054610100900460ff1680610b645750610b64610a7e565b80610b72575060005460ff16155b610bad5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c20602e913960400191505060405180910390fd5b600054610100900460ff16158015610bd8576000805460ff1961ff0019909116610100171660011790555b610be183611251565b610bea8261127b565b8015610bfc576000805461ff00191690555b505050565b801580610c87575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b5051155b610cc25760405162461bcd60e51b8152600401808060200182810382526036815260200180611c996036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610bfc9084906112a5565b5490565b600081610d2757506000610db1565b6000610d31610901565b90506000610d4b8261093486670de0b6b3a7640000610e4e565b90506000610d65670de0b6b3a76400006109348486610e4e565b905082811115610d8557610d80610d7a610532565b84611356565b610d96565b610d96610d90610532565b82611356565b6000610daa87610da46106f3565b88610f0e565b9450505050505b92915050565b6108d47f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c82611429565b6000816001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d6020811015610e4657600080fd5b505192915050565b600082610e5d57506000610db1565b82820282848281610e6a57fe5b04146105fe5760405162461bcd60e51b8152600401808060200182810382526021815260200180611c4e6021913960400191505060405180910390fd5b6000808211610efd576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610f0657fe5b049392505050565b600081610f1d575060006105fe565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d6020811015610f9657600080fd5b5051905082811015610fbd57610fb66001600160a01b038516868361142d565b90506105fe565b610fd16001600160a01b038516868561142d565b50909392505050565b610fec610fe56106be565b600061147f565b6000610ff66108d7565b9050801561101757611017611009610562565b6110116106f3565b836114e3565b6110296110226106be565b600161147f565b61103a611034610605565b476116b0565b60006110446106e9565b905080156107ed576107ed611009610605565b6000611061610672565b905080156108d4576108d46110746106f3565b61107c610532565b83611712565b600054610100900460ff168061109b575061109b610a7e565b806110a9575060005460ff16155b6110e45760405162461bcd60e51b815260040180806020018281038252602e815260200180611c20602e913960400191505060405180910390fd5b600054610100900460ff1615801561110f576000805460ff1961ff0019909116610100171660011790555b61111882610a78565b611169576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b61117282610db7565b80156107ed576000805461ff00191690555050565b600054610100900460ff16806111a057506111a0610a7e565b806111ae575060005460ff16155b6111e95760405162461bcd60e51b815260040180806020018281038252602e815260200180611c20602e913960400191505060405180910390fd5b600054610100900460ff16158015611214576000805460ff1961ff0019909116610100171660011790555b61121d856117f6565b61122684611820565b61122f8361184a565b61123882611874565b801561124a576000805461ff00191690555b5050505050565b6108d47ff2cb7633197ad5c3d2c45444a2d158a3bab1c87ccd1ead8e7d92ff6b3750217d82611429565b6108d47f2ef367ab1438cccede22571406f238368481af421cdc06cfd765d150e76c996582611429565b60006112fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661189e9092919063ffffffff16565b805190915015610bfc5780806020019051602081101561131957600080fd5b5051610bfc5760405162461bcd60e51b815260040180806020018281038252602a815260200180611c6f602a913960400191505060405180910390fd5b80611360576107ed565b6000826001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156113a857600080fd5b505af11580156113bc573d6000803e3d6000fd5b505050506040513d60208110156113d257600080fd5b505190508015610bfc576040805162461bcd60e51b815260206004820152601860248201527f42656e71693a2052656465656d20756e6465726c79696e670000000000000000604482015290519081900360640190fd5b9055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bfc9084906112a5565b60408051630952c56360e01b815260ff8316600482015230602482015290516001600160a01b03841691630952c56391604480830192600092919082900301818387803b1580156114cf57600080fd5b505af1158015610b43573d6000803e3d6000fd5b60006114ed610630565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561154f57600080fd5b505afa158015611563573d6000803e3d6000fd5b505050506040513d602081101561157957600080fd5b50519050611588818685610f0e565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b1580156115f357600080fd5b505af1158015611607573d6000803e3d6000fd5b505050506040513d602081101561161d57600080fd5b505190506001600160a01b038316634893042861163861071e565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561169057600080fd5b505af11580156116a4573d6000803e3d6000fd5b50505050505050505050565b806116ba576107ed565b816001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b50505050505050565b8061171c57610bfc565b6117306001600160a01b03841683836118b5565b6000826001600160a01b031663a0712d68836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050506040513d60208110156117a257600080fd5b5051905080156117f0576040805162461bcd60e51b815260206004820152601460248201527310995b9c5a4e88109bdc9c9bddc819985a5b195960621b604482015290519081900360640190fd5b50505050565b6108d47fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7482611429565b6108d47f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81282611429565b6108d47f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d382611429565b6108d47faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c82611429565b60606118ad84846000856119a0565b949350505050565b600061194b82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d602081101561194357600080fd5b505190611afb565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506117f09085906112a5565b6060824710156119e15760405162461bcd60e51b8152600401808060200182810382526026815260200180611bfa6026913960400191505060405180910390fd5b6119ea85610a78565b611a3b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611a795780518252601f199092019160209182019101611a5a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611adb576040519150601f19603f3d011682016040523d82523d6000602084013e611ae0565b606091505b5091509150611af0828286611b55565b979650505050505050565b6000828201838110156105fe576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60608315611b645750816105fe565b825115611b745782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611bbe578181015183820152602001611ba6565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220f248a4b9baeeca6477939cefc1dc198172177ef1fa2ecf8ec7abcb6eb00122b264736f6c63430007060033",
  "devdoc": {
    "details": "https://compound.finance/docs/ctokens",
    "kind": "dev",
    "methods": {
      "derivativeBalance()": {
        "details": "Balance of derivative tokens received from Strategy, if applicable",
        "returns": {
          "_0": "The balance of derivative tokens"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "initializeBenqiStrategy(address,address,address,address,address,address,address)": {
        "details": "The function should be called at time of deployment",
        "params": {
          "bank_": "the bank associated with the strategy",
          "comptroller_": "the Benqi rewards contract",
          "derivative_": "the qiToken address received from Benqi",
          "extraReward_": "the address of the reward token WAVAX",
          "registry_": "the registry contract",
          "reward_": "the address of the reward token QI",
          "underlying_": "the underlying token that is deposited"
        }
      },
      "investedBalance()": {
        "details": "Get the exchange rate (which is scaled up by 1e18) and multiply by amount of qiTokens",
        "returns": {
          "_0": "The amount of underlying the strategy has invested"
        }
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "rewardBalance()": {
        "details": "Balance of reward tokens awaiting liquidation, if applicable"
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "sweep(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens to sweep",
          "recipient": "The address to send the sweeped tokens to",
          "token": "The address of the token to sweep"
        }
      },
      "underlyingBalance()": {
        "details": "Balance of underlying awaiting Strategy investment"
      }
    },
    "title": "Oh! Finance Benqi Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bank()": {
        "notice": "The Bank that the Strategy is associated with"
      },
      "constructor": {
        "notice": "Initialize the Benqi Strategy Logic"
      },
      "derivative()": {
        "notice": "The derivative token received from AaveV2 (aToken)"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "initializeBenqiStrategy(address,address,address,address,address,address,address)": {
        "notice": "Initializes the Benqi Strategy Proxy"
      },
      "investedBalance()": {
        "notice": "Get the balance of underlying invested by the Strategy"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "reward()": {
        "notice": "The reward token received from AaveV2 (stkAave)"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "sweep(address,uint256,address)": {
        "notice": "Governance function to sweep any stuck / airdrop tokens to a given recipient"
      },
      "underlying()": {
        "notice": "The underlying token the Strategy invests in AaveV2"
      }
    },
    "notice": "Standard, unleveraged strategy. Invest underlying tokens into derivative cTokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3184,
        "contract": "contracts/strategies/benqi/OhAvalancheBenqiStrategy.sol:OhAvalancheBenqiStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3187,
        "contract": "contracts/strategies/benqi/OhAvalancheBenqiStrategy.sol:OhAvalancheBenqiStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}