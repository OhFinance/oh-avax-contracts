{
  "address": "0xA2e9311D2881265fDfdb09f86859D9F09b9a7950",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowedUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactorDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactorNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivativeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "folds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "derivative_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "joetroller_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "folds_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorNumerator_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorDenominator_",
          "type": "uint256"
        }
      ],
      "name": "initializeBankerJoeFoldingStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joetroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowedUnderlying_",
          "type": "uint256"
        }
      ],
      "name": "setBorrowedUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "suppliedUnderlying_",
          "type": "uint256"
        }
      ],
      "name": "setSuppliedUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suppliedUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0da1687dc530b3712190a082e001deb86588c18825f945408c2dbae0470592a3",
  "receipt": {
    "to": null,
    "from": "0x000000010b5AFA32AB82B72625D68571B11EAE13",
    "contractAddress": "0xA2e9311D2881265fDfdb09f86859D9F09b9a7950",
    "transactionIndex": 2,
    "gasUsed": "2114356",
    "logsBloom": "0x
    "blockHash": "0xbae8729c67331d114522d51cca4c22672bae0cf4fe595dec6ba0f2ec0de0397b",
    "transactionHash": "0x0da1687dc530b3712190a082e001deb86588c18825f945408c2dbae0470592a3",
    "logs": [],
    "blockNumber": 9769721,
    "cumulativeGasUsed": "2327330",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2f5fa08249d0094ae8d0a7c375a4db6a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowedUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactorDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactorNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"folds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"derivative_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"joetroller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"folds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorNumerator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorDenominator_\",\"type\":\"uint256\"}],\"name\":\"initializeBankerJoeFoldingStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joetroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedUnderlying_\",\"type\":\"uint256\"}],\"name\":\"setBorrowedUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"suppliedUnderlying_\",\"type\":\"uint256\"}],\"name\":\"setSuppliedUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suppliedUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"https://docs.traderjoexyz.com/\",\"kind\":\"dev\",\"methods\":{\"derivativeBalance()\":{\"details\":\"Balance of derivative tokens received from Strategy, if applicable\",\"returns\":{\"_0\":\"The balance of derivative tokens\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"initializeBankerJoeFoldingStrategy(address,address,address,address,address,address,uint256,uint256,uint256)\":{\"details\":\"The function should be called at time of deployment\",\"params\":{\"bank_\":\"the bank associated with the strategy\",\"derivative_\":\"the JToken address received from BankerJoe\",\"joetroller_\":\"the BankerJoe rewards contract\",\"registry_\":\"the registry contract\",\"reward_\":\"the address of the reward token JOE\",\"underlying_\":\"the underlying token that is deposited\"}},\"investedBalance()\":{\"details\":\"Get the exchange rate (which is scaled up by 1e18) and multiply by amount of JTokens\",\"returns\":{\"_0\":\"The amount of underlying the strategy has invested\"}},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"rewardBalance()\":{\"details\":\"Balance of reward tokens awaiting liquidation, if applicable\"},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"sweep(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to sweep\",\"recipient\":\"The address to send the sweeped tokens to\",\"token\":\"The address of the token to sweep\"}},\"underlyingBalance()\":{\"details\":\"Balance of underlying awaiting Strategy investment\"}},\"title\":\"Oh! Finance Banker Joe Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bank()\":{\"notice\":\"The Bank that the Strategy is associated with\"},\"constructor\":{\"notice\":\"Initialize the BankerJoe Strategy Logic\"},\"derivative()\":{\"notice\":\"The derivative token received from AaveV2 (aToken)\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"initializeBankerJoeFoldingStrategy(address,address,address,address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Initializes the BankerJoe Folding Strategy Proxy\"},\"investedBalance()\":{\"notice\":\"Get the balance of underlying invested by the Strategy\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"reward()\":{\"notice\":\"The reward token received from AaveV2 (stkAave)\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"sweep(address,uint256,address)\":{\"notice\":\"Governance function to sweep any stuck / airdrop tokens to a given recipient\"},\"underlying()\":{\"notice\":\"The underlying token the Strategy invests in AaveV2\"}},\"notice\":\"Standard, unleveraged strategy. Invest underlying tokens into derivative JTokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategy.sol\":\"OhAvalancheBankerJoeFoldingStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ohfinance/oh-contracts/contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILiquidator {\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\\r\\n\\r\\n    function sushiswapRouter() external view returns (address);\\r\\n\\r\\n    function uniswapRouter() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x06e860aed460fcad6bda1d677e83ee5155a74767378445103224319712f65d91\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IBankStorage} from \\\"./IBankStorage.sol\\\";\\r\\n\\r\\ninterface IBank is IBankStorage {\\r\\n    function strategies(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function strategyBalance(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function invest(address strategy, uint256 amount) external;\\r\\n\\r\\n    function investAll(address strategy) external;\\r\\n\\r\\n    function exit(address strategy, uint256 amount) external;\\r\\n\\r\\n    function exitAll(address strategy) external;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositFor(uint256 amount, address recipient) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6de3defe08ace109d27988c102a358967a5265c2462193ab25681d8fa659aaa\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/bank/IBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBankStorage {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xda98d80e7a82404afa0ca24e3ce36ea5761301ab9bc4c573ee199af735f6f544\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyBase} from \\\"./IStrategyBase.sol\\\";\\r\\n\\r\\ninterface IStrategy is IStrategyBase {\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function invest() external;\\r\\n\\r\\n    function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8ddfe37d38ab5c1f10e649025c31f04bdadd42fb93e9ab422799925624494fb\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyStorage} from \\\"./IStrategyStorage.sol\\\";\\r\\n\\r\\ninterface IStrategyBase is IStrategyStorage {\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function derivativeBalance() external view returns (uint256);\\r\\n\\r\\n    function rewardBalance() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d2b099e226a7b99500af8c9c2beb5cf8a8da9a6675c6ca9f89ba229a270764\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IStrategyStorage {\\r\\n    function bank() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function derivative() external view returns (address);\\r\\n\\r\\n    function reward() external view returns (address);\\r\\n\\r\\n    // function investedBalance() external view returns (uint256);\\r\\n\\r\\n    // function invest() external;\\r\\n\\r\\n    // function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    // function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe02fa4951275170cfea55e68ec215048a1d2453255563cea3aae5d27d1248f93\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // safely transfer tokens without underflowing\\r\\n    function safeTokenTransfer(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            IERC20(token).safeTransfer(recipient, balance);\\r\\n            return balance;\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(recipient, amount);\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x554436aaa2fe9d290e98e1872d43990d713d8bd1061474cc423edeec6d1eb92d\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @title Oh! Finance Base Upgradeable\\r\\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\\r\\nabstract contract OhUpgradeable {\\r\\n    function getAddress(bytes32 slot) internal view returns (address _address) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _address := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\\r\\n        uint256 bool_;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            bool_ := sload(slot)\\r\\n        }\\r\\n        _bool = bool_ == 1;\\r\\n    }\\r\\n\\r\\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _bytes32 := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _uint := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddress(bytes32 slot, address _address) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _address)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _bytes32)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Set a boolean storage variable in a given slot\\r\\n    /// @dev Convert to a uint to take up an entire contract storage slot\\r\\n    function setBoolean(bytes32 slot, bool _bool) internal {\\r\\n        uint256 bool_ = _bool ? 1 : 0;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, bool_)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _uint)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5dd7d929b429b1987fd0b51a6cd2fa6d65eba8fcea83c08885ba594c14f7bf4e\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/registry/OhSubscriberUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber Upgradeable\\r\\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\\r\\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Verify the registry storage slot is correct\\r\\n    constructor() {\\r\\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.subscriber.registry\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Subscriber\\r\\n    /// @param registry_ The Registry contract address\\r\\n    /// @dev Always call this method in the initializer function for any derived classes\\r\\n    function initializeSubscriber(address registry_) internal initializer {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _setRegistry(registry_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        _setRegistry(registry_);\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return getAddress(_REGISTRY_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address registry_) private {\\r\\n        setAddress(_REGISTRY_SLOT, registry_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32f5c681a6a387937e51f03e9e45762fb0a7d73fa060f9eb6746d273c792e215\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IBank} from \\\"../interfaces/bank/IBank.sol\\\";\\r\\nimport {IStrategyBase} from \\\"../interfaces/strategies/IStrategyBase.sol\\\";\\r\\nimport {ILiquidator} from \\\"../interfaces/ILiquidator.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\r\\nimport {OhSubscriberUpgradeable} from \\\"../registry/OhSubscriberUpgradeable.sol\\\";\\r\\nimport {OhStrategyStorage} from \\\"./OhStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Strategy\\r\\n/// @notice Base Upgradeable Strategy Contract to build strategies on\\r\\ncontract OhStrategy is OhSubscriberUpgradeable, OhStrategyStorage, IStrategyBase {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Liquidate(address indexed router, address indexed token, uint256 amount);\\r\\n    event Sweep(address indexed token, uint256 amount, address recipient);\\r\\n\\r\\n    /// @notice Only the Bank can execute these functions\\r\\n    modifier onlyBank() {\\r\\n        require(msg.sender == bank(), \\\"Strategy: Only Bank\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the base Strategy\\r\\n    /// @param registry_ Address of the Registry\\r\\n    /// @param bank_ Address of Bank\\r\\n    /// @param underlying_ Underying token that is deposited\\r\\n    /// @param derivative_ Derivative token received from protocol, or address(0)\\r\\n    /// @param reward_ Reward token received from protocol, or address(0)\\r\\n    function initializeStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        initializeSubscriber(registry_);\\r\\n        initializeStorage(bank_, underlying_, derivative_, reward_);\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of underlying awaiting Strategy investment\\r\\n    function underlyingBalance() public view override returns (uint256) {\\r\\n        return IERC20(underlying()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of derivative tokens received from Strategy, if applicable\\r\\n    /// @return The balance of derivative tokens\\r\\n    function derivativeBalance() public view override returns (uint256) {\\r\\n        if (derivative() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(derivative()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of reward tokens awaiting liquidation, if applicable\\r\\n    function rewardBalance() public view override returns (uint256) {\\r\\n        if (reward() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(reward()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Governance function to sweep any stuck / airdrop tokens to a given recipient\\r\\n    /// @param token The address of the token to sweep\\r\\n    /// @param amount The amount of tokens to sweep\\r\\n    /// @param recipient The address to send the sweeped tokens to\\r\\n    function sweep(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address recipient\\r\\n    ) external onlyGovernance {\\r\\n        // require(!_protected[token], \\\"Strategy: Cannot sweep\\\");\\r\\n        TransferHelper.safeTokenTransfer(recipient, token, amount);\\r\\n        emit Sweep(token, amount, recipient);\\r\\n    }\\r\\n\\r\\n    /// @dev Liquidation function to swap rewards for underlying\\r\\n    function liquidate(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        // if (amount > minimumSell())\\r\\n\\r\\n        // find the liquidator to use\\r\\n        address manager = manager();\\r\\n        address liquidator = IManager(manager).liquidators(from, to);\\r\\n\\r\\n        // increase allowance and liquidate to the manager\\r\\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\\r\\n        uint256 received = ILiquidator(liquidator).liquidate(manager, from, to, amount, 1);\\r\\n\\r\\n        // notify revenue and transfer proceeds back to strategy\\r\\n        IManager(manager).accrueRevenue(bank(), to, received);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9736e9a693e027f9931a6420d572cb170c369922571592a6ef3439f176a6a8a\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/strategies/OhStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IStrategyStorage} from \\\"../interfaces/strategies/IStrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhStrategyStorage is Initializable, OhUpgradeable, IStrategyStorage {\\r\\n    bytes32 internal constant _BANK_SLOT = 0xd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74;\\r\\n    bytes32 internal constant _UNDERLYING_SLOT = 0x0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812;\\r\\n    bytes32 internal constant _DERIVATIVE_SLOT = 0x4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3;\\r\\n    bytes32 internal constant _REWARD_SLOT = 0xaeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_BANK_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.bank\\\")) - 1));\\r\\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.underlying\\\")) - 1));\\r\\n        assert(_DERIVATIVE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.derivative\\\")) - 1));\\r\\n        assert(_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.reward\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeStorage(\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        _setBank(bank_);\\r\\n        _setUnderlying(underlying_);\\r\\n        _setDerivative(derivative_);\\r\\n        _setReward(reward_);\\r\\n    }\\r\\n\\r\\n    /// @notice The Bank that the Strategy is associated with\\r\\n    function bank() public view override returns (address) {\\r\\n        return getAddress(_BANK_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The underlying token the Strategy invests in AaveV2\\r\\n    function underlying() public view override returns (address) {\\r\\n        return getAddress(_UNDERLYING_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The derivative token received from AaveV2 (aToken)\\r\\n    function derivative() public view override returns (address) {\\r\\n        return getAddress(_DERIVATIVE_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The reward token received from AaveV2 (stkAave)\\r\\n    function reward() public view override returns (address) {\\r\\n        return getAddress(_REWARD_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setBank(address _address) internal {\\r\\n        setAddress(_BANK_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setUnderlying(address _address) internal {\\r\\n        setAddress(_UNDERLYING_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setDerivative(address _address) internal {\\r\\n        setAddress(_DERIVATIVE_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setReward(address _address) internal {\\r\\n        setAddress(_REWARD_SLOT, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb844858c0fdd73fdb58f6920a1d6a1cc4b192678f630fa4d0f35133624edbaa5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IWAVAX {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0ad508ff120b889235a8101511a4c7034e5d4275e0b33e58060c95d2448d8391\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/bankerjoe/IAvalancheBankerJoeFoldingStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IAvalancheBankerJoeFoldingStrategyStorage {\\r\\n    function joetroller() external view returns (address);\\r\\n\\r\\n    function folds() external view returns (uint256);\\r\\n\\r\\n    function collateralFactorNumerator() external view returns (uint256);\\r\\n\\r\\n    function collateralFactorDenominator() external view returns (uint256);\\r\\n\\r\\n    function suppliedUnderlying() external view returns (uint256);\\r\\n\\r\\n    function setSuppliedUnderlying(uint256 suppliedUnderlying_) external;\\r\\n\\r\\n    function borrowedUnderlying() external view returns (uint256);\\r\\n\\r\\n    function setBorrowedUnderlying(uint256 borrowedUnderlying_) external;\\r\\n}\",\"keccak256\":\"0x34af5cbf7b2eb9015b7a92b49b727f270284ce45b851eda871a63953f5e65485\",\"license\":\"MIT\"},\"contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport {IStrategy} from \\\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\\\";\\r\\nimport {TransferHelper} from \\\"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport {OhStrategy} from \\\"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\\\";\\r\\nimport {OhAvalancheBankerJoeHelper} from \\\"./OhAvalancheBankerJoeHelper.sol\\\";\\r\\nimport {OhAvalancheBankerJoeFoldingStrategyStorage} from \\\"./OhAvalancheBankerJoeFoldingStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Banker Joe Strategy\\r\\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative JTokens\\r\\n/// @dev https://docs.traderjoexyz.com/\\r\\ncontract OhAvalancheBankerJoeFoldingStrategy is IStrategy, OhAvalancheBankerJoeHelper, OhStrategy, OhAvalancheBankerJoeFoldingStrategyStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Initialize the BankerJoe Strategy Logic\\r\\n    constructor() initializer {\\r\\n        assert(registry() == address(0));\\r\\n        assert(bank() == address(0));\\r\\n        assert(underlying() == address(0));\\r\\n        assert(reward() == address(0));\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the BankerJoe Folding Strategy Proxy\\r\\n    /// @param registry_ the registry contract\\r\\n    /// @param bank_ the bank associated with the strategy\\r\\n    /// @param underlying_ the underlying token that is deposited\\r\\n    /// @param derivative_ the JToken address received from BankerJoe\\r\\n    /// @param reward_ the address of the reward token JOE\\r\\n    /// @param joetroller_ the BankerJoe rewards contract\\r\\n    /// @dev The function should be called at time of deployment\\r\\n    function initializeBankerJoeFoldingStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_,\\r\\n        address joetroller_,\\r\\n        uint256 folds_,\\r\\n        uint256 collateralFactorNumerator_,\\r\\n        uint256 collateralFactorDenominator_\\r\\n    ) public initializer {\\r\\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\\r\\n        initializeBankerJoeFoldingStorage(joetroller_, folds_,\\r\\n            collateralFactorNumerator_, collateralFactorDenominator_);\\r\\n\\r\\n        IERC20(derivative_).safeApprove(underlying_, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the balance of underlying invested by the Strategy\\r\\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of JTokens\\r\\n    /// @return The amount of underlying the strategy has invested\\r\\n    function investedBalance() public view override returns (uint256) {\\r\\n        return suppliedUnderlying().sub(borrowedUnderlying());\\r\\n    }\\r\\n\\r\\n    function invest() external override onlyBank {\\r\\n        _compound();\\r\\n        _deposit();\\r\\n    }\\r\\n\\r\\n    function _compound() internal {\\r\\n        _claimAll();\\r\\n\\r\\n        uint256 amount = rewardBalance();\\r\\n        if (amount > 0) {\\r\\n            liquidate(reward(), underlying(), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _claimAll() internal {\\r\\n        // Claim JOE\\r\\n        claim(joetroller(), 0);\\r\\n    }\\r\\n\\r\\n    // deposit underlying tokens into BankerJoe as collateral and borrow against it, minting JTokens\\r\\n    function _deposit() internal {\\r\\n        uint256 balance = underlyingBalance();\\r\\n\\r\\n        if (balance > 0) {\\r\\n            mint(underlying(), derivative(), balance);\\r\\n\\r\\n            uint256 folds = folds();\\r\\n            for (uint256 i = 0; i < folds; i++) {\\r\\n                uint256 borrowAmount = balance.mul(collateralFactorNumerator()).div(collateralFactorDenominator());\\r\\n                borrow(derivative(), borrowAmount);\\r\\n                balance = underlyingBalance();\\r\\n                mint(underlying(), derivative(), balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        updateSupply();\\r\\n    }\\r\\n\\r\\n    // withdraw all underlying by redeem all JTokens\\r\\n    function withdrawAll() external override onlyBank {\\r\\n        updateSupply();\\r\\n        uint256 invested = investedBalance();\\r\\n        _withdraw(msg.sender, invested);\\r\\n    }\\r\\n\\r\\n    // withdraw an amount of underlying tokens\\r\\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\\r\\n        updateSupply();\\r\\n        uint256 withdrawn = _withdraw(msg.sender, amount);\\r\\n        return withdrawn;\\r\\n    }\\r\\n\\r\\n    // withdraw underlying tokens from the protocol after redeeming them from trader joe\\r\\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 invested = investedBalance();\\r\\n        if (invested == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // calculate amount to redeem by supply ownership\\r\\n        uint256 withdrawn;\\r\\n        uint256 supplyShare = amount.mul(1e18).div(invested);\\r\\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\\r\\n\\r\\n        if (redeemAmount <= underlyingBalance()) {\\r\\n            withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\\r\\n            return withdrawn;\\r\\n        }\\r\\n\\r\\n        // safely redeem from BankerJoe\\r\\n        if (redeemAmount > invested) {\\r\\n            mustRedeemPartial(invested);\\r\\n        } else {\\r\\n            mustRedeemPartial(redeemAmount);\\r\\n        }\\r\\n\\r\\n        // withdraw to bank\\r\\n        withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\\r\\n        \\r\\n        // re-invest whatever is left over if any\\r\\n        if (underlyingBalance() > 10) {\\r\\n            _compound();\\r\\n            _deposit();\\r\\n        } else {\\r\\n            updateSupply();\\r\\n        }\\r\\n\\r\\n        return withdrawn;\\r\\n    }\\r\\n\\r\\n    // Redeems `amountUnderlying` or fails.\\r\\n    function mustRedeemPartial(uint256 amountUnderlying) internal {\\r\\n        require(\\r\\n            getCash(derivative()) >= amountUnderlying,\\r\\n            \\\"market cash cannot cover liquidity\\\"\\r\\n        );\\r\\n        redeemMaximumUnderlyingWithLoan();\\r\\n        require(underlyingBalance() >= amountUnderlying, \\\"Unable to withdraw the entire amountUnderlying\\\");\\r\\n    }\\r\\n\\r\\n    function redeemMaximumUnderlyingWithLoan() internal {\\r\\n        // amount of liquidity\\r\\n        uint256 available = getCash(derivative());\\r\\n        // amount of MIM we supplied\\r\\n        uint256 supplied = balanceOfUnderlying(derivative(), address(this));\\r\\n        // amount of MIM we borrowed\\r\\n        uint256 borrowed = borrowBalanceCurrent(derivative(), address(this));\\r\\n\\r\\n        while (borrowed > 0) {\\r\\n            uint256 requiredCollateral = borrowed\\r\\n                .mul(collateralFactorDenominator())\\r\\n                .add(collateralFactorNumerator().div(2))           \\r\\n                .div(collateralFactorNumerator());\\r\\n\\r\\n            // redeem just as much as needed to repay the loan\\r\\n            uint256 wantToRedeem = supplied.sub(requiredCollateral);\\r\\n            redeemUnderlying(derivative(), Math.min(wantToRedeem, available));\\r\\n            // now we can repay our borrowed amount\\r\\n            uint256 balance = underlyingBalance();\\r\\n            repay(underlying(), derivative(), Math.min(borrowed, balance));\\r\\n\\r\\n            // update the parameters\\r\\n            available = getCash(derivative());\\r\\n            supplied = balanceOfUnderlying(derivative(), address(this));\\r\\n            borrowed = borrowBalanceCurrent(derivative(), address(this));\\r\\n        }\\r\\n\\r\\n        // redeem the most we can redeem\\r\\n        redeemUnderlying(derivative(), Math.min(available, supplied));\\r\\n    }\\r\\n\\r\\n    function updateSupply() internal {\\r\\n        setSuppliedUnderlying(balanceOfUnderlying(derivative(), address(this)));\\r\\n        setBorrowedUnderlying(borrowBalanceCurrent(derivative(), address(this)));\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xd7989f821f737967112b5b110f499a19f2d12b2132cb47bb6bdef4dabc696f54\",\"license\":\"MIT\"},\"contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IAvalancheBankerJoeFoldingStrategyStorage} from \\\"../../interfaces/strategies/bankerjoe/IAvalancheBankerJoeFoldingStrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhAvalancheBankerJoeFoldingStrategyStorage is Initializable, OhUpgradeable, IAvalancheBankerJoeFoldingStrategyStorage {\\r\\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0xe92764c73743fa82af30af57881d71cb3552bcab7db5413e39640bec7888368e;\\r\\n    bytes32 internal constant _JOETROLLER_SLOT = 0xa8500b33177885436fffd1cad82f3d2505b0c5599689e0cc7ddc3cd69e835a0a;\\r\\n    bytes32 internal constant _FOLDS = 0x3f7ee994563fc1c4ce9783c52305490733b6dbde7985bc669d8320bf0782dda8;\\r\\n    bytes32 internal constant _COLLATERAL_FACTOR = 0xd0637784b71c719bba82dcdf8faa54186e4b319a889f085ee2cfe76b7d2325f8;\\r\\n    bytes32 internal constant _COLLATERAL_FACTOR_NUMERATOR = 0x2583c2fe9a19a2c5d372d3844edcdcb06f04785322744fde694dc2cf87b09907;\\r\\n    bytes32 internal constant _COLLATERAL_FACTOR_DENOMINATOR = 0x89897de7bf54873cd4b26bf44ee19d24f2bf9ea7480517440d5f2213ec2770d8;\\r\\n    bytes32 internal constant _SUPPLIED_UNDERLYING = 0x142313439ce87f0d58e0f7d4947bc31c1124d9fab1eec74dc028983fec37c48a;\\r\\n    bytes32 internal constant _BORROWED_UNDERLYING = 0x24d7357e790aaef7672d5161e8993dbbae37ca571a36629afb4d93cdff80bf36;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.secondaryReward\\\")) - 1));\\r\\n        assert(_JOETROLLER_SLOT == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.joetroller\\\")) - 1));\\r\\n        assert(_FOLDS == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.folds\\\")) - 1));\\r\\n        assert(_COLLATERAL_FACTOR == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.collateralFactor\\\")) - 1));\\r\\n        assert(_COLLATERAL_FACTOR_NUMERATOR == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.collateralFactorNumerator\\\")) - 1));\\r\\n        assert(_COLLATERAL_FACTOR_DENOMINATOR == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.collateralFactorDenominator\\\")) - 1));\\r\\n        assert(_SUPPLIED_UNDERLYING == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.suppliedUnderlying\\\")) - 1));\\r\\n        assert(_BORROWED_UNDERLYING == bytes32(uint256(keccak256(\\\"eip1967.bankerjoeFoldingStrategy.borrowedUnderlying\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeBankerJoeFoldingStorage(\\r\\n        address joetroller_,\\r\\n        uint256 folds_,\\r\\n        uint256 collateralFactorNumerator_,\\r\\n        uint256 collateralFactorDenominator_) internal initializer {\\r\\n        _setJoetroller(joetroller_);\\r\\n        _setFolds(folds_);\\r\\n        _setCollateralFactorNumerator(collateralFactorNumerator_);\\r\\n        _setCollateralFactorDenominator(collateralFactorDenominator_);\\r\\n        setSuppliedUnderlying(0);\\r\\n        setBorrowedUnderlying(0);\\r\\n    }\\r\\n\\r\\n    function joetroller() public view override returns (address) {\\r\\n        return getAddress(_JOETROLLER_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setJoetroller(address joetroller_) internal {\\r\\n        setAddress(_JOETROLLER_SLOT, joetroller_);\\r\\n    }\\r\\n\\r\\n    function folds() public view override returns (uint256) {\\r\\n        return getUInt256(_FOLDS);\\r\\n    }\\r\\n\\r\\n    function _setFolds(uint256 folds_) internal {\\r\\n        setUInt256(_FOLDS, folds_);\\r\\n    }\\r\\n\\r\\n    function collateralFactorNumerator() public view override returns (uint256) {\\r\\n        return getUInt256(_COLLATERAL_FACTOR_NUMERATOR);\\r\\n    }\\r\\n\\r\\n    function _setCollateralFactorNumerator(uint256 collateralFactorNumerator_) internal {\\r\\n        setUInt256(_COLLATERAL_FACTOR_NUMERATOR, collateralFactorNumerator_);\\r\\n    }\\r\\n\\r\\n    function collateralFactorDenominator() public view override returns (uint256) {\\r\\n        return getUInt256(_COLLATERAL_FACTOR_DENOMINATOR);\\r\\n    }\\r\\n\\r\\n    function _setCollateralFactorDenominator(uint256 collateralFactorDenominator_) internal {\\r\\n        setUInt256(_COLLATERAL_FACTOR_DENOMINATOR, collateralFactorDenominator_);\\r\\n    }\\r\\n\\r\\n    function suppliedUnderlying() public view override returns (uint256) {\\r\\n        return getUInt256(_SUPPLIED_UNDERLYING);\\r\\n    }\\r\\n\\r\\n    function setSuppliedUnderlying(uint256 suppliedUnderlying_) public override {\\r\\n        setUInt256(_SUPPLIED_UNDERLYING, suppliedUnderlying_);\\r\\n    }\\r\\n\\r\\n    function borrowedUnderlying() public view override returns (uint256) {\\r\\n        return getUInt256(_BORROWED_UNDERLYING);\\r\\n    }\\r\\n\\r\\n    function setBorrowedUnderlying(uint256 borrowedUnderlying_) public override {\\r\\n        setUInt256(_BORROWED_UNDERLYING, borrowedUnderlying_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7bba312aa43d9720b8e1b9d511f3676320afcd89e6b4da813a3691eb0cbe01a7\",\"license\":\"MIT\"},\"contracts/strategies/bankerjoe/OhAvalancheBankerJoeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IWAVAX} from \\\"../../interfaces/IWAVAX.sol\\\";\\r\\nimport {IJToken} from \\\"./interfaces/IJToken.sol\\\";\\r\\nimport {IJoetroller} from \\\"./interfaces/IJoetroller.sol\\\";\\r\\nimport {IJAvax} from \\\"./interfaces/IJAvax.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance BankerJoe Helper\\r\\n/// @notice Helper functions to interact with the BankerJoe Protocol\\r\\n/// @dev https://docs.traderjoexyz.com/\\r\\nabstract contract OhAvalancheBankerJoeHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Get the exchange rate of jTokens => underlying\\r\\n    /// @dev https://compound.finance/docs/ctokens#exchange-rate No equivalent in Trader Joe docs\\r\\n    /// @param jToken The jToken address rate to get\\r\\n    /// @return The exchange rate scaled by 1e18\\r\\n    function getExchangeRate(address jToken) internal view returns (uint256) {\\r\\n        return IJToken(jToken).exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /// @notice Enter the market (approve), required before calling borrow\\r\\n    /// @param joetroller The BankerJoe Joetroller (rewards contract)\\r\\n    /// @param jToken The jToken market to enter\\r\\n    function enter(address joetroller, address jToken) internal {\\r\\n        address[] memory jTokens = new address[](1);\\r\\n        jTokens[0] = jToken;\\r\\n        IJoetroller(joetroller).enterMarkets(jTokens);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint jTokens by providing/lending underlying as collateral\\r\\n    /// @param underlying The underlying to lend to BankerJoe\\r\\n    /// @param jToken The BankerJoe jToken\\r\\n    /// @param amount The amount of underlying to lend\\r\\n    function mint(\\r\\n        address underlying,\\r\\n        address jToken,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20(underlying).safeIncreaseAllowance(jToken, amount);\\r\\n        uint256 result = IJToken(jToken).mint(amount);\\r\\n        require(result == 0, \\\"BankerJoe: Borrow failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Borrow underlying tokens from a given jToken against collateral\\r\\n    /// @param jToken The jToken corresponding the underlying we want to borrow\\r\\n    /// @param amount The amount of underlying to borrow\\r\\n    function borrow(address jToken, uint256 amount) internal {\\r\\n        if (amount < 1e18) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 result = IJToken(jToken).borrow(amount);\\r\\n        require(result == 0, \\\"BankerJoe: Borrow failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Repay loan with a given amount of underlying\\r\\n    /// @param underlying The underlying to repay\\r\\n    /// @param jToken The jToken for the underlying\\r\\n    /// @param amount The amount of underlying to repay\\r\\n    function repay(\\r\\n        address underlying,\\r\\n        address jToken,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20(underlying).safeIncreaseAllowance(jToken, amount);\\r\\n        uint256 result = IJToken(jToken).repayBorrow(amount);\\r\\n        require(result == 0, \\\"BankerJoe: Repay failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem jTokens for underlying\\r\\n    /// @param jToken The jToken to redeem\\r\\n    /// @param amount The amount of jTokens to redeem\\r\\n    function redeem(address jToken, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 result = IJToken(jToken).redeem(amount);\\r\\n        require(result == 0, \\\"BankerJoe: Redeem jToken\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem jTokens for underlying\\r\\n    /// @param jToken The jToken to redeem\\r\\n    /// @param amount The amount of underlying tokens to receive\\r\\n    function redeemUnderlying(address jToken, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 result = IJToken(jToken).redeemUnderlying(amount);\\r\\n        require(result == 0, \\\"BankerJoe: Redeem underlying\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem jTokens for wavax\\r\\n    /// @param wavax WAVAX Address\\r\\n    /// @param jToken The jToken to redeem\\r\\n    /// @param amount The amount of underlying to receive\\r\\n    /// @dev Redeem in AVAX, then convert to wavax\\r\\n    function redeemUnderlyingInWeth(\\r\\n        address wavax,\\r\\n        address jToken,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        redeemUnderlying(jToken, amount);\\r\\n        IWAVAX(wavax).deposit{value: address(this).balance}();\\r\\n    }\\r\\n\\r\\n    /// @notice Claim JOE rewards from Joetroller for this address\\r\\n    /// @param joetroller The BankerJoe Joetroller, Reward Contract\\r\\n    /// @param rewardType Reward type: 0 = JOE, 1 = AVAX\\r\\n    function claim(address joetroller, uint8 rewardType) internal {\\r\\n        IJoetroller(joetroller).claimReward(rewardType, address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Wrap AVAX to WAVAX\\r\\n    /// @param wavax Address of WAVAX\\r\\n    /// @param amount Amount of AVAX to wrap\\r\\n    function wrap(address wavax, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n        IWAVAX(wavax).deposit{value: amount}();\\r\\n    }\\r\\n\\r\\n    // Returns the cash balance of this jToken in the underlying asset\\r\\n    function getCash(address jToken) internal view returns (uint256) {\\r\\n        return IJToken(jToken).getCash();\\r\\n    }\\r\\n\\r\\n    // Returns the owner's jToken balance\\r\\n    function balanceOfUnderlying(address jToken, address owner) internal returns (uint256) {\\r\\n        return IJToken(jToken).balanceOfUnderlying(owner);\\r\\n    }\\r\\n\\r\\n    // Returns the owner's borrow balance\\r\\n    function borrowBalanceCurrent(address jToken, address owner) internal returns (uint256) {\\r\\n        return IJToken(jToken).borrowBalanceCurrent(owner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xca5760688db238ecf0f138b5d86b57297df75082c58d7d40b123fddbd551ce0c\",\"license\":\"MIT\"},\"contracts/strategies/bankerjoe/interfaces/IJAvax.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IJAvax {\\r\\n    function mint() external payable;\\r\\n\\r\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n    function repayBorrow() external payable;\\r\\n\\r\\n    function repayBorrowBehalf(address borrower) external payable;\\r\\n\\r\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\r\\n\\r\\n    function borrowBalanceStored(address account) external view returns (uint256);\\r\\n\\r\\n    function balanceOfUnderlying(address account) external returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function getAccountSnapshot(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xfaac2cd24cc2ebd14295f5a0208213c188fbc7ab300d3f3fffac08ed58afb746\",\"license\":\"MIT\"},\"contracts/strategies/bankerjoe/interfaces/IJToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IJToken {\\r\\n    function underlying() external;\\r\\n\\r\\n    function mint(uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n    function exchangeRateStored() external view returns (uint256);\\r\\n\\r\\n    function getCash() external view returns (uint256);\\r\\n\\r\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\r\\n\\r\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\r\\n}\",\"keccak256\":\"0x251b73aac6da7671fc534465cdf0a97cf8f74ec1df5e55c33384392f5280b797\",\"license\":\"MIT\"},\"contracts/strategies/bankerjoe/interfaces/IJoetroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IJoetroller {\\r\\n    function getAccountLiquidity(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address JTokenModify,\\r\\n        uint256 redeemTokens,\\r\\n        uint256 borrowAmount\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function claimReward(uint8 rewardType, address holder) external;\\r\\n\\r\\n    function enterMarkets(address[] calldata JTokens) external returns (uint256[] memory);\\r\\n\\r\\n    function exitMarket(address JToken) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x30049439347e9c65b57161adf7ec8d3a0f223bfc8336624d43fe9958a2f04269\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002e57506200002e62000134565b806200003d575060005460ff16155b6200007a5760405162461bcd60e51b815260040180806020018281038252602e815260200180620026b8602e913960400191505060405180910390fd5b600054610100900460ff16158015620000a6576000805460ff1961ff0019909116610100171660011790555b6000620000b262000152565b6001600160a01b031614620000c357fe5b6000620000cf62000184565b6001600160a01b031614620000e057fe5b6000620000ec620001b1565b6001600160a01b031614620000fd57fe5b600062000109620001de565b6001600160a01b0316146200011a57fe5b80156200012d576000805461ff00191690555b5062000215565b60006200014c306200020b60201b62000c441760201c565b15905090565b60006200017f7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c62000211565b905090565b60006200017f7fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7462000211565b60006200017f7f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81262000211565b60006200017f7faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c62000211565b3b151590565b5490565b61249380620002256000396000f3fe60806040526004361061016a5760003560e01c80636330533c116100d1578063919019451161008a578063b5d7a94f11610064578063b5d7a94f14610418578063c9168a591461042d578063dc2c256f14610442578063e8b5e51f1461048557610171565b806391901945146103bb578063a91ee0dc146103d0578063aa5c3ab41461040357610171565b80636330533c1461033d5780636f307dc31461035257806376cdb03b146103675780637b1039991461037c5780637bf3c4d114610391578063853828b6146103a657610171565b8063481c6a7511610123578063481c6a7514610263578063588cfb841461027857806359356c5c1461028d5780635aa6e675146102a25780635f25d3b2146102b7578063622377491461032857610171565b806313ed45ec1461017657806319776d8e146101a25780631985a89f146101c9578063228cb733146101fa57806325f2a61b1461020f5780632e1a7d4d1461023957610171565b3661017157005b600080fd5b34801561018257600080fd5b506101a06004803603602081101561019957600080fd5b503561049a565b005b3480156101ae57600080fd5b506101b76104c7565b60408051918252519081900360200190f35b3480156101d557600080fd5b506101de61056f565b604080516001600160a01b039092168252519081900360200190f35b34801561020657600080fd5b506101de61059f565b34801561021b57600080fd5b506101a06004803603602081101561023257600080fd5b50356105ca565b34801561024557600080fd5b506101b76004803603602081101561025c57600080fd5b50356105f4565b34801561026f57600080fd5b506101de610674565b34801561028457600080fd5b506101b76106b6565b34801561029957600080fd5b506101b76106e1565b3480156102ae57600080fd5b506101de6106eb565b3480156102c357600080fd5b506101a060048036036101208110156102db57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a08101359091169060c08101359060e081013590610100013561072d565b34801561033457600080fd5b506101b7610807565b34801561034957600080fd5b506101de610832565b34801561035e57600080fd5b506101de61085d565b34801561037357600080fd5b506101de610888565b34801561038857600080fd5b506101de6108b3565b34801561039d57600080fd5b506101b76108de565b3480156103b257600080fd5b506101a0610909565b3480156103c757600080fd5b506101b761098e565b3480156103dc57600080fd5b506101a0600480360360208110156103f357600080fd5b50356001600160a01b03166109b9565b34801561040f57600080fd5b506101b7610a9c565b34801561042457600080fd5b506101b7610ac6565b34801561043957600080fd5b506101b7610af1565b34801561044e57600080fd5b506101a06004803603606081101561046557600080fd5b506001600160a01b03813581169160208101359160409091013516610b0c565b34801561049157600080fd5b506101a0610bcf565b6104c47f24d7357e790aaef7672d5161e8993dbbae37ca571a36629afb4d93cdff80bf3682610c4a565b50565b6000806104d261056f565b6001600160a01b031614156104e95750600061056c565b6104f161056f565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b505190505b90565b600061059a7f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3610c4e565b905090565b600061059a7faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c610c4e565b6104c47f142313439ce87f0d58e0f7d4947bc31c1124d9fab1eec74dc028983fec37c48a82610c4a565b60006105fe610888565b6001600160a01b0316336001600160a01b031614610659576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610661610c52565b600061066d3384610c84565b9392505050565b600061067e6108b3565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b600061059a7f3f7ee994563fc1c4ce9783c52305490733b6dbde7985bc669d8320bf0782dda8610c4e565b60006104f161085d565b60006106f56108b3565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b600054610100900460ff16806107465750610746610d7c565b80610754575060005460ff16155b61078f5760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff161580156107ba576000805460ff1961ff0019909116610100171660011790555b6107c78a8a8a8a8a610d8d565b6107d385858585610e49565b6107e96001600160a01b03881689600019610f27565b80156107fb576000805461ff00191690555b50505050505050505050565b600061059a7f89897de7bf54873cd4b26bf44ee19d24f2bf9ea7480517440d5f2213ec2770d8610c4e565b600061059a7fa8500b33177885436fffd1cad82f3d2505b0c5599689e0cc7ddc3cd69e835a0a610c4e565b600061059a7f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812610c4e565b600061059a7fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74610c4e565b600061059a7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c610c4e565b600061059a7f24d7357e790aaef7672d5161e8993dbbae37ca571a36629afb4d93cdff80bf36610c4e565b610911610888565b6001600160a01b0316336001600160a01b03161461096c576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610974610c52565b600061097e610af1565b905061098a3382610c84565b5050565b600061059a7f142313439ce87f0d58e0f7d4947bc31c1124d9fab1eec74dc028983fec37c48a610c4e565b6109c16106eb565b6001600160a01b0316336001600160a01b031614610a26576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610a2f8161103f565b610a376106eb565b6001600160a01b0316336001600160a01b0316146104c4576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b600080610aa761059f565b6001600160a01b03161415610abe5750600061056c565b6104f161059f565b600061059a7f2583c2fe9a19a2c5d372d3844edcdcb06f04785322744fde694dc2cf87b09907610c4e565b600061059a610afe6108de565b610b0661098e565b90611069565b610b146106eb565b6001600160a01b0316336001600160a01b031614610b79576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610b848184846110c6565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b610bd7610888565b6001600160a01b0316336001600160a01b031614610c32576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610c3a611192565b610c426111c5565b565b3b151590565b9055565b5490565b610c6b610c66610c6061056f565b30611270565b6105ca565b610c42610c7f610c7961056f565b306112f4565b61049a565b600081610c9357506000610d76565b6000610c9d610af1565b905080610cae576000915050610d76565b600080610ccd83610cc787670de0b6b3a7640000611345565b9061139e565b90506000610ce7670de0b6b3a7640000610cc78487611345565b9050610cf16106e1565b8111610d1557610d0987610d0361085d565b886110c6565b9450610d769350505050565b83811115610d2b57610d2684611405565b610d34565b610d3481611405565b610d4087610d0361085d565b9250600a610d4c6106e1565b1115610d6757610d5a611192565b610d626111c5565b610d6f565b610d6f610c52565b5090925050505b92915050565b6000610d8730610c44565b15905090565b600054610100900460ff1680610da65750610da6610d7c565b80610db4575060005460ff16155b610def5760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff16158015610e1a576000805460ff1961ff0019909116610100171660011790555b610e23866114a1565b610e2f858585856115a6565b8015610e41576000805461ff00191690555b505050505050565b600054610100900460ff1680610e625750610e62610d7c565b80610e70575060005460ff16155b610eab5760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff16158015610ed6576000805460ff1961ff0019909116610100171660011790555b610edf85611657565b610ee884611681565b610ef1836116ab565b610efa826116d5565b610f0460006105ca565b610f0e600061049a565b8015610f20576000805461ff00191690555b5050505050565b801580610fad575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610f7f57600080fd5b505afa158015610f93573d6000803e3d6000fd5b505050506040513d6020811015610fa957600080fd5b5051155b610fe85760405162461bcd60e51b81526004018080602001828103825260368152602001806124286036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261103a9084906116ff565b505050565b6104c47f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c82610c4a565b6000828211156110c0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000816110d55750600061066d565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561112457600080fd5b505afa158015611138573d6000803e3d6000fd5b505050506040513d602081101561114e57600080fd5b50519050828110156111755761116e6001600160a01b03851686836117b0565b905061066d565b6111896001600160a01b03851686856117b0565b50909392505050565b61119a611802565b60006111a4610a9c565b905080156104c4576104c46111b761059f565b6111bf61085d565b83611814565b60006111cf6106e1565b90508015611268576111f06111e261085d565b6111ea61056f565b836119d5565b60006111fa6106b6565b905060005b81811015611265576000611226611214610807565b610cc761121f610ac6565b8790611345565b905061123961123361056f565b82611abd565b6112416106e1565b935061125c61124e61085d565b61125661056f565b866119d5565b506001016111ff565b50505b6104c4610c52565b6000826001600160a01b0316633af9e669836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b50519392505050565b6000826001600160a01b03166317bfdfbc836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b1580156112c157600080fd5b60008261135457506000610d76565b8282028284828161136157fe5b041461066d5760405162461bcd60e51b815260040180806020018281038252602181526020018061238d6021913960400191505060405180910390fd5b60008082116113f4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816113fd57fe5b049392505050565b8061141661141161056f565b611b96565b10156114535760405162461bcd60e51b81526004018080602001828103825260228152602001806124066022913960400191505060405180910390fd5b61145b611c03565b806114646106e1565b10156104c45760405162461bcd60e51b815260040180806020018281038252602e8152602001806123ae602e913960400191505060405180910390fd5b600054610100900460ff16806114ba57506114ba610d7c565b806114c8575060005460ff16155b6115035760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff1615801561152e576000805460ff1961ff0019909116610100171660011790555b61153782610c44565b611588576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b6115918261103f565b801561098a576000805461ff00191690555050565b600054610100900460ff16806115bf57506115bf610d7c565b806115cd575060005460ff16155b6116085760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff16158015611633576000805460ff1961ff0019909116610100171660011790555b61163c85611d01565b61164584611d2b565b61164e83611d55565b610f0e82611d7f565b6104c47fa8500b33177885436fffd1cad82f3d2505b0c5599689e0cc7ddc3cd69e835a0a82610c4a565b6104c47f3f7ee994563fc1c4ce9783c52305490733b6dbde7985bc669d8320bf0782dda882610c4a565b6104c47f2583c2fe9a19a2c5d372d3844edcdcb06f04785322744fde694dc2cf87b0990782610c4a565b6104c47f89897de7bf54873cd4b26bf44ee19d24f2bf9ea7480517440d5f2213ec2770d882610c4a565b6000611754826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611da99092919063ffffffff16565b80519091501561103a5780806020019051602081101561177357600080fd5b505161103a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806123dc602a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261103a9084906116ff565b610c4261180d610832565b6000611dc0565b600061181e610674565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d60208110156118aa57600080fd5b505190506118b98186856110c6565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b15801561192457600080fd5b505af1158015611938573d6000803e3d6000fd5b505050506040513d602081101561194e57600080fd5b505190506001600160a01b0383166348930428611969610888565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156119c157600080fd5b505af11580156107fb573d6000803e3d6000fd5b806119df5761103a565b6119f36001600160a01b0384168383611e24565b6000826001600160a01b031663a0712d68836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b505050506040513d6020811015611a6557600080fd5b505190508015611ab7576040805162461bcd60e51b815260206004820152601860248201527710985b9ad95c929bd94e88109bdc9c9bddc819985a5b195960421b604482015290519081900360640190fd5b50505050565b670de0b6b3a7640000811015611ad25761098a565b6000826001600160a01b031663c5ebeaec836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611b1a57600080fd5b505af1158015611b2e573d6000803e3d6000fd5b505050506040513d6020811015611b4457600080fd5b50519050801561103a576040805162461bcd60e51b815260206004820152601860248201527710985b9ad95c929bd94e88109bdc9c9bddc819985a5b195960421b604482015290519081900360640190fd5b6000816001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd157600080fd5b505afa158015611be5573d6000803e3d6000fd5b505050506040513d6020811015611bfb57600080fd5b505192915050565b6000611c1061141161056f565b90506000611c1f610c6061056f565b90506000611c2e610c7961056f565b90505b8015611cec576000611c65611c44610ac6565b610cc7611c546002610cc7610ac6565b611c5f61121f610807565b90611f0f565b90506000611c738483611069565b9050611c8f611c8061056f565b611c8a8388611f69565b611f7f565b6000611c996106e1565b9050611cbd611ca661085d565b611cae61056f565b611cb88785611f69565b612052565b611cc861141161056f565b9550611cd5610c6061056f565b9450611ce2610c7961056f565b9350505050611c31565b61103a611cf761056f565b611c8a8585611f69565b6104c47fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7482610c4a565b6104c47f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81282610c4a565b6104c47f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d382610c4a565b6104c47faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c82610c4a565b6060611db88484600085612139565b949350505050565b60408051630952c56360e01b815260ff8316600482015230602482015290516001600160a01b03841691630952c56391604480830192600092919082900301818387803b158015611e1057600080fd5b505af1158015610e41573d6000803e3d6000fd5b6000611eba82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015611e8857600080fd5b505afa158015611e9c573d6000803e3d6000fd5b505050506040513d6020811015611eb257600080fd5b505190611f0f565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150611ab79085906116ff565b60008282018381101561066d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818310611f78578161066d565b5090919050565b80611f895761098a565b6000826001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611fd157600080fd5b505af1158015611fe5573d6000803e3d6000fd5b505050506040513d6020811015611ffb57600080fd5b50519050801561103a576040805162461bcd60e51b815260206004820152601c60248201527f42616e6b65724a6f653a2052656465656d20756e6465726c79696e6700000000604482015290519081900360640190fd5b8061205c5761103a565b6120706001600160a01b0384168383611e24565b6000826001600160a01b0316630e752702836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156120b857600080fd5b505af11580156120cc573d6000803e3d6000fd5b505050506040513d60208110156120e257600080fd5b505190508015611ab7576040805162461bcd60e51b815260206004820152601760248201527f42616e6b65724a6f653a205265706179206661696c6564000000000000000000604482015290519081900360640190fd5b60608247101561217a5760405162461bcd60e51b81526004018080602001828103825260268152602001806123396026913960400191505060405180910390fd5b61218385610c44565b6121d4576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106122125780518252601f1990920191602091820191016121f3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612274576040519150601f19603f3d011682016040523d82523d6000602084013e612279565b606091505b5091509150612289828286612294565b979650505050505050565b606083156122a357508161066d565b8251156122b35782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122fd5781810151838201526020016122e5565b50505050905090810190601f16801561232a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e61626c6520746f2077697468647261772074686520656e7469726520616d6f756e74556e6465726c79696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646d61726b657420636173682063616e6e6f7420636f766572206c69717569646974795361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d181228ff482deb11826d6b8d4be2a2acab2e6be91861e2cc07766a82edb76c964736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80636330533c116100d1578063919019451161008a578063b5d7a94f11610064578063b5d7a94f14610418578063c9168a591461042d578063dc2c256f14610442578063e8b5e51f1461048557610171565b806391901945146103bb578063a91ee0dc146103d0578063aa5c3ab41461040357610171565b80636330533c1461033d5780636f307dc31461035257806376cdb03b146103675780637b1039991461037c5780637bf3c4d114610391578063853828b6146103a657610171565b8063481c6a7511610123578063481c6a7514610263578063588cfb841461027857806359356c5c1461028d5780635aa6e675146102a25780635f25d3b2146102b7578063622377491461032857610171565b806313ed45ec1461017657806319776d8e146101a25780631985a89f146101c9578063228cb733146101fa57806325f2a61b1461020f5780632e1a7d4d1461023957610171565b3661017157005b600080fd5b34801561018257600080fd5b506101a06004803603602081101561019957600080fd5b503561049a565b005b3480156101ae57600080fd5b506101b76104c7565b60408051918252519081900360200190f35b3480156101d557600080fd5b506101de61056f565b604080516001600160a01b039092168252519081900360200190f35b34801561020657600080fd5b506101de61059f565b34801561021b57600080fd5b506101a06004803603602081101561023257600080fd5b50356105ca565b34801561024557600080fd5b506101b76004803603602081101561025c57600080fd5b50356105f4565b34801561026f57600080fd5b506101de610674565b34801561028457600080fd5b506101b76106b6565b34801561029957600080fd5b506101b76106e1565b3480156102ae57600080fd5b506101de6106eb565b3480156102c357600080fd5b506101a060048036036101208110156102db57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a08101359091169060c08101359060e081013590610100013561072d565b34801561033457600080fd5b506101b7610807565b34801561034957600080fd5b506101de610832565b34801561035e57600080fd5b506101de61085d565b34801561037357600080fd5b506101de610888565b34801561038857600080fd5b506101de6108b3565b34801561039d57600080fd5b506101b76108de565b3480156103b257600080fd5b506101a0610909565b3480156103c757600080fd5b506101b761098e565b3480156103dc57600080fd5b506101a0600480360360208110156103f357600080fd5b50356001600160a01b03166109b9565b34801561040f57600080fd5b506101b7610a9c565b34801561042457600080fd5b506101b7610ac6565b34801561043957600080fd5b506101b7610af1565b34801561044e57600080fd5b506101a06004803603606081101561046557600080fd5b506001600160a01b03813581169160208101359160409091013516610b0c565b34801561049157600080fd5b506101a0610bcf565b6104c47f24d7357e790aaef7672d5161e8993dbbae37ca571a36629afb4d93cdff80bf3682610c4a565b50565b6000806104d261056f565b6001600160a01b031614156104e95750600061056c565b6104f161056f565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b505190505b90565b600061059a7f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3610c4e565b905090565b600061059a7faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c610c4e565b6104c47f142313439ce87f0d58e0f7d4947bc31c1124d9fab1eec74dc028983fec37c48a82610c4a565b60006105fe610888565b6001600160a01b0316336001600160a01b031614610659576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610661610c52565b600061066d3384610c84565b9392505050565b600061067e6108b3565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b600061059a7f3f7ee994563fc1c4ce9783c52305490733b6dbde7985bc669d8320bf0782dda8610c4e565b60006104f161085d565b60006106f56108b3565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b600054610100900460ff16806107465750610746610d7c565b80610754575060005460ff16155b61078f5760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff161580156107ba576000805460ff1961ff0019909116610100171660011790555b6107c78a8a8a8a8a610d8d565b6107d385858585610e49565b6107e96001600160a01b03881689600019610f27565b80156107fb576000805461ff00191690555b50505050505050505050565b600061059a7f89897de7bf54873cd4b26bf44ee19d24f2bf9ea7480517440d5f2213ec2770d8610c4e565b600061059a7fa8500b33177885436fffd1cad82f3d2505b0c5599689e0cc7ddc3cd69e835a0a610c4e565b600061059a7f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812610c4e565b600061059a7fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74610c4e565b600061059a7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c610c4e565b600061059a7f24d7357e790aaef7672d5161e8993dbbae37ca571a36629afb4d93cdff80bf36610c4e565b610911610888565b6001600160a01b0316336001600160a01b03161461096c576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610974610c52565b600061097e610af1565b905061098a3382610c84565b5050565b600061059a7f142313439ce87f0d58e0f7d4947bc31c1124d9fab1eec74dc028983fec37c48a610c4e565b6109c16106eb565b6001600160a01b0316336001600160a01b031614610a26576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610a2f8161103f565b610a376106eb565b6001600160a01b0316336001600160a01b0316146104c4576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b600080610aa761059f565b6001600160a01b03161415610abe5750600061056c565b6104f161059f565b600061059a7f2583c2fe9a19a2c5d372d3844edcdcb06f04785322744fde694dc2cf87b09907610c4e565b600061059a610afe6108de565b610b0661098e565b90611069565b610b146106eb565b6001600160a01b0316336001600160a01b031614610b79576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610b848184846110c6565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b610bd7610888565b6001600160a01b0316336001600160a01b031614610c32576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610c3a611192565b610c426111c5565b565b3b151590565b9055565b5490565b610c6b610c66610c6061056f565b30611270565b6105ca565b610c42610c7f610c7961056f565b306112f4565b61049a565b600081610c9357506000610d76565b6000610c9d610af1565b905080610cae576000915050610d76565b600080610ccd83610cc787670de0b6b3a7640000611345565b9061139e565b90506000610ce7670de0b6b3a7640000610cc78487611345565b9050610cf16106e1565b8111610d1557610d0987610d0361085d565b886110c6565b9450610d769350505050565b83811115610d2b57610d2684611405565b610d34565b610d3481611405565b610d4087610d0361085d565b9250600a610d4c6106e1565b1115610d6757610d5a611192565b610d626111c5565b610d6f565b610d6f610c52565b5090925050505b92915050565b6000610d8730610c44565b15905090565b600054610100900460ff1680610da65750610da6610d7c565b80610db4575060005460ff16155b610def5760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff16158015610e1a576000805460ff1961ff0019909116610100171660011790555b610e23866114a1565b610e2f858585856115a6565b8015610e41576000805461ff00191690555b505050505050565b600054610100900460ff1680610e625750610e62610d7c565b80610e70575060005460ff16155b610eab5760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff16158015610ed6576000805460ff1961ff0019909116610100171660011790555b610edf85611657565b610ee884611681565b610ef1836116ab565b610efa826116d5565b610f0460006105ca565b610f0e600061049a565b8015610f20576000805461ff00191690555b5050505050565b801580610fad575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610f7f57600080fd5b505afa158015610f93573d6000803e3d6000fd5b505050506040513d6020811015610fa957600080fd5b5051155b610fe85760405162461bcd60e51b81526004018080602001828103825260368152602001806124286036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261103a9084906116ff565b505050565b6104c47f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c82610c4a565b6000828211156110c0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000816110d55750600061066d565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561112457600080fd5b505afa158015611138573d6000803e3d6000fd5b505050506040513d602081101561114e57600080fd5b50519050828110156111755761116e6001600160a01b03851686836117b0565b905061066d565b6111896001600160a01b03851686856117b0565b50909392505050565b61119a611802565b60006111a4610a9c565b905080156104c4576104c46111b761059f565b6111bf61085d565b83611814565b60006111cf6106e1565b90508015611268576111f06111e261085d565b6111ea61056f565b836119d5565b60006111fa6106b6565b905060005b81811015611265576000611226611214610807565b610cc761121f610ac6565b8790611345565b905061123961123361056f565b82611abd565b6112416106e1565b935061125c61124e61085d565b61125661056f565b866119d5565b506001016111ff565b50505b6104c4610c52565b6000826001600160a01b0316633af9e669836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b50519392505050565b6000826001600160a01b03166317bfdfbc836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b1580156112c157600080fd5b60008261135457506000610d76565b8282028284828161136157fe5b041461066d5760405162461bcd60e51b815260040180806020018281038252602181526020018061238d6021913960400191505060405180910390fd5b60008082116113f4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816113fd57fe5b049392505050565b8061141661141161056f565b611b96565b10156114535760405162461bcd60e51b81526004018080602001828103825260228152602001806124066022913960400191505060405180910390fd5b61145b611c03565b806114646106e1565b10156104c45760405162461bcd60e51b815260040180806020018281038252602e8152602001806123ae602e913960400191505060405180910390fd5b600054610100900460ff16806114ba57506114ba610d7c565b806114c8575060005460ff16155b6115035760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff1615801561152e576000805460ff1961ff0019909116610100171660011790555b61153782610c44565b611588576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b6115918261103f565b801561098a576000805461ff00191690555050565b600054610100900460ff16806115bf57506115bf610d7c565b806115cd575060005460ff16155b6116085760405162461bcd60e51b815260040180806020018281038252602e81526020018061235f602e913960400191505060405180910390fd5b600054610100900460ff16158015611633576000805460ff1961ff0019909116610100171660011790555b61163c85611d01565b61164584611d2b565b61164e83611d55565b610f0e82611d7f565b6104c47fa8500b33177885436fffd1cad82f3d2505b0c5599689e0cc7ddc3cd69e835a0a82610c4a565b6104c47f3f7ee994563fc1c4ce9783c52305490733b6dbde7985bc669d8320bf0782dda882610c4a565b6104c47f2583c2fe9a19a2c5d372d3844edcdcb06f04785322744fde694dc2cf87b0990782610c4a565b6104c47f89897de7bf54873cd4b26bf44ee19d24f2bf9ea7480517440d5f2213ec2770d882610c4a565b6000611754826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611da99092919063ffffffff16565b80519091501561103a5780806020019051602081101561177357600080fd5b505161103a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806123dc602a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261103a9084906116ff565b610c4261180d610832565b6000611dc0565b600061181e610674565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d60208110156118aa57600080fd5b505190506118b98186856110c6565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b15801561192457600080fd5b505af1158015611938573d6000803e3d6000fd5b505050506040513d602081101561194e57600080fd5b505190506001600160a01b0383166348930428611969610888565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156119c157600080fd5b505af11580156107fb573d6000803e3d6000fd5b806119df5761103a565b6119f36001600160a01b0384168383611e24565b6000826001600160a01b031663a0712d68836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b505050506040513d6020811015611a6557600080fd5b505190508015611ab7576040805162461bcd60e51b815260206004820152601860248201527710985b9ad95c929bd94e88109bdc9c9bddc819985a5b195960421b604482015290519081900360640190fd5b50505050565b670de0b6b3a7640000811015611ad25761098a565b6000826001600160a01b031663c5ebeaec836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611b1a57600080fd5b505af1158015611b2e573d6000803e3d6000fd5b505050506040513d6020811015611b4457600080fd5b50519050801561103a576040805162461bcd60e51b815260206004820152601860248201527710985b9ad95c929bd94e88109bdc9c9bddc819985a5b195960421b604482015290519081900360640190fd5b6000816001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd157600080fd5b505afa158015611be5573d6000803e3d6000fd5b505050506040513d6020811015611bfb57600080fd5b505192915050565b6000611c1061141161056f565b90506000611c1f610c6061056f565b90506000611c2e610c7961056f565b90505b8015611cec576000611c65611c44610ac6565b610cc7611c546002610cc7610ac6565b611c5f61121f610807565b90611f0f565b90506000611c738483611069565b9050611c8f611c8061056f565b611c8a8388611f69565b611f7f565b6000611c996106e1565b9050611cbd611ca661085d565b611cae61056f565b611cb88785611f69565b612052565b611cc861141161056f565b9550611cd5610c6061056f565b9450611ce2610c7961056f565b9350505050611c31565b61103a611cf761056f565b611c8a8585611f69565b6104c47fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7482610c4a565b6104c47f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81282610c4a565b6104c47f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d382610c4a565b6104c47faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c82610c4a565b6060611db88484600085612139565b949350505050565b60408051630952c56360e01b815260ff8316600482015230602482015290516001600160a01b03841691630952c56391604480830192600092919082900301818387803b158015611e1057600080fd5b505af1158015610e41573d6000803e3d6000fd5b6000611eba82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015611e8857600080fd5b505afa158015611e9c573d6000803e3d6000fd5b505050506040513d6020811015611eb257600080fd5b505190611f0f565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150611ab79085906116ff565b60008282018381101561066d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818310611f78578161066d565b5090919050565b80611f895761098a565b6000826001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611fd157600080fd5b505af1158015611fe5573d6000803e3d6000fd5b505050506040513d6020811015611ffb57600080fd5b50519050801561103a576040805162461bcd60e51b815260206004820152601c60248201527f42616e6b65724a6f653a2052656465656d20756e6465726c79696e6700000000604482015290519081900360640190fd5b8061205c5761103a565b6120706001600160a01b0384168383611e24565b6000826001600160a01b0316630e752702836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156120b857600080fd5b505af11580156120cc573d6000803e3d6000fd5b505050506040513d60208110156120e257600080fd5b505190508015611ab7576040805162461bcd60e51b815260206004820152601760248201527f42616e6b65724a6f653a205265706179206661696c6564000000000000000000604482015290519081900360640190fd5b60608247101561217a5760405162461bcd60e51b81526004018080602001828103825260268152602001806123396026913960400191505060405180910390fd5b61218385610c44565b6121d4576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106122125780518252601f1990920191602091820191016121f3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612274576040519150601f19603f3d011682016040523d82523d6000602084013e612279565b606091505b5091509150612289828286612294565b979650505050505050565b606083156122a357508161066d565b8251156122b35782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122fd5781810151838201526020016122e5565b50505050905090810190601f16801561232a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e61626c6520746f2077697468647261772074686520656e7469726520616d6f756e74556e6465726c79696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646d61726b657420636173682063616e6e6f7420636f766572206c69717569646974795361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d181228ff482deb11826d6b8d4be2a2acab2e6be91861e2cc07766a82edb76c964736f6c63430007060033",
  "devdoc": {
    "details": "https://docs.traderjoexyz.com/",
    "kind": "dev",
    "methods": {
      "derivativeBalance()": {
        "details": "Balance of derivative tokens received from Strategy, if applicable",
        "returns": {
          "_0": "The balance of derivative tokens"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "initializeBankerJoeFoldingStrategy(address,address,address,address,address,address,uint256,uint256,uint256)": {
        "details": "The function should be called at time of deployment",
        "params": {
          "bank_": "the bank associated with the strategy",
          "derivative_": "the JToken address received from BankerJoe",
          "joetroller_": "the BankerJoe rewards contract",
          "registry_": "the registry contract",
          "reward_": "the address of the reward token JOE",
          "underlying_": "the underlying token that is deposited"
        }
      },
      "investedBalance()": {
        "details": "Get the exchange rate (which is scaled up by 1e18) and multiply by amount of JTokens",
        "returns": {
          "_0": "The amount of underlying the strategy has invested"
        }
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "rewardBalance()": {
        "details": "Balance of reward tokens awaiting liquidation, if applicable"
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "sweep(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens to sweep",
          "recipient": "The address to send the sweeped tokens to",
          "token": "The address of the token to sweep"
        }
      },
      "underlyingBalance()": {
        "details": "Balance of underlying awaiting Strategy investment"
      }
    },
    "title": "Oh! Finance Banker Joe Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bank()": {
        "notice": "The Bank that the Strategy is associated with"
      },
      "constructor": {
        "notice": "Initialize the BankerJoe Strategy Logic"
      },
      "derivative()": {
        "notice": "The derivative token received from AaveV2 (aToken)"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "initializeBankerJoeFoldingStrategy(address,address,address,address,address,address,uint256,uint256,uint256)": {
        "notice": "Initializes the BankerJoe Folding Strategy Proxy"
      },
      "investedBalance()": {
        "notice": "Get the balance of underlying invested by the Strategy"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "reward()": {
        "notice": "The reward token received from AaveV2 (stkAave)"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "sweep(address,uint256,address)": {
        "notice": "Governance function to sweep any stuck / airdrop tokens to a given recipient"
      },
      "underlying()": {
        "notice": "The underlying token the Strategy invests in AaveV2"
      }
    },
    "notice": "Standard, unleveraged strategy. Invest underlying tokens into derivative JTokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3184,
        "contract": "contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategy.sol:OhAvalancheBankerJoeFoldingStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3187,
        "contract": "contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategy.sol:OhAvalancheBankerJoeFoldingStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}