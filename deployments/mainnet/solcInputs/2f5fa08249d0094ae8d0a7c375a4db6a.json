{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IWAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IWAVAX {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "contracts/strategies/benqi/OhAvalancheBenqiHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IWAVAX} from \"../../interfaces/IWAVAX.sol\"; \r\nimport {IQiToken} from \"./interfaces/IQiToken.sol\";\r\nimport {IBenqiComptroller} from \"./interfaces/IBenqiComptroller.sol\";\r\n\r\n\r\n/// @title Oh! Finance Benqi Helper\r\n/// @notice Helper functions to interact with the Benqi Protocol\r\n/// @dev https://compound.finance\r\nabstract contract OhAvalancheBenqiHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Get the exchange rate of QiTokens => underlying\r\n    /// @dev https://compound.finance/docs/ctokens#exchange-rate\r\n    /// @param qiToken The qiToken address rate to get\r\n    /// @return The exchange rate scaled by 1e18\r\n    function getExchangeRate(address qiToken) internal view returns (uint256) {\r\n        return IQiToken(qiToken).exchangeRateStored();\r\n    }\r\n\r\n    /// @notice Enter the market (approve), required before calling borrow\r\n    /// @param comptroller The Benqi Comptroller (rewards contract)\r\n    /// @param qiToken The qiToken market to enter\r\n    function enter(address comptroller, address qiToken) internal {\r\n        address[] memory qiTokens = new address[](1);\r\n        qiTokens[0] = qiToken;\r\n        IBenqiComptroller(comptroller).enterMarkets(qiTokens);\r\n    }\r\n\r\n    /// @notice Mint qiTokens by providing/lending underlying as collateral\r\n    /// @param underlying The underlying to lend to Compound\r\n    /// @param qiToken The Compound qiToken\r\n    /// @param amount The amount of underlying to lend\r\n    function mint(\r\n        address underlying,\r\n        address qiToken,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n        \r\n        IERC20(underlying).safeIncreaseAllowance(qiToken, amount);\r\n        uint256 result = IQiToken(qiToken).mint(amount);\r\n        require(result == 0, \"Benqi: Borrow failed\");\r\n    }\r\n\r\n    /// @notice Borrow underlying tokens from a given qiToken against collateral\r\n    /// @param qiToken The qiToken corresponding the underlying we want to borrow\r\n    /// @param amount The amount of underlying to borrow\r\n    function borrow(address qiToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = IQiToken(qiToken).borrow(amount);\r\n        require(result == 0, \"Benqi: Borrow failed\");\r\n    }\r\n\r\n    /// @notice Repay loan with a given amount of underlying\r\n    /// @param underlying The underlying to repay\r\n    /// @param qiToken The qiToken for the underlying\r\n    /// @param amount The amount of underlying to repay\r\n    function repay(\r\n        address underlying,\r\n        address qiToken,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20(underlying).safeIncreaseAllowance(qiToken, amount);\r\n        uint256 result = IQiToken(qiToken).repayBorrow(amount);\r\n        require(result == 0, \"Benqi: Repay failed\");\r\n    }\r\n\r\n    /// @notice Redeem qiTokens for underlying\r\n    /// @param qiToken The qiToken to redeem\r\n    /// @param amount The amount of qiTokens to redeem\r\n    function redeem(address qiToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = IQiToken(qiToken).redeem(amount);\r\n        require(result == 0, \"Benqi: Redeem qiToken\");\r\n    }\r\n\r\n    /// @notice Redeem qiTokens for underlying\r\n    /// @param qiToken The qiToken to redeem\r\n    /// @param amount The amount of underlying tokens to receive\r\n    function redeemUnderlying(address qiToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = IQiToken(qiToken).redeemUnderlying(amount);\r\n        require(result == 0, \"Benqi: Redeem underlying\");\r\n    }\r\n\r\n    /// @notice Claim QI rewards from Comptroller for this address\r\n    /// @param comptroller The Benqi Comptroller, Reward Contract\r\n    /// @param rewardType Reward type: 0 = QI, 1 = AVAX\r\n    function claim(address comptroller, uint rewardType) internal {\r\n        IBenqiComptroller(comptroller).claimReward(uint8(rewardType), address(this));\r\n    }\r\n\r\n    /// @notice Wrap AVAX to WAVAX\r\n    /// @param wavax Address of WAVAX\r\n    /// @param amount Amount of AVAX to wrap\r\n    function wrap(address wavax, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n        IWAVAX(wavax).deposit{value: amount}();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/strategies/benqi/interfaces/IQiToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IQiToken {\r\n    function underlying() external;\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/benqi/interfaces/IBenqiComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IBenqiComptroller {\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address qiTokenModify,\r\n        uint256 redeemTokens,\r\n        uint256 borrowAmount\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function claimReward(uint8 rewardType, address holder) external;\r\n\r\n    // function claimReward(uint8 rewardType, address holder, address[] memory qiTokens) external;\r\n\r\n    function enterMarkets(address[] calldata qiTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address qiToken) external returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/benqi/OhAvalancheBenqiStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IStrategy} from \"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\";\r\nimport {OhAvalancheBenqiHelper} from \"./OhAvalancheBenqiHelper.sol\";\r\nimport {OhAvalancheBenqiStrategyStorage} from \"./OhAvalancheBenqiStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Benqi Strategy\r\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative cTokens\r\n/// @dev https://compound.finance/docs/ctokens\r\ncontract OhAvalancheBenqiStrategy is IStrategy, OhAvalancheBenqiHelper, OhStrategy, OhAvalancheBenqiStrategyStorage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Initialize the Benqi Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initializes the Benqi Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the qiToken address received from Benqi\r\n    /// @param reward_ the address of the reward token QI\r\n    /// @param secondaryReward_ the address of the reward token WAVAX\r\n    /// @param comptroller_ the Benqi rewards contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeBenqiStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address secondaryReward_,\r\n        address comptroller_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeBenqiStorage(secondaryReward_, comptroller_);\r\n\r\n        IERC20(derivative_).safeApprove(underlying_, type(uint256).max);\r\n    }\r\n\r\n    /// @notice Get the balance of underlying invested by the Strategy\r\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of qiTokens\r\n    /// @return The amount of underlying the strategy has invested\r\n    function investedBalance() public view override returns (uint256) {\r\n        uint256 exchangeRate = getExchangeRate(derivative());\r\n        return exchangeRate.mul(derivativeBalance()).div(1e18);\r\n    }\r\n\r\n    // Get the balance of extra rewards received by the Strategy\r\n    function secondaryRewardBalance() public view returns (uint256) {\r\n        address secondaryReward = secondaryReward();\r\n        if (secondaryReward == address(0)) {\r\n            return 0;\r\n        }\r\n    \r\n        return IERC20(secondaryReward).balanceOf(address(this));\r\n    }\r\n\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    function _compound() internal {\r\n        _claimAll();\r\n\r\n        uint256 amount = rewardBalance();\r\n        if (amount > 0) {\r\n            liquidate(reward(), underlying(), amount);\r\n        }\r\n\r\n        uint256 secondaryAmount = secondaryRewardBalance();\r\n        if (secondaryAmount > 0) {\r\n            liquidate(secondaryReward(), underlying(), secondaryAmount);\r\n        }\r\n    }\r\n\r\n    function _claimAll() internal {\r\n        // Claim QI\r\n        claim(comptroller(), 0);\r\n\r\n        // Claim and wrap AVAX\r\n        claim(comptroller(), 1);\r\n        wrap(secondaryReward(), address(this).balance);\r\n    }\r\n\r\n    // deposit underlying tokens into Benqi, minting qiTokens\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            mint(underlying(), derivative(), amount);\r\n        }\r\n    }\r\n\r\n    // withdraw all underlying by redeem all qiTokens\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    // withdraw an amount of underlying tokens\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol after redeeming them from Benqi\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 invested = investedBalance();\r\n        if (invested == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate amount to redeem by supply ownership\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\r\n\r\n        // safely redeem from Benqi\r\n        if (redeemAmount > invested) {\r\n            redeemUnderlying(derivative(), invested);\r\n        } else {\r\n            redeemUnderlying(derivative(), redeemAmount);\r\n        }\r\n\r\n        // withdraw to bank\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IStrategyBase} from \"./IStrategyBase.sol\";\r\n\r\ninterface IStrategy is IStrategyBase {\r\n    function investedBalance() external view returns (uint256);\r\n\r\n    function invest() external;\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAll() external;\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\nlibrary TransferHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // safely transfer tokens without underflowing\r\n    function safeTokenTransfer(\r\n        address recipient,\r\n        address token,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance < amount) {\r\n            IERC20(token).safeTransfer(recipient, balance);\r\n            return balance;\r\n        } else {\r\n            IERC20(token).safeTransfer(recipient, amount);\r\n            return amount;\r\n        }\r\n    }\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IBank} from \"../interfaces/bank/IBank.sol\";\r\nimport {IStrategyBase} from \"../interfaces/strategies/IStrategyBase.sol\";\r\nimport {ILiquidator} from \"../interfaces/ILiquidator.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {TransferHelper} from \"../libraries/TransferHelper.sol\";\r\nimport {OhSubscriberUpgradeable} from \"../registry/OhSubscriberUpgradeable.sol\";\r\nimport {OhStrategyStorage} from \"./OhStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Strategy\r\n/// @notice Base Upgradeable Strategy Contract to build strategies on\r\ncontract OhStrategy is OhSubscriberUpgradeable, OhStrategyStorage, IStrategyBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Liquidate(address indexed router, address indexed token, uint256 amount);\r\n    event Sweep(address indexed token, uint256 amount, address recipient);\r\n\r\n    /// @notice Only the Bank can execute these functions\r\n    modifier onlyBank() {\r\n        require(msg.sender == bank(), \"Strategy: Only Bank\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize the base Strategy\r\n    /// @param registry_ Address of the Registry\r\n    /// @param bank_ Address of Bank\r\n    /// @param underlying_ Underying token that is deposited\r\n    /// @param derivative_ Derivative token received from protocol, or address(0)\r\n    /// @param reward_ Reward token received from protocol, or address(0)\r\n    function initializeStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_\r\n    ) internal initializer {\r\n        initializeSubscriber(registry_);\r\n        initializeStorage(bank_, underlying_, derivative_, reward_);\r\n    }\r\n\r\n    /// @dev Balance of underlying awaiting Strategy investment\r\n    function underlyingBalance() public view override returns (uint256) {\r\n        return IERC20(underlying()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Balance of derivative tokens received from Strategy, if applicable\r\n    /// @return The balance of derivative tokens\r\n    function derivativeBalance() public view override returns (uint256) {\r\n        if (derivative() == address(0)) {\r\n            return 0;\r\n        }\r\n        return IERC20(derivative()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Balance of reward tokens awaiting liquidation, if applicable\r\n    function rewardBalance() public view override returns (uint256) {\r\n        if (reward() == address(0)) {\r\n            return 0;\r\n        }\r\n        return IERC20(reward()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Governance function to sweep any stuck / airdrop tokens to a given recipient\r\n    /// @param token The address of the token to sweep\r\n    /// @param amount The amount of tokens to sweep\r\n    /// @param recipient The address to send the sweeped tokens to\r\n    function sweep(\r\n        address token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external onlyGovernance {\r\n        // require(!_protected[token], \"Strategy: Cannot sweep\");\r\n        TransferHelper.safeTokenTransfer(recipient, token, amount);\r\n        emit Sweep(token, amount, recipient);\r\n    }\r\n\r\n    /// @dev Liquidation function to swap rewards for underlying\r\n    function liquidate(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        // if (amount > minimumSell())\r\n\r\n        // find the liquidator to use\r\n        address manager = manager();\r\n        address liquidator = IManager(manager).liquidators(from, to);\r\n\r\n        // increase allowance and liquidate to the manager\r\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\r\n        uint256 received = ILiquidator(liquidator).liquidate(manager, from, to, amount, 1);\r\n\r\n        // notify revenue and transfer proceeds back to strategy\r\n        IManager(manager).accrueRevenue(bank(), to, received);\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/benqi/OhAvalancheBenqiStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {OhUpgradeable} from \"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\";\r\nimport {IAvalancheBenqiStrategyStorage} from \"../../interfaces/strategies/benqi/IAvalancheBenqiStrategyStorage.sol\";\r\n\r\ncontract OhAvalancheBenqiStrategyStorage is Initializable, OhUpgradeable, IAvalancheBenqiStrategyStorage {\r\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0x16bda68537f666a68a423fc52f9a686ea81b226a5c034d2dfb63b5b749ceb83c;\r\n    bytes32 internal constant _COMPTROLLER_SLOT = 0x2ef367ab1438cccede22571406f238368481af421cdc06cfd765d150e76c9965;\r\n\r\n    constructor() {\r\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.benqiStrategy.secondaryReward\")) - 1));\r\n        assert(_COMPTROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.benqiStrategy.comptroller\")) - 1));\r\n    }\r\n\r\n    function initializeBenqiStorage(address secondaryReward_, address comptroller_) internal initializer {\r\n        _setSecondaryReward(secondaryReward_);\r\n        _setComptroller(comptroller_);\r\n    }\r\n\r\n    function secondaryReward() public view override returns (address) {\r\n        return getAddress(_SECONDARY_REWARD_SLOT);\r\n    }\r\n\r\n    function _setSecondaryReward(address secondaryReward_) internal {\r\n        setAddress(_SECONDARY_REWARD_SLOT, secondaryReward_);\r\n    }\r\n\r\n    function comptroller() public view override returns (address) {\r\n        return getAddress(_COMPTROLLER_SLOT);\r\n    }\r\n\r\n    function _setComptroller(address comptroller_) internal {\r\n        setAddress(_COMPTROLLER_SLOT, comptroller_);\r\n    }\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IStrategyStorage} from \"./IStrategyStorage.sol\";\r\n\r\ninterface IStrategyBase is IStrategyStorage {\r\n    function underlyingBalance() external view returns (uint256);\r\n\r\n    function derivativeBalance() external view returns (uint256);\r\n\r\n    function rewardBalance() external view returns (uint256);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IStrategyStorage {\r\n    function bank() external view returns (address);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function derivative() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    // function investedBalance() external view returns (uint256);\r\n\r\n    // function invest() external;\r\n\r\n    // function withdraw(uint256 amount) external returns (uint256);\r\n\r\n    // function withdrawAll() external;\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/bank/IBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IBankStorage} from \"./IBankStorage.sol\";\r\n\r\ninterface IBank is IBankStorage {\r\n    function strategies(uint256 i) external view returns (address);\r\n\r\n    function totalStrategies() external view returns (uint256);\r\n\r\n    function underlyingBalance() external view returns (uint256);\r\n\r\n    function strategyBalance(uint256 i) external view returns (uint256);\r\n\r\n    function investedBalance() external view returns (uint256);\r\n\r\n    function virtualBalance() external view returns (uint256);\r\n\r\n    function virtualPrice() external view returns (uint256);\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function invest(address strategy, uint256 amount) external;\r\n\r\n    function investAll(address strategy) external;\r\n\r\n    function exit(address strategy, uint256 amount) external;\r\n\r\n    function exitAll(address strategy) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function depositFor(uint256 amount, address recipient) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/ILiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ILiquidator {\r\n    function liquidate(\r\n        address recipient,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minOut\r\n    ) external returns (uint256);\r\n\r\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\r\n\r\n    function sushiswapRouter() external view returns (address);\r\n\r\n    function uniswapRouter() external view returns (address);\r\n\r\n    function weth() external view returns (address);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/IManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IManager {\r\n    function token() external view returns (address);\r\n\r\n    function buybackFee() external view returns (uint256);\r\n\r\n    function managementFee() external view returns (uint256);\r\n\r\n    function liquidators(address from, address to) external view returns (address);\r\n\r\n    function whitelisted(address _contract) external view returns (bool);\r\n\r\n    function banks(uint256 i) external view returns (address);\r\n\r\n    function totalBanks() external view returns (uint256);\r\n\r\n    function strategies(address bank, uint256 i) external view returns (address);\r\n\r\n    function totalStrategies(address bank) external view returns (uint256);\r\n\r\n    function withdrawIndex(address bank) external view returns (uint256);\r\n\r\n    function setWithdrawIndex(uint256 i) external;\r\n\r\n    function rebalance(address bank) external;\r\n\r\n    function finance(address bank) external;\r\n\r\n    function financeAll(address bank) external;\r\n\r\n    function buyback(address from) external;\r\n\r\n    function accrueRevenue(\r\n        address bank,\r\n        address underlying,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function exitAll(address bank) external;\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/registry/OhSubscriberUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {ISubscriber} from \"../interfaces/ISubscriber.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\nimport {OhUpgradeable} from \"../proxy/OhUpgradeable.sol\";\r\n\r\n/// @title Oh! Finance Subscriber Upgradeable\r\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\r\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\r\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\r\n\r\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\r\n    modifier onlyAuthorized {\r\n        require(msg.sender == governance() || msg.sender == manager(), \"Subscriber: Only Authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Only allow the governance address to execute a function\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance(), \"Subscriber: Only Governance\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Verify the registry storage slot is correct\r\n    constructor() {\r\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\"eip1967.subscriber.registry\")) - 1));\r\n    }\r\n\r\n    /// @notice Initialize the Subscriber\r\n    /// @param registry_ The Registry contract address\r\n    /// @dev Always call this method in the initializer function for any derived classes\r\n    function initializeSubscriber(address registry_) internal initializer {\r\n        require(Address.isContract(registry_), \"Subscriber: Invalid Registry\");\r\n        _setRegistry(registry_);\r\n    }\r\n\r\n    /// @notice Set the Registry for the contract. Only callable by Governance.\r\n    /// @param registry_ The new registry\r\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\r\n    /// @dev Ideally should not be used\r\n    function setRegistry(address registry_) external onlyGovernance {\r\n        _setRegistry(registry_);\r\n        require(msg.sender == governance(), \"Subscriber: Bad Governance\");\r\n    }\r\n\r\n    /// @notice Get the Governance address\r\n    /// @return The current Governance address\r\n    function governance() public view override returns (address) {\r\n        return IRegistry(registry()).governance();\r\n    }\r\n\r\n    /// @notice Get the Manager address\r\n    /// @return The current Manager address\r\n    function manager() public view override returns (address) {\r\n        return IRegistry(registry()).manager();\r\n    }\r\n\r\n    /// @notice Get the Registry address\r\n    /// @return The current Registry address\r\n    function registry() public view override returns (address) {\r\n        return getAddress(_REGISTRY_SLOT);\r\n    }\r\n\r\n    function _setRegistry(address registry_) private {\r\n        setAddress(_REGISTRY_SLOT, registry_);\r\n    }\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/OhStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IStrategyStorage} from \"../interfaces/strategies/IStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"../proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhStrategyStorage is Initializable, OhUpgradeable, IStrategyStorage {\r\n    bytes32 internal constant _BANK_SLOT = 0xd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74;\r\n    bytes32 internal constant _UNDERLYING_SLOT = 0x0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812;\r\n    bytes32 internal constant _DERIVATIVE_SLOT = 0x4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3;\r\n    bytes32 internal constant _REWARD_SLOT = 0xaeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c;\r\n\r\n    constructor() {\r\n        assert(_BANK_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.bank\")) - 1));\r\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.underlying\")) - 1));\r\n        assert(_DERIVATIVE_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.derivative\")) - 1));\r\n        assert(_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.reward\")) - 1));\r\n    }\r\n\r\n    function initializeStorage(\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_\r\n    ) internal initializer {\r\n        _setBank(bank_);\r\n        _setUnderlying(underlying_);\r\n        _setDerivative(derivative_);\r\n        _setReward(reward_);\r\n    }\r\n\r\n    /// @notice The Bank that the Strategy is associated with\r\n    function bank() public view override returns (address) {\r\n        return getAddress(_BANK_SLOT);\r\n    }\r\n\r\n    /// @notice The underlying token the Strategy invests in AaveV2\r\n    function underlying() public view override returns (address) {\r\n        return getAddress(_UNDERLYING_SLOT);\r\n    }\r\n\r\n    /// @notice The derivative token received from AaveV2 (aToken)\r\n    function derivative() public view override returns (address) {\r\n        return getAddress(_DERIVATIVE_SLOT);\r\n    }\r\n\r\n    /// @notice The reward token received from AaveV2 (stkAave)\r\n    function reward() public view override returns (address) {\r\n        return getAddress(_REWARD_SLOT);\r\n    }\r\n\r\n    function _setBank(address _address) internal {\r\n        setAddress(_BANK_SLOT, _address);\r\n    }\r\n\r\n    function _setUnderlying(address _address) internal {\r\n        setAddress(_UNDERLYING_SLOT, _address);\r\n    }\r\n\r\n    function _setDerivative(address _address) internal {\r\n        setAddress(_DERIVATIVE_SLOT, _address);\r\n    }\r\n\r\n    function _setReward(address _address) internal {\r\n        setAddress(_REWARD_SLOT, _address);\r\n    }\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/bank/IBankStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IBankStorage {\r\n    function paused() external view returns (bool);\r\n\r\n    function underlying() external view returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/ISubscriber.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISubscriber {\r\n    function registry() external view returns (address);\r\n\r\n    function governance() external view returns (address);\r\n\r\n    function manager() external view returns (address);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IRegistry {\r\n    function governance() external view returns (address);\r\n\r\n    function manager() external view returns (address);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n/// @title Oh! Finance Base Upgradeable\r\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\r\nabstract contract OhUpgradeable {\r\n    function getAddress(bytes32 slot) internal view returns (address _address) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            _address := sload(slot)\r\n        }\r\n    }\r\n\r\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\r\n        uint256 bool_;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            bool_ := sload(slot)\r\n        }\r\n        _bool = bool_ == 1;\r\n    }\r\n\r\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            _bytes32 := sload(slot)\r\n        }\r\n    }\r\n\r\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            _uint := sload(slot)\r\n        }\r\n    }\r\n\r\n    function setAddress(bytes32 slot, address _address) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _address)\r\n        }\r\n    }\r\n\r\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _bytes32)\r\n        }\r\n    }\r\n\r\n    /// @dev Set a boolean storage variable in a given slot\r\n    /// @dev Convert to a uint to take up an entire contract storage slot\r\n    function setBoolean(bytes32 slot, bool _bool) internal {\r\n        uint256 bool_ = _bool ? 1 : 0;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, bool_)\r\n        }\r\n    }\r\n\r\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _uint)\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/strategies/benqi/IAvalancheBenqiStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAvalancheBenqiStrategyStorage {\r\n    function secondaryReward() external view returns (address);\r\n    \r\n    function comptroller() external view returns (address);\r\n}\r\n"
    },
    "contracts/strategies/curve/OhCurveAPoolStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {ICurveAPoolStrategyStorage} from \"../../interfaces/strategies/curve/ICurveAPoolStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhCurveAPoolStrategyStorage is Initializable, OhUpgradeable, ICurveAPoolStrategyStorage {\r\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0x5998c690f9a1844257ca5c21cb39f78d4bbd2eae05acb65890e299ab4a7bfa4f;\r\n    bytes32 internal constant _POOL_SLOT = 0x330f10e3036378592f49e68634d0df63784e4e3fc8e020d4b867b13c5238eba4;\r\n    bytes32 internal constant _GAUGE_SLOT = 0x42abdd437833f719b2143194014e248a0b88732beec95d86e79864eea92009b2;\r\n    bytes32 internal constant _INDEX_SLOT = 0xb6b51a75a44d9b0046bc08b5d45e10870e79dec03d49ff1beeb7491b35bfe32f;\r\n\r\n    constructor() {\r\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.curveAPoolStrategy.secondaryReward\")) - 1));\r\n        assert(_POOL_SLOT == bytes32(uint256(keccak256(\"eip1967.curveAPoolStrategy.pool\")) - 1));\r\n        assert(_GAUGE_SLOT == bytes32(uint256(keccak256(\"eip1967.curveAPoolStrategy.gauge\")) - 1));\r\n        assert(_INDEX_SLOT == bytes32(uint256(keccak256(\"eip1967.curveAPoolStrategy.index\")) - 1));\r\n    }\r\n\r\n    function initializeCurveAPoolStorage(\r\n        address secondaryReward_,\r\n        address pool_,\r\n        address gauge_,\r\n        uint256 index_\r\n    ) internal initializer {\r\n        _setSecondaryReward(secondaryReward_);\r\n        _setPool(pool_);\r\n        _setGauge(gauge_);\r\n        _setIndex(index_);\r\n    }\r\n\r\n    function secondaryReward() public view override returns (address) {\r\n        return getAddress(_SECONDARY_REWARD_SLOT);\r\n    }\r\n\r\n    function pool() public view override returns (address) {\r\n        return getAddress(_POOL_SLOT);\r\n    }\r\n\r\n    function gauge() public view override returns (address) {\r\n        return getAddress(_GAUGE_SLOT);\r\n    }\r\n\r\n    function index() public view override returns (uint256) {\r\n        return getUInt256(_INDEX_SLOT);\r\n    }\r\n\r\n    function _setSecondaryReward(address secondaryReward_) internal {\r\n        setAddress(_SECONDARY_REWARD_SLOT, secondaryReward_);\r\n    }\r\n\r\n    function _setPool(address pool_) internal {\r\n        setAddress(_POOL_SLOT, pool_);\r\n    }\r\n\r\n    function _setGauge(address gauge_) internal {\r\n        setAddress(_GAUGE_SLOT, gauge_);\r\n    }\r\n\r\n    function _setIndex(uint256 index_) internal {\r\n        setUInt256(_INDEX_SLOT, index_);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/curve/ICurveAPoolStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ICurveAPoolStrategyStorage {\r\n    function secondaryReward() external view returns (address);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function gauge() external view returns (address);\r\n\r\n    function index() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/OhAvalancheBankerJoeStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IAvalancheBankerJoeStrategyStorage} from \"../../interfaces/strategies/bankerjoe/IAvalancheBankerJoeStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhAvalancheBankerJoeStrategyStorage is Initializable, OhUpgradeable, IAvalancheBankerJoeStrategyStorage {\r\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0x9328b783ed097ac65723d6f32bd712be86a3fdbb5720b8abe2a1828d2c4a447c;\r\n    bytes32 internal constant _JOETROLLER_SLOT = 0x2161428b88882bba124b5a2dd4fd1884a906465a4c6e30d8494cf23a5c502d7e;\r\n\r\n    constructor() {\r\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.bankerjoeStrategy.secondaryReward\")) - 1));\r\n        assert(_JOETROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.bankerjoeStrategy.joetroller\")) - 1));\r\n    }\r\n\r\n    function initializeBankerJoeStorage(address secondaryReward_, address joetroller_) internal initializer {\r\n        _setSecondaryReward(secondaryReward_);\r\n        _setJoetroller(joetroller_);\r\n    }\r\n\r\n    function secondaryReward() public view override returns (address) {\r\n        return getAddress(_SECONDARY_REWARD_SLOT);\r\n    }\r\n\r\n    function _setSecondaryReward(address secondaryReward_) internal {\r\n        setAddress(_SECONDARY_REWARD_SLOT, secondaryReward_);\r\n    }\r\n\r\n    function joetroller() public view override returns (address) {\r\n        return getAddress(_JOETROLLER_SLOT);\r\n    }\r\n\r\n    function _setJoetroller(address joetroller_) internal {\r\n        setAddress(_JOETROLLER_SLOT, joetroller_);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/bankerjoe/IAvalancheBankerJoeStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAvalancheBankerJoeStrategyStorage {\r\n    function secondaryReward() external view returns (address);\r\n\r\n    function joetroller() external view returns (address);\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/OhAvalancheBankerJoeStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IStrategy} from \"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\";\r\nimport {OhAvalancheBankerJoeHelper} from \"./OhAvalancheBankerJoeHelper.sol\";\r\nimport {OhAvalancheBankerJoeStrategyStorage} from \"./OhAvalancheBankerJoeStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Banker Joe Strategy\r\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative JTokens\r\n/// @dev https://docs.traderjoexyz.com/\r\ncontract OhAvalancheBankerJoeStrategy is IStrategy, OhAvalancheBankerJoeHelper, OhStrategy, OhAvalancheBankerJoeStrategyStorage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Initialize the BankerJoe Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initializes the BankerJoe Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the JToken address received from BankerJoe\r\n    /// @param reward_ the address of the reward token JOE\r\n    /// @param secondaryReward_ the address of the reward token WAVAX\r\n    /// @param joetroller_ the BankerJoe rewards contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeBankerJoeStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address secondaryReward_,\r\n        address joetroller_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeBankerJoeStorage(secondaryReward_, joetroller_);\r\n\r\n        IERC20(derivative_).safeApprove(underlying_, type(uint256).max);\r\n    }\r\n\r\n    /// @notice Get the balance of underlying invested by the Strategy\r\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of JTokens\r\n    /// @return The amount of underlying the strategy has invested\r\n    function investedBalance() public view override returns (uint256) {\r\n        uint256 exchangeRate = getExchangeRate(derivative());\r\n        return exchangeRate.mul(derivativeBalance()).div(1e18);\r\n    }\r\n\r\n    // Get the balance of extra rewards received by the Strategy\r\n    function secondaryRewardBalance() public view returns (uint256) {\r\n        address secondaryReward = secondaryReward();\r\n        if (secondaryReward == address(0)) {\r\n            return 0;\r\n        }\r\n    \r\n        return IERC20(secondaryReward).balanceOf(address(this));\r\n    }\r\n\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    function _compound() internal {\r\n        _claimAll();\r\n\r\n        uint256 amount = rewardBalance();\r\n        if (amount > 0) {\r\n            liquidate(reward(), underlying(), amount);\r\n        }\r\n\r\n        \r\n        uint256 secondaryAmount = secondaryRewardBalance();\r\n        if (secondaryAmount > 0) {\r\n            liquidate(secondaryReward(), underlying(), secondaryAmount);\r\n        }\r\n    }\r\n\r\n    function _claimAll() internal {\r\n        // Claim JOE\r\n        claim(joetroller(), 0);\r\n        \r\n        // Claim and wrap AVAX\r\n        claim(joetroller(), 1);\r\n        wrap(secondaryReward(), address(this).balance);\r\n    }\r\n\r\n    // deposit underlying tokens into BankerJoe, minting JTokens\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            mint(underlying(), derivative(), amount);\r\n        }\r\n    }\r\n\r\n    // withdraw all underlying by redeem all JTokens\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    // withdraw an amount of underlying tokens\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol after redeeming them from trader joe\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 invested = investedBalance();\r\n        if (invested == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // claim rewards before withdrawal to avoid forfeiting\r\n        _claimAll();\r\n\r\n        // calculate amount to redeem by supply ownership\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\r\n\r\n        // safely redeem from BankerJoe\r\n        if (redeemAmount > invested) {\r\n            redeemUnderlying(derivative(), invested);\r\n        } else {\r\n            redeemUnderlying(derivative(), redeemAmount);\r\n        }\r\n\r\n        // withdraw to bank\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/OhAvalancheBankerJoeHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IWAVAX} from \"../../interfaces/IWAVAX.sol\";\r\nimport {IJToken} from \"./interfaces/IJToken.sol\";\r\nimport {IJoetroller} from \"./interfaces/IJoetroller.sol\";\r\nimport {IJAvax} from \"./interfaces/IJAvax.sol\";\r\n\r\n/// @title Oh! Finance BankerJoe Helper\r\n/// @notice Helper functions to interact with the BankerJoe Protocol\r\n/// @dev https://docs.traderjoexyz.com/\r\nabstract contract OhAvalancheBankerJoeHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Get the exchange rate of jTokens => underlying\r\n    /// @dev https://compound.finance/docs/ctokens#exchange-rate No equivalent in Trader Joe docs\r\n    /// @param jToken The jToken address rate to get\r\n    /// @return The exchange rate scaled by 1e18\r\n    function getExchangeRate(address jToken) internal view returns (uint256) {\r\n        return IJToken(jToken).exchangeRateStored();\r\n    }\r\n\r\n    /// @notice Enter the market (approve), required before calling borrow\r\n    /// @param joetroller The BankerJoe Joetroller (rewards contract)\r\n    /// @param jToken The jToken market to enter\r\n    function enter(address joetroller, address jToken) internal {\r\n        address[] memory jTokens = new address[](1);\r\n        jTokens[0] = jToken;\r\n        IJoetroller(joetroller).enterMarkets(jTokens);\r\n    }\r\n\r\n    /// @notice Mint jTokens by providing/lending underlying as collateral\r\n    /// @param underlying The underlying to lend to BankerJoe\r\n    /// @param jToken The BankerJoe jToken\r\n    /// @param amount The amount of underlying to lend\r\n    function mint(\r\n        address underlying,\r\n        address jToken,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20(underlying).safeIncreaseAllowance(jToken, amount);\r\n        uint256 result = IJToken(jToken).mint(amount);\r\n        require(result == 0, \"BankerJoe: Borrow failed\");\r\n    }\r\n\r\n    /// @notice Borrow underlying tokens from a given jToken against collateral\r\n    /// @param jToken The jToken corresponding the underlying we want to borrow\r\n    /// @param amount The amount of underlying to borrow\r\n    function borrow(address jToken, uint256 amount) internal {\r\n        if (amount < 1e18) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = IJToken(jToken).borrow(amount);\r\n        require(result == 0, \"BankerJoe: Borrow failed\");\r\n    }\r\n\r\n    /// @notice Repay loan with a given amount of underlying\r\n    /// @param underlying The underlying to repay\r\n    /// @param jToken The jToken for the underlying\r\n    /// @param amount The amount of underlying to repay\r\n    function repay(\r\n        address underlying,\r\n        address jToken,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20(underlying).safeIncreaseAllowance(jToken, amount);\r\n        uint256 result = IJToken(jToken).repayBorrow(amount);\r\n        require(result == 0, \"BankerJoe: Repay failed\");\r\n    }\r\n\r\n    /// @notice Redeem jTokens for underlying\r\n    /// @param jToken The jToken to redeem\r\n    /// @param amount The amount of jTokens to redeem\r\n    function redeem(address jToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = IJToken(jToken).redeem(amount);\r\n        require(result == 0, \"BankerJoe: Redeem jToken\");\r\n    }\r\n\r\n    /// @notice Redeem jTokens for underlying\r\n    /// @param jToken The jToken to redeem\r\n    /// @param amount The amount of underlying tokens to receive\r\n    function redeemUnderlying(address jToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = IJToken(jToken).redeemUnderlying(amount);\r\n        require(result == 0, \"BankerJoe: Redeem underlying\");\r\n    }\r\n\r\n    /// @notice Redeem jTokens for wavax\r\n    /// @param wavax WAVAX Address\r\n    /// @param jToken The jToken to redeem\r\n    /// @param amount The amount of underlying to receive\r\n    /// @dev Redeem in AVAX, then convert to wavax\r\n    function redeemUnderlyingInWeth(\r\n        address wavax,\r\n        address jToken,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        redeemUnderlying(jToken, amount);\r\n        IWAVAX(wavax).deposit{value: address(this).balance}();\r\n    }\r\n\r\n    /// @notice Claim JOE rewards from Joetroller for this address\r\n    /// @param joetroller The BankerJoe Joetroller, Reward Contract\r\n    /// @param rewardType Reward type: 0 = JOE, 1 = AVAX\r\n    function claim(address joetroller, uint8 rewardType) internal {\r\n        IJoetroller(joetroller).claimReward(rewardType, address(this));\r\n    }\r\n\r\n    /// @notice Wrap AVAX to WAVAX\r\n    /// @param wavax Address of WAVAX\r\n    /// @param amount Amount of AVAX to wrap\r\n    function wrap(address wavax, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n        IWAVAX(wavax).deposit{value: amount}();\r\n    }\r\n\r\n    // Returns the cash balance of this jToken in the underlying asset\r\n    function getCash(address jToken) internal view returns (uint256) {\r\n        return IJToken(jToken).getCash();\r\n    }\r\n\r\n    // Returns the owner's jToken balance\r\n    function balanceOfUnderlying(address jToken, address owner) internal returns (uint256) {\r\n        return IJToken(jToken).balanceOfUnderlying(owner);\r\n    }\r\n\r\n    // Returns the owner's borrow balance\r\n    function borrowBalanceCurrent(address jToken, address owner) internal returns (uint256) {\r\n        return IJToken(jToken).borrowBalanceCurrent(owner);\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/interfaces/IJToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IJToken {\r\n    function underlying() external;\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n}"
    },
    "contracts/strategies/bankerjoe/interfaces/IJoetroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IJoetroller {\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address JTokenModify,\r\n        uint256 redeemTokens,\r\n        uint256 borrowAmount\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function claimReward(uint8 rewardType, address holder) external;\r\n\r\n    function enterMarkets(address[] calldata JTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address JToken) external returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/interfaces/IJAvax.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IJAvax {\r\n    function mint() external payable;\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address account) external returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n"
    },
    "contracts/strategies/curve/OhCurveAPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/math/Math.sol\";\r\nimport {IStrategy} from \"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\";\r\nimport {OhCurveAPoolHelper} from \"./OhCurveAPoolHelper.sol\";\r\nimport {OhCurveAPoolStrategyStorage} from \"./OhCurveAPoolStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Curve APool Strategy\r\n/// @notice Standard Curve APool LP + Gauge Single Underlying Strategy\r\n/// @notice APool Underlying, in order: (aDAI, aUSDC, aUSDT)\r\ncontract OhCurveAPoolStrategy is OhStrategy, OhCurveAPoolStrategyStorage, OhCurveAPoolHelper, IStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Initialize the Curve APool Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initialize the Curve APool Strategy Proxy\r\n    /// @param registry_ Address of the Registry\r\n    /// @param bank_ Address of the Bank\r\n    /// @param underlying_ Underlying (DAI, USDC, USDT)\r\n    /// @param derivative_ 3CRV LP Token\r\n    /// @param reward_ CRV Gov Token\r\n    /// @param pool_ Address of the Curve APool\r\n    /// @param gauge_ Curve Gauge, Staking Contract\r\n    /// @param index_ Underlying APool Index\r\n    function initializeCurveAPoolStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address secondaryReward_,\r\n        address pool_,\r\n        address gauge_,\r\n        uint256 index_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeCurveAPoolStorage(secondaryReward_, pool_, gauge_, index_);\r\n    }\r\n\r\n    // calculate the total underlying balance\r\n    function investedBalance() public view override returns (uint256) {\r\n        return calcWithdraw(pool(), stakedBalance(), index());\r\n    }\r\n\r\n    // Get the balance of secondary rewards received by the Strategy\r\n    function secondaryRewardBalance() public view returns (uint256) {\r\n        address secondaryReward = secondaryReward();\r\n        if (secondaryReward == address(0)) {\r\n            return 0;\r\n        }\r\n    \r\n        return IERC20(secondaryReward).balanceOf(address(this));\r\n    }\r\n\r\n    // amount of av3CRV staked in the Gauge\r\n    function stakedBalance() public view returns (uint256) {\r\n        return staked(gauge());\r\n    }\r\n\r\n    /// @notice Execute the Curve APool Strategy\r\n    /// @dev Compound CRV Yield, Add Liquidity, Stake into Gauge\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    /// @notice Withdraw an amount of underlying from Curve APool Strategy\r\n    /// @param amount Amount of Underlying tokens to withdraw\r\n    /// @dev Unstake from Gauge, Remove Liquidity\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    /// @notice Withdraw all underlying from Curve APool Strategy\r\n    /// @dev Unstake from Gauge, Remove Liquidity\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    /// @dev Compound rewards into underlying through liquidation\r\n    /// @dev Claim Rewards from Mintr, sell CRV and WAVAX for USDC\r\n    function _compound() internal {\r\n        // claim available CRV and WAVAX rewards\r\n        claim(gauge());\r\n\r\n        uint256 rewardAmount = rewardBalance();\r\n        if (rewardAmount > 0) {\r\n            liquidate(reward(), underlying(), rewardAmount);\r\n        }\r\n\r\n        uint256 secondaryRewardAmount = secondaryRewardBalance();\r\n        if (secondaryRewardAmount > 0) {\r\n            liquidate(secondaryReward(), underlying(), secondaryRewardAmount);\r\n        }\r\n    }\r\n\r\n    // deposit underlying into APool to get av3CRV and stake into Gauge\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            // add liquidity to APool to receive CRV and WAVAX\r\n            addLiquidity(pool(), underlying(), index(), amount, 1);\r\n            // stake all received in the AAVE gauge\r\n            stake(gauge(), derivative(), derivativeBalance());\r\n        }\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 invested = investedBalance();\r\n        if (invested == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 staked = stakedBalance();\r\n\r\n        // calculate % of supply ownership\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n\r\n        // find amount to unstake in av3crv, 1e18\r\n        uint256 unstakeAmount = Math.min(staked, supplyShare.mul(staked).div(1e18));\r\n\r\n        // find amount to redeem in underlying, 1e6\r\n        uint256 redeemAmount = Math.min(invested, supplyShare.mul(invested).div(1e18));\r\n\r\n        // unstake from Gauge and remove liquidity from Pool\r\n        unstake(gauge(), unstakeAmount);\r\n        removeLiquidity(pool(), index(), unstakeAmount, redeemAmount);\r\n\r\n        // withdraw to bank\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/strategies/curve/OhCurveAPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {ICurveAPool} from \"./interfaces/ICurveAPool.sol\";\r\nimport {IGauge} from \"./interfaces/IGauge.sol\";\r\n\r\n/// @title Oh! Finance Curve APool Helper\r\n/// @notice Helper functions for Curve APool Strategies\r\nabstract contract OhCurveAPoolHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Add liquidity to Curve's APool, receiving 3CRV in return\r\n    /// @param pool The address of Curve APool\r\n    /// @param underlying The underlying we want to deposit\r\n    /// @param index The index of the underlying\r\n    /// @param amount The amount of underlying to deposit\r\n    /// @param minMint The min LP tokens to mint before tx reverts (slippage)\r\n    function addLiquidity(\r\n        address pool,\r\n        address underlying,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 minMint\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n        \r\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\r\n        amounts[index] = amount;\r\n        IERC20(underlying).safeIncreaseAllowance(pool, amount);\r\n        ICurveAPool(pool).add_liquidity(amounts, minMint, true);\r\n    }\r\n\r\n\r\n    /// @notice Remove liquidity from Curve APool, receiving a single underlying\r\n    /// @param pool The Curve APool\r\n    /// @param index The index of underlying we want to withdraw\r\n    /// @param amount The amount of LP tokens to withdraw\r\n    /// @param minAmount The min underlying tokens to receive before the tx reverts (slippage)\r\n    function removeLiquidity(\r\n        address pool,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 minAmount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        ICurveAPool(pool).remove_liquidity_one_coin(amount, int128(index), minAmount, true);\r\n    }\r\n\r\n    /// @notice Claim CRV rewards from the given RewardsOnlyGauge\r\n    /// @param gauge The Gauge (Staking Contract) to claim from\r\n    function claim(address gauge) internal {\r\n        IGauge(gauge).claim_rewards(address(this), address(this));\r\n    }\r\n\r\n    /// @notice Calculate the max withdrawal amount to a single underlying\r\n    /// @param pool The Curve LP Pool\r\n    /// @param amount The amount of LP tokens to withdraw\r\n    /// @param index The index of the underlying in the LP Pool\r\n    function calcWithdraw(\r\n        address pool,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) internal view returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return ICurveAPool(pool).calc_withdraw_one_coin(amount, int128(index));\r\n    }\r\n\r\n    /// @notice Get the balance of staked tokens in a given Gauge\r\n    /// @param gauge The Curve Gauge to check\r\n    function staked(address gauge) internal view returns (uint256) {\r\n        return IGauge(gauge).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Stake crvUnderlying into the Gauge to earn CRV\r\n    /// @param gauge The Curve Gauge to stake into\r\n    /// @param crvUnderlying The Curve LP Token to stake\r\n    /// @param amount The amount of LP Tokens to stake\r\n    function stake(\r\n        address gauge,\r\n        address crvUnderlying,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20(crvUnderlying).safeIncreaseAllowance(gauge, amount);\r\n        IGauge(gauge).deposit(amount);\r\n    }\r\n\r\n    /// @notice Unstake crvUnderlying funds from the Curve Gauge\r\n    /// @param gauge The Curve Gauge to unstake from\r\n    /// @param amount The amount of LP Tokens to withdraw\r\n    function unstake(address gauge, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        IGauge(gauge).withdraw(amount);\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/curve/interfaces/ICurveAPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ICurveAPool {\r\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256, int128) external view returns (uint256);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount, bool use_underlying) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount, bool use_underlying)\r\n        external;\r\n\r\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 min_amount, bool use_underlying)\r\n        external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts, bool use_underlying) external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n}\r\n"
    },
    "contracts/strategies/curve/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IGauge {\r\n    function deposit(uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function user_checkpoint(address) external;\r\n\r\n    function claim_rewards(address, address) external;\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/math/Math.sol\";\r\nimport {IStrategy} from \"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\";\r\nimport {OhAvalancheBankerJoeHelper} from \"./OhAvalancheBankerJoeHelper.sol\";\r\nimport {OhAvalancheBankerJoeFoldingStrategyStorage} from \"./OhAvalancheBankerJoeFoldingStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Banker Joe Strategy\r\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative JTokens\r\n/// @dev https://docs.traderjoexyz.com/\r\ncontract OhAvalancheBankerJoeFoldingStrategy is IStrategy, OhAvalancheBankerJoeHelper, OhStrategy, OhAvalancheBankerJoeFoldingStrategyStorage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Initialize the BankerJoe Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initializes the BankerJoe Folding Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the JToken address received from BankerJoe\r\n    /// @param reward_ the address of the reward token JOE\r\n    /// @param joetroller_ the BankerJoe rewards contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeBankerJoeFoldingStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address joetroller_,\r\n        uint256 folds_,\r\n        uint256 collateralFactorNumerator_,\r\n        uint256 collateralFactorDenominator_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeBankerJoeFoldingStorage(joetroller_, folds_,\r\n            collateralFactorNumerator_, collateralFactorDenominator_);\r\n\r\n        IERC20(derivative_).safeApprove(underlying_, type(uint256).max);\r\n    }\r\n\r\n    /// @notice Get the balance of underlying invested by the Strategy\r\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of JTokens\r\n    /// @return The amount of underlying the strategy has invested\r\n    function investedBalance() public view override returns (uint256) {\r\n        return suppliedUnderlying().sub(borrowedUnderlying());\r\n    }\r\n\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    function _compound() internal {\r\n        _claimAll();\r\n\r\n        uint256 amount = rewardBalance();\r\n        if (amount > 0) {\r\n            liquidate(reward(), underlying(), amount);\r\n        }\r\n    }\r\n\r\n    function _claimAll() internal {\r\n        // Claim JOE\r\n        claim(joetroller(), 0);\r\n    }\r\n\r\n    // deposit underlying tokens into BankerJoe as collateral and borrow against it, minting JTokens\r\n    function _deposit() internal {\r\n        uint256 balance = underlyingBalance();\r\n\r\n        if (balance > 0) {\r\n            mint(underlying(), derivative(), balance);\r\n\r\n            uint256 folds = folds();\r\n            for (uint256 i = 0; i < folds; i++) {\r\n                uint256 borrowAmount = balance.mul(collateralFactorNumerator()).div(collateralFactorDenominator());\r\n                borrow(derivative(), borrowAmount);\r\n                balance = underlyingBalance();\r\n                mint(underlying(), derivative(), balance);\r\n            }\r\n        }\r\n\r\n        updateSupply();\r\n    }\r\n\r\n    // withdraw all underlying by redeem all JTokens\r\n    function withdrawAll() external override onlyBank {\r\n        updateSupply();\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    // withdraw an amount of underlying tokens\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        updateSupply();\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol after redeeming them from trader joe\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 invested = investedBalance();\r\n        if (invested == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate amount to redeem by supply ownership\r\n        uint256 withdrawn;\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\r\n\r\n        if (redeemAmount <= underlyingBalance()) {\r\n            withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n            return withdrawn;\r\n        }\r\n\r\n        // safely redeem from BankerJoe\r\n        if (redeemAmount > invested) {\r\n            mustRedeemPartial(invested);\r\n        } else {\r\n            mustRedeemPartial(redeemAmount);\r\n        }\r\n\r\n        // withdraw to bank\r\n        withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        \r\n        // re-invest whatever is left over if any\r\n        if (underlyingBalance() > 10) {\r\n            _compound();\r\n            _deposit();\r\n        } else {\r\n            updateSupply();\r\n        }\r\n\r\n        return withdrawn;\r\n    }\r\n\r\n    // Redeems `amountUnderlying` or fails.\r\n    function mustRedeemPartial(uint256 amountUnderlying) internal {\r\n        require(\r\n            getCash(derivative()) >= amountUnderlying,\r\n            \"market cash cannot cover liquidity\"\r\n        );\r\n        redeemMaximumUnderlyingWithLoan();\r\n        require(underlyingBalance() >= amountUnderlying, \"Unable to withdraw the entire amountUnderlying\");\r\n    }\r\n\r\n    function redeemMaximumUnderlyingWithLoan() internal {\r\n        // amount of liquidity\r\n        uint256 available = getCash(derivative());\r\n        // amount of MIM we supplied\r\n        uint256 supplied = balanceOfUnderlying(derivative(), address(this));\r\n        // amount of MIM we borrowed\r\n        uint256 borrowed = borrowBalanceCurrent(derivative(), address(this));\r\n\r\n        while (borrowed > 0) {\r\n            uint256 requiredCollateral = borrowed\r\n                .mul(collateralFactorDenominator())\r\n                .add(collateralFactorNumerator().div(2))           \r\n                .div(collateralFactorNumerator());\r\n\r\n            // redeem just as much as needed to repay the loan\r\n            uint256 wantToRedeem = supplied.sub(requiredCollateral);\r\n            redeemUnderlying(derivative(), Math.min(wantToRedeem, available));\r\n            // now we can repay our borrowed amount\r\n            uint256 balance = underlyingBalance();\r\n            repay(underlying(), derivative(), Math.min(borrowed, balance));\r\n\r\n            // update the parameters\r\n            available = getCash(derivative());\r\n            supplied = balanceOfUnderlying(derivative(), address(this));\r\n            borrowed = borrowBalanceCurrent(derivative(), address(this));\r\n        }\r\n\r\n        // redeem the most we can redeem\r\n        redeemUnderlying(derivative(), Math.min(available, supplied));\r\n    }\r\n\r\n    function updateSupply() internal {\r\n        setSuppliedUnderlying(balanceOfUnderlying(derivative(), address(this)));\r\n        setBorrowedUnderlying(borrowBalanceCurrent(derivative(), address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/strategies/bankerjoe/OhAvalancheBankerJoeFoldingStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IAvalancheBankerJoeFoldingStrategyStorage} from \"../../interfaces/strategies/bankerjoe/IAvalancheBankerJoeFoldingStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhAvalancheBankerJoeFoldingStrategyStorage is Initializable, OhUpgradeable, IAvalancheBankerJoeFoldingStrategyStorage {\r\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0xe92764c73743fa82af30af57881d71cb3552bcab7db5413e39640bec7888368e;\r\n    bytes32 internal constant _JOETROLLER_SLOT = 0xa8500b33177885436fffd1cad82f3d2505b0c5599689e0cc7ddc3cd69e835a0a;\r\n    bytes32 internal constant _FOLDS = 0x3f7ee994563fc1c4ce9783c52305490733b6dbde7985bc669d8320bf0782dda8;\r\n    bytes32 internal constant _COLLATERAL_FACTOR = 0xd0637784b71c719bba82dcdf8faa54186e4b319a889f085ee2cfe76b7d2325f8;\r\n    bytes32 internal constant _COLLATERAL_FACTOR_NUMERATOR = 0x2583c2fe9a19a2c5d372d3844edcdcb06f04785322744fde694dc2cf87b09907;\r\n    bytes32 internal constant _COLLATERAL_FACTOR_DENOMINATOR = 0x89897de7bf54873cd4b26bf44ee19d24f2bf9ea7480517440d5f2213ec2770d8;\r\n    bytes32 internal constant _SUPPLIED_UNDERLYING = 0x142313439ce87f0d58e0f7d4947bc31c1124d9fab1eec74dc028983fec37c48a;\r\n    bytes32 internal constant _BORROWED_UNDERLYING = 0x24d7357e790aaef7672d5161e8993dbbae37ca571a36629afb4d93cdff80bf36;\r\n\r\n    constructor() {\r\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.secondaryReward\")) - 1));\r\n        assert(_JOETROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.joetroller\")) - 1));\r\n        assert(_FOLDS == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.folds\")) - 1));\r\n        assert(_COLLATERAL_FACTOR == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.collateralFactor\")) - 1));\r\n        assert(_COLLATERAL_FACTOR_NUMERATOR == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.collateralFactorNumerator\")) - 1));\r\n        assert(_COLLATERAL_FACTOR_DENOMINATOR == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.collateralFactorDenominator\")) - 1));\r\n        assert(_SUPPLIED_UNDERLYING == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.suppliedUnderlying\")) - 1));\r\n        assert(_BORROWED_UNDERLYING == bytes32(uint256(keccak256(\"eip1967.bankerjoeFoldingStrategy.borrowedUnderlying\")) - 1));\r\n    }\r\n\r\n    function initializeBankerJoeFoldingStorage(\r\n        address joetroller_,\r\n        uint256 folds_,\r\n        uint256 collateralFactorNumerator_,\r\n        uint256 collateralFactorDenominator_) internal initializer {\r\n        _setJoetroller(joetroller_);\r\n        _setFolds(folds_);\r\n        _setCollateralFactorNumerator(collateralFactorNumerator_);\r\n        _setCollateralFactorDenominator(collateralFactorDenominator_);\r\n        setSuppliedUnderlying(0);\r\n        setBorrowedUnderlying(0);\r\n    }\r\n\r\n    function joetroller() public view override returns (address) {\r\n        return getAddress(_JOETROLLER_SLOT);\r\n    }\r\n\r\n    function _setJoetroller(address joetroller_) internal {\r\n        setAddress(_JOETROLLER_SLOT, joetroller_);\r\n    }\r\n\r\n    function folds() public view override returns (uint256) {\r\n        return getUInt256(_FOLDS);\r\n    }\r\n\r\n    function _setFolds(uint256 folds_) internal {\r\n        setUInt256(_FOLDS, folds_);\r\n    }\r\n\r\n    function collateralFactorNumerator() public view override returns (uint256) {\r\n        return getUInt256(_COLLATERAL_FACTOR_NUMERATOR);\r\n    }\r\n\r\n    function _setCollateralFactorNumerator(uint256 collateralFactorNumerator_) internal {\r\n        setUInt256(_COLLATERAL_FACTOR_NUMERATOR, collateralFactorNumerator_);\r\n    }\r\n\r\n    function collateralFactorDenominator() public view override returns (uint256) {\r\n        return getUInt256(_COLLATERAL_FACTOR_DENOMINATOR);\r\n    }\r\n\r\n    function _setCollateralFactorDenominator(uint256 collateralFactorDenominator_) internal {\r\n        setUInt256(_COLLATERAL_FACTOR_DENOMINATOR, collateralFactorDenominator_);\r\n    }\r\n\r\n    function suppliedUnderlying() public view override returns (uint256) {\r\n        return getUInt256(_SUPPLIED_UNDERLYING);\r\n    }\r\n\r\n    function setSuppliedUnderlying(uint256 suppliedUnderlying_) public override {\r\n        setUInt256(_SUPPLIED_UNDERLYING, suppliedUnderlying_);\r\n    }\r\n\r\n    function borrowedUnderlying() public view override returns (uint256) {\r\n        return getUInt256(_BORROWED_UNDERLYING);\r\n    }\r\n\r\n    function setBorrowedUnderlying(uint256 borrowedUnderlying_) public override {\r\n        setUInt256(_BORROWED_UNDERLYING, borrowedUnderlying_);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/bankerjoe/IAvalancheBankerJoeFoldingStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAvalancheBankerJoeFoldingStrategyStorage {\r\n    function joetroller() external view returns (address);\r\n\r\n    function folds() external view returns (uint256);\r\n\r\n    function collateralFactorNumerator() external view returns (uint256);\r\n\r\n    function collateralFactorDenominator() external view returns (uint256);\r\n\r\n    function suppliedUnderlying() external view returns (uint256);\r\n\r\n    function setSuppliedUnderlying(uint256 suppliedUnderlying_) external;\r\n\r\n    function borrowedUnderlying() external view returns (uint256);\r\n\r\n    function setBorrowedUnderlying(uint256 borrowedUnderlying_) external;\r\n}"
    },
    "contracts/strategies/alpha-homora/OhAlphaHomoraV2Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/math/Math.sol\";\r\nimport {IStrategy} from \"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\";\r\nimport {OhAlphaHomoraV2Helper} from \"./OhAlphaHomoraV2Helper.sol\";\r\nimport {OhAlphaHomoraV2StrategyStorage} from \"./OhAlphaHomoraV2StrategyStorage.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @title Oh! Finance Benqi Strategy\r\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative cTokens\r\n/// @dev https://compound.finance/docs/ctokens\r\ncontract OhAlphaHomoraV2Strategy is IStrategy, OhAlphaHomoraV2Helper, OhStrategy, OhAlphaHomoraV2StrategyStorage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Initialize the Benqi Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initializes the Benqi Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the ibUSDCv2Token address\r\n    /// @param creamUSDCToken_ the ibUSDCv2Token address\r\n    /// @param reward_ the address of the reward token QI\r\n    /// @param secondaryReward_ the address of the reward token WAVAX\r\n    /// @param safeBox_ the Alpha Homora V2 SafeBox contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeAlphaHomoraV2Strategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address secondaryReward_,\r\n        address creamUSDCToken_,\r\n        address safeBox_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeAlphaHomoraV2Storage(secondaryReward_, creamUSDCToken_, safeBox_);\r\n\r\n        IERC20(underlying_).safeApprove(derivative_, type(uint256).max);\r\n    }\r\n\r\n    /// @notice Get the balance of underlying invested by the Strategy\r\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of ibUSDCev2Token\r\n    /// @return The amount of underlying the strategy has invested\r\n    function investedBalance() public view override returns (uint256) {\r\n        uint256 exchangeRate = getExchangeRate(creamUSDCeToken());\r\n        return exchangeRate.mul(derivativeBalance()).div(1e18);\r\n    }\r\n\r\n    function underlyingToDerivative(uint256 amount) internal view returns(uint256) {\r\n        uint256 exchangeRate = getExchangeRate(creamUSDCeToken());        \r\n        return amount.mul(1e18).div(exchangeRate);\r\n    }\r\n\r\n    // Get the balance of extra rewards received by the Strategy\r\n    function secondaryRewardBalance() public view returns (uint256) {\r\n        address secondaryReward = secondaryReward();\r\n        if (secondaryReward == address(0)) {\r\n            return 0;\r\n        }\r\n    \r\n        return IERC20(secondaryReward).balanceOf(address(this));\r\n    }\r\n\r\n    function invest() external override onlyBank {\r\n        //_compound();\r\n        _deposit();\r\n    }\r\n\r\n    function _compound() internal {\r\n        //_claimAll();\r\n\r\n        // TODO: Rewards are not claimable yet, they should be activated on december 22nd\r\n        // uint256 amount = rewardBalance();\r\n        // if (amount > 0) {\r\n        //     liquidate(reward(), underlying(), amount);\r\n        // }\r\n\r\n        // uint256 secondaryAmount = secondaryRewardBalance();\r\n        // if (secondaryAmount > 0) {\r\n        //     liquidate(secondaryReward(), underlying(), secondaryAmount);\r\n        // }\r\n    }\r\n\r\n    function _claimAll() internal {\r\n        claim(safeBox(), derivativeBalance());\r\n    }\r\n\r\n    // deposit underlying tokens into Alpha Homora V2 USDC lending pool, minting ibUSDCv2\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            console.log(\"depositing: %s\", amount);\r\n            deposit(derivative(), amount);\r\n        }\r\n    }\r\n\r\n    // withdraw all underlying by redeem all ibUSDCv2Tokens\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    // withdraw an amount of underlying tokens\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol after redeeming them from Alpha Homora V2\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 invested = investedBalance();\r\n        if (invested == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate amount to redeem by supply ownership\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\r\n\r\n        // safely redeem from Alpha Homora V2\r\n        if (redeemAmount > invested) {\r\n            redeemUnderlying(derivative(), underlyingToDerivative(invested));\r\n        } else {\r\n            redeemUnderlying(derivative(), underlyingToDerivative(redeemAmount));\r\n        }\r\n\r\n        // withdraw to bank\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/strategies/alpha-homora/OhAlphaHomoraV2Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IWAVAX} from \"../../interfaces/IWAVAX.sol\"; \r\nimport {IcrUSDCToken} from \"./interfaces/IcrUSDCToken.sol\";\r\nimport {ISafeBox} from \"./interfaces/ISafeBox.sol\";\r\n\r\n\r\n/// @title Oh! Finance Benqi Helper\r\n/// @notice Helper functions to interact with the Benqi Protocol\r\n/// @dev https://compound.finance\r\nabstract contract OhAlphaHomoraV2Helper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Get the exchange rate of jTokens => underlying\r\n    /// @param crUSDCeToken The crUSDCeToken address rate to get\r\n    /// @return The exchange rate scaled by 1e18\r\n    function getExchangeRate(address crUSDCeToken) internal view returns (uint256) {\r\n        return IcrUSDCToken(crUSDCeToken).exchangeRateStored();\r\n    }\r\n\r\n    /// @notice Mint ibUSDCv2 tokens by providing/lending underlying as collateral\r\n    /// @param ibUSDCv2Token The ibUSDCv2 token\r\n    /// @param amount The amount of underlying to lend\r\n    function deposit(\r\n        address ibUSDCv2Token,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n        \r\n        ISafeBox(ibUSDCv2Token).deposit(amount);\r\n    }\r\n\r\n    /// @notice Redeem ibUSDCv2Token for underlying\r\n    /// @param ibUSDCv2Token The ibUSDCv2Token to redeem\r\n    /// @param amount The amount of underlying tokens to receive\r\n    function redeemUnderlying(address ibUSDCv2Token, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        ISafeBox(ibUSDCv2Token).withdraw(amount);\r\n    }\r\n\r\n    /// @notice Claim rewards from SafeBox for this address\r\n    /// @param safeBox The Alpha Homora SafeBox contract\r\n    /// @param totalAmount Total Amount of underlying reward to claim\r\n    function claim(address safeBox, uint totalAmount) internal {\r\n        bytes32[] memory proof = new bytes32[](10);\r\n        ISafeBox(safeBox).claim(totalAmount, proof);\r\n    }\r\n\r\n    /// @notice Wrap AVAX to WAVAX\r\n    /// @param wavax Address of WAVAX\r\n    /// @param amount Amount of AVAX to wrap\r\n    function wrap(address wavax, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n        IWAVAX(wavax).deposit{value: amount}();\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/alpha-homora/OhAlphaHomoraV2StrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {OhUpgradeable} from \"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\";\r\nimport {IAvalancheAlphaHomoraV2StrategyStorage} from \"../../interfaces/strategies/alpha-homora/IAvalancheAlphaHomoraV2StrategyStorage.sol\";\r\n\r\ncontract OhAlphaHomoraV2StrategyStorage is Initializable, OhUpgradeable, IAvalancheAlphaHomoraV2StrategyStorage {\r\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0xfc40feddd2ec402785b29ba05b6eed44f4e3923230f1e3fd37723c1ad4994568;\r\n    bytes32 internal constant _SAFEBOX_SLOT = 0x64c173a9d92a9628af3aca85e581c8e5ecef29fd894ebb0b189d65966a8666a1;\r\n    bytes32 internal constant _CREAMUSDCETOKEN_SLOT = 0xcf850a8a0343f5d7e3be556a74e900ac0ec14e17da77020f5b9d8f30a1dbf843;\r\n\r\n    constructor() {\r\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.alphahomorav2Strategy.secondaryReward\")) - 1));\r\n        assert(_SAFEBOX_SLOT == bytes32(uint256(keccak256(\"eip1967.alphahomorav2Strategy.safebox\")) - 1));\r\n        assert(_CREAMUSDCETOKEN_SLOT == bytes32(uint256(keccak256(\"eip1967.alphahomorav2Strategy.creamusdcetoken\")) - 1));\r\n    }\r\n\r\n    function initializeAlphaHomoraV2Storage(\r\n        address secondaryReward_,\r\n        address creamUSDCeToken_,\r\n        address safeBox_) internal initializer {\r\n        _setSecondaryReward(secondaryReward_);\r\n        _setCreamUSDCeToken(creamUSDCeToken_);\r\n        _setSafeBox(safeBox_);\r\n    }\r\n\r\n    function secondaryReward() public view override returns (address) {\r\n        return getAddress(_SECONDARY_REWARD_SLOT);\r\n    }\r\n\r\n    function _setSecondaryReward(address secondaryReward_) internal {\r\n        setAddress(_SECONDARY_REWARD_SLOT, secondaryReward_);\r\n    }\r\n\r\n    function creamUSDCeToken() public view override returns (address) {\r\n        return getAddress(_CREAMUSDCETOKEN_SLOT);\r\n    }\r\n\r\n    function _setCreamUSDCeToken(address creamUSDCeToken_) internal {\r\n        setAddress(_CREAMUSDCETOKEN_SLOT, creamUSDCeToken_);\r\n    }\r\n\r\n    function safeBox() public view override returns (address) {\r\n        return getAddress(_SAFEBOX_SLOT);\r\n    }\r\n\r\n    function _setSafeBox(address safeBox_) internal {\r\n        setAddress(_SAFEBOX_SLOT, safeBox_);\r\n    }\r\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/strategies/alpha-homora/interfaces/IcrUSDCToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IcrUSDCToken {\r\n    function exchangeRateStored() external view returns (uint256);\r\n}"
    },
    "contracts/strategies/alpha-homora/interfaces/ISafeBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISafeBox {\r\n    function deposit(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function claim(uint256 totalAmount, bytes32[] memory proof) external;\r\n\r\n    function claimAndWithdraw(uint256 totalAmount, bytes32[] memory proof, uint256 withdrawAmount) external;\r\n}"
    },
    "contracts/interfaces/strategies/alpha-homora/IAvalancheAlphaHomoraV2StrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAvalancheAlphaHomoraV2StrategyStorage {\r\n    function secondaryReward() external view returns (address);\r\n\r\n    function creamUSDCeToken() external view returns (address);\r\n\r\n    function safeBox() external view returns (address);\r\n}"
    },
    "contracts/strategies/aave/OhAvalancheAaveV2Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IStrategy} from \"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\";\r\nimport {OhAvalancheAaveV2Helper} from \"./OhAvalancheAaveV2Helper.sol\";\r\nimport {OhAvalancheAaveV2StrategyStorage} from \"./OhAvalancheAaveV2StrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Aave V2 Strategy\r\n/// @notice Standard strategy using Aave V2 Protocol\r\n/// @dev Underlying: USDC, USDT, etc.\r\n/// @dev Derivative: aToken, 1:1 ratio with underlying\r\n/// @dev https://docs.aave.com/developers/the-core-protocol/atokens\r\ncontract OhAvalancheAaveV2Strategy is IStrategy, OhAvalancheAaveV2Helper, OhStrategy, OhAvalancheAaveV2StrategyStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Initialize the AaveV2 Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initialize the AaveV2 Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the aToken address received from Aave\r\n    /// @param reward_ the address of the reward token wAVAX\r\n    /// @param lendingPool_ the AaveV2 lending pool that we lend to\r\n    /// @param incentivesController_ the AaveV2 rewards contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeAaveV2Strategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address lendingPool_,\r\n        address incentivesController_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeAaveV2Storage(lendingPool_, incentivesController_);\r\n    }\r\n\r\n    /// @notice Balance of underlying invested in AaveV2\r\n    /// @dev aTokens are 1:1 with underlying, they are continuously distributed to users\r\n    function investedBalance() public view override returns (uint256) {\r\n        return derivativeBalance();\r\n    }\r\n\r\n    /// @notice Invest in the AaveV2 Strategy\r\n    /// @dev Compound by claiming stkAAVE, then unwrapping + liquidating if cooldown permits\r\n    /// @dev Deposit all underlying to receive aTokens\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    /// @notice\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    /// @notice\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 amount = derivativeBalance();\r\n        _withdraw(msg.sender, amount);\r\n    }\r\n\r\n    /// @dev Compound stkAAVE rewards on a alternating cooldown schedule\r\n    function _compound() internal {\r\n        claimRewards(incentivesController(), derivative());\r\n        uint256 amount = rewardBalance();\r\n        if (amount > 0) {\r\n            liquidate(reward(), underlying(), amount);\r\n        }\r\n    }\r\n\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            lend(lendingPool(), underlying(), amount);\r\n        }\r\n    }\r\n\r\n    // withdraw tokens from protocol after converting aTokens to underlying\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 reclaimed = reclaim(lendingPool(), underlying(), amount);\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), reclaimed);\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/aave/OhAvalancheAaveV2Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {ILendingPoolV2} from \"@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/ILendingPoolV2.sol\";\r\nimport {ILendingPoolAddressesProviderV2} from \"@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/ILendingPoolAddressesProviderV2.sol\";\r\nimport {IAaveIncentivesController} from \"@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/IAaveIncentivesController.sol\";\r\nimport {IAaveProtocolDataProviderV2} from \"@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/IAaveProtocolDataProviderV2.sol\";\r\n\r\n/// @title Oh! Finance AaveV2 Helper\r\n/// @notice Helper functions to interact with the AaveV2\r\n/// @dev https://docs.aave.com/portal/\r\nabstract contract OhAvalancheAaveV2Helper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Get the AaveV2 aToken for a given underlying\r\n    /// @param dataProvider The AaveV2 Data Provider\r\n    /// @param underlying The underlying token to check\r\n    /// @return The address of the associated aToken\r\n    function aToken(address dataProvider, address underlying) internal view returns (address) {\r\n        (address aTokenAddress, , ) = IAaveProtocolDataProviderV2(dataProvider).getReserveTokensAddresses(underlying);\r\n        return aTokenAddress;\r\n    }\r\n\r\n    /// @notice Get the AaveV2 Lending Pool\r\n    /// @param addressProvider The AaveV2 Address Provider\r\n    /// @return The address of the AaveV2 Lending Pool\r\n    function lendingPool(address addressProvider) internal view returns (address) {\r\n        return ILendingPoolAddressesProviderV2(addressProvider).getLendingPool();\r\n    }\r\n\r\n    /// @notice Claim stkAAVE from the AaveV2 Incentive Controller\r\n    /// @dev Claim all available rewards, return if none available\r\n    /// @param incentivesController The AaveV2 Incentive Controller\r\n    /// @param token The aToken to claim rewards for\r\n    function claimRewards(address incentivesController, address token) internal {\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = token;\r\n\r\n        uint256 rewards = IAaveIncentivesController(incentivesController).getRewardsBalance(tokens, address(this));\r\n\r\n        if (rewards > 0) {\r\n            IAaveIncentivesController(incentivesController).claimRewards(tokens, rewards, address(this));\r\n        }\r\n    }\r\n\r\n    /// @notice Lend underlying to Aave V2 Lending Pool, receive aTokens\r\n    /// @param pool The AaveV2 Lending Pool\r\n    /// @param underlying The underlying ERC20 to lend\r\n    /// @param amount The amount of underlying to lend\r\n    function lend(\r\n        address pool,\r\n        address underlying,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20(underlying).safeIncreaseAllowance(pool, amount);\r\n        ILendingPoolV2(pool).deposit(\r\n            underlying,\r\n            amount,\r\n            address(this),\r\n            0 // referral code\r\n        );\r\n    }\r\n\r\n    /// @notice Reclaim underlying by sending aTokens to Aave V2 Lending Pool\r\n    /// @param pool The AaveV2 Lending Pool\r\n    /// @param token The aToken to redeem for underlying\r\n    /// @param amount The amount of aTokens to send\r\n    function reclaim(\r\n        address pool,\r\n        address token,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).safeIncreaseAllowance(pool, amount);\r\n        uint256 withdrawn = ILendingPoolV2(pool).withdraw(token, amount, address(this));\r\n        require(withdrawn == amount || withdrawn == balance, \"AaveV2: Withdraw failed\");\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/aave/OhAvalancheAaveV2StrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IAvalancheAaveV2StrategyStorage} from \"../../interfaces/strategies/aave/IAvalancheAaveV2StrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhAvalancheAaveV2StrategyStorage is Initializable, OhUpgradeable, IAvalancheAaveV2StrategyStorage {\r\n    bytes32 internal constant _LENDING_POOL_SLOT = 0x32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b;\r\n    bytes32 internal constant _INCENTIVES_CONTROLLER_SLOT = 0x8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda15;\r\n\r\n    constructor() {\r\n        assert(_LENDING_POOL_SLOT == bytes32(uint256(keccak256(\"eip1967.aaveV2Strategy.lendingPool\")) - 1));\r\n        assert(_INCENTIVES_CONTROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.aaveV2Strategy.incentivesController\")) - 1));\r\n    }\r\n\r\n    function initializeAaveV2Storage(\r\n        address lendingPool_,\r\n        address incentiveController_\r\n    ) internal initializer {\r\n        _setLendingPool(lendingPool_);\r\n        _setIncentiveController(incentiveController_);\r\n    }\r\n\r\n    function lendingPool() public view override returns (address) {\r\n        return getAddress(_LENDING_POOL_SLOT);\r\n    }\r\n\r\n    function incentivesController() public view override returns (address) {\r\n        return getAddress(_INCENTIVES_CONTROLLER_SLOT);\r\n    }\r\n\r\n    function _setLendingPool(address lendingPool_) internal {\r\n        setAddress(_LENDING_POOL_SLOT, lendingPool_);\r\n    }\r\n\r\n    function _setIncentiveController(address incentiveController_) internal {\r\n        setAddress(_INCENTIVES_CONTROLLER_SLOT, incentiveController_);\r\n    }\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/ILendingPoolV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {ILendingPoolAddressesProviderV2} from \"./ILendingPoolAddressesProviderV2.sol\";\r\nimport {DataTypes} from \"../libraries/DataTypes.sol\";\r\n\r\ninterface ILendingPoolV2 {\r\n    /**\r\n     * @dev Emitted on deposit()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address initiating the deposit\r\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n     * @param amount The amount deposited\r\n     * @param referral The referral code used\r\n     **/\r\n    event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral);\r\n\r\n    /**\r\n     * @dev Emitted on withdraw()\r\n     * @param reserve The address of the underlyng asset being withdrawn\r\n     * @param user The address initiating the withdrawal, owner of aTokens\r\n     * @param to Address that will receive the underlying\r\n     * @param amount The amount to be withdrawn\r\n     **/\r\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n     * @param reserve The address of the underlying asset being borrowed\r\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n     * initiator of the transaction on flashLoan()\r\n     * @param onBehalfOf The address that will be getting the debt\r\n     * @param amount The amount borrowed out\r\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n     * @param borrowRate The numeric rate at which the user has borrowed\r\n     * @param referral The referral code used\r\n     **/\r\n    event Borrow(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        uint256 borrowRateMode,\r\n        uint256 borrowRate,\r\n        uint16 indexed referral\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on repay()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The beneficiary of the repayment, getting his debt reduced\r\n     * @param repayer The address of the user initiating the repay(), providing the funds\r\n     * @param amount The amount repaid\r\n     **/\r\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted on swapBorrowRateMode()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user swapping his rate mode\r\n     * @param rateMode The rate mode that the user wants to swap to\r\n     **/\r\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n    /**\r\n     * @dev Emitted on setUserUseReserveAsCollateral()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user enabling the usage as collateral\r\n     **/\r\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n    /**\r\n     * @dev Emitted on setUserUseReserveAsCollateral()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user enabling the usage as collateral\r\n     **/\r\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n    /**\r\n     * @dev Emitted on rebalanceStableBorrowRate()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user for which the rebalance has been executed\r\n     **/\r\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n    /**\r\n     * @dev Emitted on flashLoan()\r\n     * @param target The address of the flash loan receiver contract\r\n     * @param initiator The address initiating the flash loan\r\n     * @param asset The address of the asset being flash borrowed\r\n     * @param amount The amount flash borrowed\r\n     * @param premium The fee flash borrowed\r\n     * @param referralCode The referral code used\r\n     **/\r\n    event FlashLoan(\r\n        address indexed target,\r\n        address indexed initiator,\r\n        address indexed asset,\r\n        uint256 amount,\r\n        uint256 premium,\r\n        uint16 referralCode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered.\r\n     */\r\n    event Paused();\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted.\r\n     */\r\n    event Unpaused();\r\n\r\n    /**\r\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n     * LendingPoolCollateral manager using a DELEGATECALL\r\n     * This allows to have the events in the generated ABI for LendingPool.\r\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n     * @param user The address of the borrower getting liquidated\r\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n     * @param liquidator The address of the liquidator\r\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n     * to receive the underlying collateral asset directly\r\n     **/\r\n    event LiquidationCall(\r\n        address indexed collateralAsset,\r\n        address indexed debtAsset,\r\n        address indexed user,\r\n        uint256 debtToCover,\r\n        uint256 liquidatedCollateralAmount,\r\n        address liquidator,\r\n        bool receiveAToken\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n     * gets added to the LendingPool ABI\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param liquidityRate The new liquidity rate\r\n     * @param stableBorrowRate The new stable borrow rate\r\n     * @param variableBorrowRate The new variable borrow rate\r\n     * @param liquidityIndex The new liquidity index\r\n     * @param variableBorrowIndex The new variable borrow index\r\n     **/\r\n    event ReserveDataUpdated(\r\n        address indexed reserve,\r\n        uint256 liquidityRate,\r\n        uint256 stableBorrowRate,\r\n        uint256 variableBorrowRate,\r\n        uint256 liquidityIndex,\r\n        uint256 variableBorrowIndex\r\n    );\r\n\r\n    /**\r\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n     * @param asset The address of the underlying asset to deposit\r\n     * @param amount The amount to be deposited\r\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n     *   is a different wallet\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n     * @param asset The address of the underlying asset to withdraw\r\n     * @param amount The underlying amount to be withdrawn\r\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n     * @param to Address that will receive the underlying, same as msg.sender if the user\r\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n     *   different wallet\r\n     * @return The final amount withdrawn\r\n     **/\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n     * @param asset The address of the underlying asset to borrow\r\n     * @param amount The amount to be borrowed\r\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n     * if he has been given credit delegation allowance\r\n     **/\r\n    function borrow(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        uint16 referralCode,\r\n        address onBehalfOf\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n     * @param asset The address of the borrowed underlying asset previously borrowed\r\n     * @param amount The amount to repay\r\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n     * other borrower whose debt should be removed\r\n     * @return The final amount repaid\r\n     **/\r\n    function repay(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 rateMode,\r\n        address onBehalfOf\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n     * @param asset The address of the underlying asset borrowed\r\n     * @param rateMode The rate mode that the user wants to swap to\r\n     **/\r\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n    /**\r\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n     * - Users can be rebalanced if the following conditions are satisfied:\r\n     *     1. Usage ratio is above 95%\r\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n     *        borrowed at a stable rate and depositors are not earning enough\r\n     * @param asset The address of the underlying asset borrowed\r\n     * @param user The address of the user to be rebalanced\r\n     **/\r\n    function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n    /**\r\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n     * @param asset The address of the underlying asset deposited\r\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n     **/\r\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n    /**\r\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n     * @param user The address of the borrower getting liquidated\r\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n     * to receive the underlying collateral asset directly\r\n     **/\r\n    function liquidationCall(\r\n        address collateralAsset,\r\n        address debtAsset,\r\n        address user,\r\n        uint256 debtToCover,\r\n        bool receiveAToken\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n     * as long as the amount taken plus a fee is returned.\r\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n     * For further details please visit https://developers.aave.com\r\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n     * @param assets The addresses of the assets being flash-borrowed\r\n     * @param amounts The amounts amounts being flash-borrowed\r\n     * @param modes Types of the debt to open if the flash loan is not returned:\r\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n     * @param params Variadic packed params to pass to the receiver as extra information\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata modes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the user account data across all the reserves\r\n     * @param user The address of the user\r\n     * @return totalCollateralETH the total collateral in ETH of the user\r\n     * @return totalDebtETH the total debt in ETH of the user\r\n     * @return availableBorrowsETH the borrowing power left of the user\r\n     * @return currentLiquidationThreshold the liquidation threshold of the user\r\n     * @return ltv the loan to value of the user\r\n     * @return healthFactor the current health factor of the user\r\n     **/\r\n    function getUserAccountData(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalCollateralETH,\r\n            uint256 totalDebtETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n\r\n    function initReserve(\r\n        address reserve,\r\n        address aTokenAddress,\r\n        address stableDebtAddress,\r\n        address variableDebtAddress,\r\n        address interestRateStrategyAddress\r\n    ) external;\r\n\r\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\r\n\r\n    function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n    /**\r\n     * @dev Returns the configuration of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The configuration of the reserve\r\n     **/\r\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n    /**\r\n     * @dev Returns the configuration of the user across all the reserves\r\n     * @param user The user address\r\n     * @return The configuration of the user\r\n     **/\r\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\r\n\r\n    /**\r\n     * @dev Returns the normalized income normalized income of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The reserve's normalized income\r\n     */\r\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the normalized variable debt per unit of asset\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The reserve normalized variable debt\r\n     */\r\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the state and configuration of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The state of the reserve\r\n     **/\r\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n    function finalizeTransfer(\r\n        address asset,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 balanceFromAfter,\r\n        uint256 balanceToBefore\r\n    ) external;\r\n\r\n    function getReservesList() external view returns (address[] memory);\r\n\r\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\r\n\r\n    function setPause(bool val) external;\r\n\r\n    function paused() external view returns (bool);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/ILendingPoolAddressesProviderV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ILendingPoolAddressesProviderV2 {\r\n    event MarketIdSet(string newMarketId);\r\n    event LendingPoolUpdated(address indexed newAddress);\r\n    event ConfigurationAdminUpdated(address indexed newAddress);\r\n    event EmergencyAdminUpdated(address indexed newAddress);\r\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n    event PriceOracleUpdated(address indexed newAddress);\r\n    event LendingRateOracleUpdated(address indexed newAddress);\r\n    event ProxyCreated(bytes32 id, address indexed newAddress);\r\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n    function getMarketId() external view returns (string memory);\r\n\r\n    function setMarketId(string calldata marketId) external;\r\n\r\n    function setAddress(bytes32 id, address newAddress) external;\r\n\r\n    function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n    function getAddress(bytes32 id) external view returns (address);\r\n\r\n    function getLendingPool() external view returns (address);\r\n\r\n    function setLendingPoolImpl(address pool) external;\r\n\r\n    function getLendingPoolConfigurator() external view returns (address);\r\n\r\n    function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n    function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n    function setLendingPoolCollateralManager(address manager) external;\r\n\r\n    function getPoolAdmin() external view returns (address);\r\n\r\n    function setPoolAdmin(address admin) external;\r\n\r\n    function getEmergencyAdmin() external view returns (address);\r\n\r\n    function setEmergencyAdmin(address admin) external;\r\n\r\n    function getPriceOracle() external view returns (address);\r\n\r\n    function setPriceOracle(address priceOracle) external;\r\n\r\n    function getLendingRateOracle() external view returns (address);\r\n\r\n    function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {IAaveDistributionManager} from \"./IAaveDistributionManager.sol\";\r\n\r\ninterface IAaveIncentivesController {\r\n    event RewardsAccrued(address indexed user, uint256 amount);\r\n\r\n    event RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\r\n\r\n    event ClaimerSet(address indexed user, address indexed claimer);\r\n\r\n    /**\r\n     * @dev Whitelists an address to claim the rewards on behalf of another address\r\n     * @param user The address of the user\r\n     * @param claimer The address of the claimer\r\n     */\r\n    function setClaimer(address user, address claimer) external;\r\n\r\n    /**\r\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\r\n     * @param user The address of the user\r\n     * @return The claimer address\r\n     */\r\n    function getClaimer(address user) external view returns (address);\r\n\r\n    /**\r\n     * @dev Configure assets for a certain rewards emission\r\n     * @param assets The assets to incentivize\r\n     * @param emissionsPerSecond The emission for each asset\r\n     */\r\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\r\n\r\n    /**\r\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\r\n     * @param asset The address of the user\r\n     * @param userBalance The balance of the user of the asset in the lending pool\r\n     * @param totalSupply The total supply of the asset in the lending pool\r\n     **/\r\n    function handleAction(\r\n        address asset,\r\n        uint256 userBalance,\r\n        uint256 totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n     * @return The rewards\r\n     **/\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n     * @param amount Amount of rewards to claim\r\n     * @param to Address that will be receiving the rewards\r\n     * @return Rewards claimed\r\n     **/\r\n    function claimRewards(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\r\n     * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\r\n     * @param amount Amount of rewards to claim\r\n     * @param user Address to check and claim rewards\r\n     * @param to Address that will be receiving the rewards\r\n     * @return Rewards claimed\r\n     **/\r\n    function claimRewardsOnBehalf(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address user,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev returns the unclaimed rewards of the user\r\n     * @param user the address of the user\r\n     * @return the unclaimed user rewards\r\n     */\r\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev for backward compatibility with previous implementation of the Incentives controller\r\n     */\r\n    function REWARD_TOKEN() external view returns (address);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/IAaveProtocolDataProviderV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAaveProtocolDataProviderV2 {\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        );\r\n\r\n    function getReserveData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 availableLiquidity,\r\n            uint256 totalStableDebt,\r\n            uint256 totalVariableDebt,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n\r\n    function getUserReserveData(address asset, address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentStableDebt,\r\n            uint256 currentVariableDebt,\r\n            uint256 principalStableDebt,\r\n            uint256 scaledVariableDebt,\r\n            uint256 stableBorrowRate,\r\n            uint256 liquidityRate,\r\n            uint40 stableRateLastUpdated,\r\n            bool usageAsCollateralEnabled\r\n        );\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary DataTypes {\r\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n    struct ReserveData {\r\n        //stores the reserve configuration\r\n        ReserveConfigurationMap configuration;\r\n        //the liquidity index. Expressed in ray\r\n        uint128 liquidityIndex;\r\n        //variable borrow index. Expressed in ray\r\n        uint128 variableBorrowIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint128 currentLiquidityRate;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint128 currentVariableBorrowRate;\r\n        //the current stable borrow rate. Expressed in ray\r\n        uint128 currentStableBorrowRate;\r\n        uint40 lastUpdateTimestamp;\r\n        //tokens addresses\r\n        address aTokenAddress;\r\n        address stableDebtTokenAddress;\r\n        address variableDebtTokenAddress;\r\n        //address of the interest rate strategy\r\n        address interestRateStrategyAddress;\r\n        //the id of the reserve. Represents the position in the list of the active reserves\r\n        uint8 id;\r\n    }\r\n\r\n    struct ReserveConfigurationMap {\r\n        //bit 0-15: LTV\r\n        //bit 16-31: Liq. threshold\r\n        //bit 32-47: Liq. bonus\r\n        //bit 48-55: Decimals\r\n        //bit 56: Reserve is active\r\n        //bit 57: reserve is frozen\r\n        //bit 58: borrowing is enabled\r\n        //bit 59: stable rate borrowing enabled\r\n        //bit 60-63: reserved\r\n        //bit 64-79: reserve factor\r\n        uint256 data;\r\n    }\r\n\r\n    struct UserConfigurationMap {\r\n        uint256 data;\r\n    }\r\n\r\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/interfaces/IAaveDistributionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {DistributionTypes} from \"../libraries/DistributionTypes.sol\";\r\n\r\ninterface IAaveDistributionManager {\r\n    event AssetConfigUpdated(address indexed asset, uint256 emission);\r\n    event AssetIndexUpdated(address indexed asset, uint256 index);\r\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\r\n    event DistributionEndUpdated(uint256 newDistributionEnd);\r\n\r\n    /**\r\n     * @dev Sets the end date for the distribution\r\n     * @param distributionEnd The end date timestamp\r\n     **/\r\n    function setDistributionEnd(uint256 distributionEnd) external;\r\n\r\n    /**\r\n     * @dev Gets the end date for the distribution\r\n     * @return The end of the distribution\r\n     **/\r\n    function getDistributionEnd() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev for backwards compatibility with the previous DistributionManager used\r\n     * @return The end of the distribution\r\n     **/\r\n    function DISTRIBUTION_END() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the data of an user on a distribution\r\n     * @param user Address of the user\r\n     * @param asset The address of the reference asset of the distribution\r\n     * @return The new index\r\n     **/\r\n    function getUserAssetData(address user, address asset) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the configuration of the distribution for a certain asset\r\n     * @param asset The address of the reference asset of the distribution\r\n     * @return The asset index, the emission per second and the last updated timestamp\r\n     **/\r\n    function getAssetData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/strategies/aave/libraries/DistributionTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary DistributionTypes {\r\n    struct AssetConfigInput {\r\n        uint104 emissionPerSecond;\r\n        uint256 totalStaked;\r\n        address underlyingAsset;\r\n    }\r\n\r\n    struct UserStakeInput {\r\n        address underlyingAsset;\r\n        uint256 stakedByUser;\r\n        uint256 totalStaked;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/aave/IAvalancheAaveV2StrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAvalancheAaveV2StrategyStorage {\r\n    function lendingPool() external view returns (address);\r\n\r\n    function incentivesController() external view returns (address);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/manager/OhManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IBank} from \"../interfaces/bank/IBank.sol\";\r\nimport {ILiquidator} from \"../interfaces/ILiquidator.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {IToken} from \"../interfaces/IToken.sol\";\r\nimport {TransferHelper} from \"../libraries/TransferHelper.sol\";\r\nimport {OhSubscriber} from \"../registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Manager\r\n/// @notice The Manager contains references to all active banks, strategies, and liquidation contracts.\r\n/// @dev This contract is used as the main control point for executing strategies\r\ncontract OhManager is OhSubscriber, IManager {\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Denominator for calculating protocol fees\r\n    uint256 public constant FEE_DENOMINATOR = 1000;\r\n\r\n    /// @notice Maximum buyback fee, 50%\r\n    uint256 public constant MAX_BUYBACK_FEE = 500;\r\n\r\n    /// @notice Minimum buyback fee, 10%\r\n    uint256 public constant MIN_BUYBACK_FEE = 100;\r\n\r\n    /// @notice Maximum management fee, 10%\r\n    uint256 public constant MAX_MANAGEMENT_FEE = 100;\r\n\r\n    /// @notice Minimum management fee, 0%\r\n    uint256 public constant MIN_MANAGEMENT_FEE = 0;\r\n\r\n    /// @notice The address of the Oh! Finance Token\r\n    address public override token;\r\n\r\n    /// @notice The amount of profits reserved for protocol buybacks, base 1000\r\n    uint256 public override buybackFee;\r\n\r\n    /// @notice The amount of profits reserved for fund management, base 1000\r\n    uint256 public override managementFee;\r\n\r\n    /// @notice The mapping of `from` token to `to` token to liquidator contract\r\n    mapping(address => mapping(address => address)) public override liquidators;\r\n\r\n    /// @notice The mapping of contracts that are whitelisted for Bank use/management\r\n    mapping(address => bool) public override whitelisted;\r\n\r\n    /// @dev The set of Banks approved for investing\r\n    EnumerableSet.AddressSet internal _banks;\r\n\r\n    /// @dev The mapping of Banks to active Strategies\r\n    mapping(address => EnumerableSet.AddressSet) internal _strategies;\r\n\r\n    /// @dev The mapping of Banks to next Strategy index it will deposit to\r\n    mapping(address => uint8) internal _depositQueue;\r\n\r\n    /// @dev The mapping of Banks to next Strategy index it will withdraw from\r\n    mapping(address => uint8) internal _withdrawQueue;\r\n\r\n    /// @notice Emitted when a Bank's capital is rebalanced\r\n    event Rebalance(address indexed bank);\r\n\r\n    /// @notice Emitted when a Bank's capital is invested in a single Strategy \r\n    event Finance(address indexed bank, address indexed strategy);\r\n\r\n    /// @notice Emitted when a Bank's capital is invested in all Strategies\r\n    event FinanceAll(address indexed bank);\r\n\r\n    /// @notice Emitted when a buyback is performed with an amount of from tokens\r\n    event Buyback(address indexed from, uint256 amount, uint256 buybackAmount);\r\n\r\n    /// @notice Emitted when a Bank realizes profit via liquidation \r\n    event AccrueRevenue(\r\n        address indexed bank,\r\n        address indexed strategy,\r\n        uint256 profitAmount,\r\n        uint256 buybackAmount,\r\n        uint256 managementAmount\r\n    );\r\n\r\n    /// @notice Only allow function calls if sender is an approved Bank\r\n    /// @param sender The address of the caller to validate\r\n    modifier onlyBank(address sender) {\r\n        require(_banks.contains(sender), \"Manager: Only Bank\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice Only allow function calls if sender is an approved Strategy\r\n    /// @param bank The address of the Bank that uses the Strategy\r\n    /// @param sender The address of the caller to validate\r\n    modifier onlyStrategy(address bank, address sender) {\r\n        require(_strategies[bank].contains(sender), \"Manager: Only Strategy\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Only allow EOAs or Whitelisted contracts to interact\r\n    /// @dev Prevents sandwich / flash loan attacks & re-entrancy\r\n    modifier defense {\r\n        require(msg.sender == tx.origin || whitelisted[msg.sender], \"Manager: Only EOA or Whitelist\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Deploy the Manager with the Registry reference\r\n    /// @dev Sets initial buyback and management fee parameters\r\n    /// @param registry_ The address of the registry\r\n    /// @param token_ The address of the Oh! Token\r\n    constructor(address registry_, address token_) OhSubscriber(registry_) {\r\n        token = token_;\r\n        buybackFee = 200; // 20%\r\n        managementFee = 20; // 2%\r\n    }\r\n\r\n    /// @notice Get the Bank\r\n    function banks(uint256 i) external view override returns (address) {\r\n        return _banks.at(i);\r\n    }\r\n\r\n    function totalBanks() external view override returns (uint256) {\r\n        return _banks.length();\r\n    }\r\n\r\n    /// @notice Get the Strategy at a given index for a given Bank\r\n    /// @param bank The address of the Bank that contains the Strategy\r\n    /// @param i The Bank queue index to check\r\n    function strategies(address bank, uint256 i) external view override returns (address) {\r\n        return _strategies[bank].at(i);\r\n    }\r\n\r\n    /// @notice Get total number of strategies for a given bank\r\n    /// @param bank The Bank we are checking\r\n    /// @return Amount of active strategies\r\n    function totalStrategies(address bank) external view override returns (uint256) {\r\n        return _strategies[bank].length();\r\n    }\r\n\r\n    /// @notice Get the index of the Strategy to withdraw from for a given Bank\r\n    /// @param bank The Bank to check the next Strategy for\r\n    /// @return The index of the Strategy\r\n    function withdrawIndex(address bank) external view override returns (uint256) {\r\n        return _withdrawQueue[bank];\r\n    }\r\n\r\n    /// @notice Set the withdrawal index\r\n    /// @param i The index value\r\n    function setWithdrawIndex(uint256 i) external override onlyBank(msg.sender) {\r\n        _withdrawQueue[msg.sender] = uint8(i);\r\n    }\r\n\r\n    /// @notice Rebalance Bank exposure by withdrawing all, then evenly distributing underlying to all strategies\r\n    /// @param bank The bank to rebalance\r\n    function rebalance(address bank) external override defense onlyBank(bank) {\r\n        // Exit all strategies\r\n        uint256 length = _strategies[bank].length();\r\n        for (uint256 i; i < length; i++) {\r\n            IBank(bank).exitAll(_strategies[bank].at(i));\r\n        }\r\n\r\n        // Re-invest underlying evenly\r\n        uint256 toInvest = IBank(bank).underlyingBalance();\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 amount = toInvest / length;\r\n            IBank(bank).invest(_strategies[bank].at(i), amount);\r\n        }\r\n\r\n        emit Rebalance(bank);\r\n    }\r\n\r\n    /// @notice Finance the next Strategy in the Bank queue with all available underlying\r\n    /// @param bank The address of the Bank to finance\r\n    /// @dev Only allow this function to be called on approved Banks\r\n    function finance(address bank) external override defense onlyBank(bank) {\r\n        uint256 length = _strategies[bank].length();\r\n        require(length > 0, \"Manager: No Strategies\");\r\n\r\n        // get the next Strategy, reset if current index out of bounds\r\n        uint8 i;\r\n        uint8 queued = _depositQueue[bank];\r\n        if (queued < length) {\r\n            i = queued;\r\n        } else {\r\n            i = 0;\r\n        }\r\n        address strategy = _strategies[bank].at(i);\r\n\r\n        // finance the strategy, increment index and update delay (+24h)\r\n        IBank(bank).investAll(strategy);\r\n        _depositQueue[bank] = i + 1;\r\n\r\n        emit Finance(bank, strategy);\r\n    }\r\n\r\n    /// @notice Evenly finance underlying to all strategies\r\n    /// @param bank The address of the Bank to finance\r\n    /// @dev Deposit queue not needed here as all Strategies are equally invested in\r\n    /// @dev Only allow this function to be called on approved Banks\r\n    function financeAll(address bank) external override defense onlyBank(bank) {\r\n        uint256 length = _strategies[bank].length();\r\n        require(length > 0, \"Manager: No Strategies\");\r\n\r\n        uint256 toInvest = IBank(bank).underlyingBalance();\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 amount = toInvest / length;\r\n            IBank(bank).invest(_strategies[bank].at(i), amount);\r\n        }\r\n\r\n        emit FinanceAll(bank);\r\n    }\r\n\r\n    /// @notice Perform a token buyback with accrued revenue\r\n    /// @dev Burns all proceeds\r\n    /// @param from The address of the token to liquidate for Oh! Tokens\r\n    function buyback(address from) external virtual override defense {\r\n        // get token, liquidator, and liquidation amount\r\n        address _token = token;\r\n        address liquidator = liquidators[from][_token];\r\n        uint256 amount = IERC20(from).balanceOf(address(this));\r\n\r\n        // send to liquidator, buyback and burn\r\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\r\n        uint256 received = ILiquidator(liquidator).liquidate(address(this), from, _token, amount, 1);\r\n        IToken(_token).burn(received);\r\n\r\n        emit Buyback(from, amount, received);\r\n    }\r\n\r\n    /// @notice Accrue revenue from a Strategy\r\n    /// @dev Only callable by approved Strategies\r\n    /// @param bank The address of the Bank which uses the Strategy\r\n    /// @param amount The total amount of profit received from liquidation\r\n    function accrueRevenue(\r\n        address bank,\r\n        address underlying,\r\n        uint256 amount\r\n    ) external override onlyStrategy(bank, msg.sender) {\r\n        // calculate protocol and management fees, find remaining\r\n        uint256 fee = amount.mul(buybackFee).div(FEE_DENOMINATOR);\r\n        uint256 reward = amount.mul(managementFee).div(FEE_DENOMINATOR);\r\n        uint256 remaining = amount.sub(fee).sub(reward);\r\n\r\n        // send original function caller the management fee, transfer remaining to the Strategy\r\n        TransferHelper.safeTokenTransfer(tx.origin, underlying, reward);\r\n        TransferHelper.safeTokenTransfer(msg.sender, underlying, remaining);\r\n\r\n        emit AccrueRevenue(bank, msg.sender, remaining, fee, reward);\r\n    }\r\n\r\n    /// @notice Exit a given strategy for a given bank\r\n    /// @param bank The bank that will be used to exit the strategy\r\n    /// @param strategy The strategy to be exited\r\n    function exit(address bank, address strategy) public onlyGovernance {\r\n        IBank(bank).exitAll(strategy);\r\n    }\r\n\r\n    /// @notice Exit from all strategies for a given bank\r\n    /// @param bank The bank that will be used to exit the strategy\r\n    function exitAll(address bank) public override onlyGovernance {\r\n        uint256 length = _strategies[bank].length();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            IBank(bank).exitAll(_strategies[bank].at(i));\r\n        }\r\n    }\r\n\r\n    /// @notice Adds or removes a Bank for investment\r\n    /// @dev Only Governance can call this function\r\n    /// @param _bank the bank to be approved/unapproved\r\n    /// @param _approved the approval status of the bank\r\n    function setBank(address _bank, bool _approved) external onlyGovernance {\r\n        require(_bank.isContract(), \"Manager: Not Contract\");\r\n        bool approved = _banks.contains(_bank);\r\n        require(approved != _approved, \"Manager: No Change\");\r\n\r\n        // if Bank is already approved, withdraw all capital\r\n        if (approved) {\r\n            exitAll(_bank);\r\n            _banks.remove(_bank);\r\n        } else {\r\n            _banks.add(_bank);\r\n        }\r\n    }\r\n\r\n    /// @notice Adds or removes a Strategy for a given Bank\r\n    /// @param _bank the bank which uses the strategy\r\n    /// @param _strategy the strategy to be approved/unapproved\r\n    /// @param _approved the approval status of the Strategy\r\n    /// @dev Only Governance can call this function\r\n    function setStrategy(address _bank, address _strategy, bool _approved) external onlyGovernance {\r\n        require(_strategy.isContract() && _bank.isContract(), \"Manager: Not Contract\");\r\n        bool approved = _strategies[_bank].contains(_strategy);\r\n        require(approved != _approved, \"Manager: No Change\");\r\n\r\n        // if Strategy is already approved, withdraw all capital\r\n        if (approved) {\r\n            exit(_bank, _strategy);\r\n            _strategies[_bank].remove(_strategy);\r\n        } else {\r\n            _strategies[_bank].add(_strategy);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the Liquidator contract for a given token\r\n    /// @param _liquidator the liquidator contract\r\n    /// @param _from the token we have to liquidate\r\n    /// @param _to the token we want to receive\r\n    /// @dev Only Governance can call this function\r\n    function setLiquidator(\r\n        address _liquidator,\r\n        address _from,\r\n        address _to\r\n    ) external onlyGovernance {\r\n        require(_liquidator.isContract(), \"Manager: Not Contract\");\r\n        liquidators[_from][_to] = _liquidator;\r\n    }\r\n\r\n    /// @notice Whitelists strategy for Bank use/management\r\n    /// @param _contract the strategy contract\r\n    /// @param _whitelisted the whitelisted status of the strategy\r\n    /// @dev Only Governance can call this function\r\n    function setWhitelisted(address _contract, bool _whitelisted) external onlyGovernance {\r\n        require(_contract.isContract(), \"Registry: Not Contract\");\r\n        whitelisted[_contract] = _whitelisted;\r\n    }\r\n\r\n    /// @notice Sets the protocol buyback percentage (Profit Share)\r\n    /// @param _buybackFee The new buyback fee\r\n    /// @dev Only Governance; base 1000, 1% = 10\r\n    function setBuybackFee(uint256 _buybackFee) external onlyGovernance {\r\n        require(_buybackFee > MIN_BUYBACK_FEE, \"Registry: Invalid Buyback\");\r\n        require(_buybackFee < MAX_BUYBACK_FEE, \"Registry: Buyback Too High\");\r\n        buybackFee = _buybackFee;\r\n    }\r\n\r\n    /// @notice Sets the protocol management fee percentage\r\n    /// @param _managementFee The new management fee\r\n    /// @dev Only Governance; base 1000, 1% = 10\r\n    function setManagementFee(uint256 _managementFee) external onlyGovernance {\r\n        require(_managementFee > MIN_MANAGEMENT_FEE, \"Registry: Invalid Mgmt\");\r\n        require(_managementFee < MAX_MANAGEMENT_FEE, \"Registry: Mgmt Too High\");\r\n        managementFee = _managementFee;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@ohfinance/oh-contracts/contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IToken {\r\n    function delegate(address delegatee) external;\r\n\r\n    function delegateBySig(\r\n        address delegator,\r\n        address delegatee,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function mint(address recipient, uint256 amount) external;\r\n\r\n    function getCurrentVotes(address account) external view returns (uint256);\r\n\r\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\r\n}\r\n"
    },
    "@ohfinance/oh-contracts/contracts/registry/OhSubscriber.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {ISubscriber} from \"../interfaces/ISubscriber.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\n\r\n/// @title Oh! Finance Subscriber\r\n/// @notice Base Oh! Finance contract used to control access throughout the protocol\r\nabstract contract OhSubscriber is ISubscriber {\r\n    address internal _registry;\r\n\r\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\r\n    modifier onlyAuthorized {\r\n        require(msg.sender == governance() || msg.sender == manager(), \"Subscriber: Only Authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Only allow the governance address to execute a function\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance(), \"Subscriber: Only Governance\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Construct contract with the Registry\r\n    /// @param registry_ The address of the Registry\r\n    constructor(address registry_) {\r\n        require(Address.isContract(registry_), \"Subscriber: Invalid Registry\");\r\n        _registry = registry_;\r\n    }\r\n\r\n    /// @notice Get the Governance address\r\n    /// @return The current Governance address\r\n    function governance() public view override returns (address) {\r\n        return IRegistry(registry()).governance();\r\n    }\r\n\r\n    /// @notice Get the Manager address\r\n    /// @return The current Manager address\r\n    function manager() public view override returns (address) {\r\n        return IRegistry(registry()).manager();\r\n    }\r\n\r\n    /// @notice Get the Registry address\r\n    /// @return The current Registry address\r\n    function registry() public view override returns (address) {\r\n        return _registry;\r\n    }\r\n\r\n    /// @notice Set the Registry for the contract. Only callable by Governance.\r\n    /// @param registry_ The new registry\r\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\r\n    /// @dev Ideally should not be used\r\n    function setRegistry(address registry_) external onlyGovernance {\r\n        require(Address.isContract(registry_), \"Subscriber: Invalid Registry\");\r\n\r\n        _registry = registry_;\r\n        require(msg.sender == governance(), \"Subscriber: Bad Governance\");\r\n    }\r\n}\r\n"
    },
    "contracts/manager/OhAvalancheManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {OhManager} from \"@ohfinance/oh-contracts/contracts/manager/OhManager.sol\";\r\nimport {OhSubscriber} from \"@ohfinance/oh-contracts/contracts/registry/OhSubscriber.sol\";\r\nimport {TransferHelper} from \"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\";\r\nimport {ILiquidator} from \"@ohfinance/oh-contracts/contracts/interfaces/ILiquidator.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IAvalancheManager} from \"../interfaces/manager/IAvalancheManager.sol\";\r\n\r\ncontract OhAvalancheManager is OhManager, IAvalancheManager {\r\n    address public override burner;\r\n\r\n    /// @notice Deploy the Manager with the Registry reference\r\n    /// @dev Sets initial buyback and management fee parameters\r\n    /// @param registry_ The address of the registry\r\n    /// @param token_ The address of the Oh! Token\r\n    constructor(address registry_, address token_) OhManager(registry_, token_) {}\r\n\r\n    /// @notice Perform a token buyback with accrued revenue\r\n    /// @dev Burns all proceeds\r\n    /// @param from The address of the token to liquidate for Oh! Tokens\r\n    function buyback(address from) external override defense {\r\n        // get token, liquidator, and liquidation amount\r\n        address _token = token;\r\n        address liquidator = liquidators[from][_token];\r\n        uint256 amount = IERC20(from).balanceOf(address(this));\r\n\r\n        // send to liquidator, buyback and burn\r\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\r\n        uint256 received = ILiquidator(liquidator).liquidate(address(this), from, _token, amount, 1);\r\n\r\n        emit Buyback(from, amount, received);\r\n    }\r\n\r\n    function burn() external override defense {\r\n        require(burner != address(0), \"Manager: No Burner\");\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        TransferHelper.safeTokenTransfer(burner, token, amount);\r\n    }\r\n\r\n    function setBurner(address _burner) external override onlyGovernance {\r\n        burner = _burner;\r\n    }\r\n}"
    },
    "contracts/interfaces/manager/IAvalancheManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAvalancheManager {\r\n    function burner() external view returns (address);\r\n    \r\n    function burn() external;\r\n\r\n    function setBurner(address _burner) external;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}