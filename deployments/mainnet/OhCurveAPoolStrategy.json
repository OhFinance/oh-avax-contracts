{
  "address": "0xc3Fad1Dc2C4Bb3FFc86CCFE43B276e64aC3639E0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivativeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "derivative_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondaryReward_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gauge_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "initializeCurveAPoolStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80b53d2f63c22755bb2e43039b0dbc4a77652e50602d3310817a16cfa68a99f9",
  "receipt": {
    "to": null,
    "from": "0x000000010b5AFA32AB82B72625D68571B11EAE13",
    "contractAddress": "0xc3Fad1Dc2C4Bb3FFc86CCFE43B276e64aC3639E0",
    "transactionIndex": 0,
    "gasUsed": "1709565",
    "logsBloom": "0x
    "blockHash": "0x2c40b66c023f3a232f44e3d779eb3dc6e81892ddbd085970375f36bbd4bc6e89",
    "transactionHash": "0x80b53d2f63c22755bb2e43039b0dbc4a77652e50602d3310817a16cfa68a99f9",
    "logs": [],
    "blockNumber": 6981669,
    "cumulativeGasUsed": "1709565",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a99717a97f393596d3bf3896b6d70776",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"derivative_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryReward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"initializeCurveAPoolStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"derivativeBalance()\":{\"details\":\"Balance of derivative tokens received from Strategy, if applicable\",\"returns\":{\"_0\":\"The balance of derivative tokens\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"initializeCurveAPoolStrategy(address,address,address,address,address,address,address,address,uint256)\":{\"params\":{\"bank_\":\"Address of the Bank\",\"derivative_\":\"3CRV LP Token\",\"gauge_\":\"Curve Gauge, Staking Contract\",\"index_\":\"Underlying APool Index\",\"pool_\":\"Address of the Curve APool\",\"registry_\":\"Address of the Registry\",\"reward_\":\"CRV Gov Token\",\"underlying_\":\"Underlying (DAI, USDC, USDT)\"}},\"invest()\":{\"details\":\"Compound CRV Yield, Add Liquidity, Stake into Gauge\"},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"rewardBalance()\":{\"details\":\"Balance of reward tokens awaiting liquidation, if applicable\"},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"sweep(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to sweep\",\"recipient\":\"The address to send the sweeped tokens to\",\"token\":\"The address of the token to sweep\"}},\"underlyingBalance()\":{\"details\":\"Balance of underlying awaiting Strategy investment\"},\"withdraw(uint256)\":{\"details\":\"Unstake from Gauge, Remove Liquidity\",\"params\":{\"amount\":\"Amount of Underlying tokens to withdraw\"}},\"withdrawAll()\":{\"details\":\"Unstake from Gauge, Remove Liquidity\"}},\"title\":\"Oh! Finance Curve APool Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bank()\":{\"notice\":\"The Bank that the Strategy is associated with\"},\"constructor\":{\"notice\":\"Initialize the Curve APool Strategy Logic\"},\"derivative()\":{\"notice\":\"The derivative token received from AaveV2 (aToken)\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"initializeCurveAPoolStrategy(address,address,address,address,address,address,address,address,uint256)\":{\"notice\":\"Initialize the Curve APool Strategy Proxy\"},\"invest()\":{\"notice\":\"Execute the Curve APool Strategy\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"reward()\":{\"notice\":\"The reward token received from AaveV2 (stkAave)\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"sweep(address,uint256,address)\":{\"notice\":\"Governance function to sweep any stuck / airdrop tokens to a given recipient\"},\"underlying()\":{\"notice\":\"The underlying token the Strategy invests in AaveV2\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw an amount of underlying from Curve APool Strategy\"},\"withdrawAll()\":{\"notice\":\"Withdraw all underlying from Curve APool Strategy\"}},\"notice\":\"Standard Curve APool LP + Gauge Single Underlying StrategyAPool Underlying, in order: (aDAI, aUSDC, aUSDT)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/curve/OhCurveAPoolStrategy.sol\":\"OhCurveAPoolStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ohfinance/oh-contracts/contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILiquidator {\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\\r\\n\\r\\n    function sushiswapRouter() external view returns (address);\\r\\n\\r\\n    function uniswapRouter() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x06e860aed460fcad6bda1d677e83ee5155a74767378445103224319712f65d91\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IBankStorage} from \\\"./IBankStorage.sol\\\";\\r\\n\\r\\ninterface IBank is IBankStorage {\\r\\n    function strategies(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function strategyBalance(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function invest(address strategy, uint256 amount) external;\\r\\n\\r\\n    function investAll(address strategy) external;\\r\\n\\r\\n    function exit(address strategy, uint256 amount) external;\\r\\n\\r\\n    function exitAll(address strategy) external;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositFor(uint256 amount, address recipient) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6de3defe08ace109d27988c102a358967a5265c2462193ab25681d8fa659aaa\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/bank/IBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBankStorage {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xda98d80e7a82404afa0ca24e3ce36ea5761301ab9bc4c573ee199af735f6f544\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyBase} from \\\"./IStrategyBase.sol\\\";\\r\\n\\r\\ninterface IStrategy is IStrategyBase {\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function invest() external;\\r\\n\\r\\n    function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8ddfe37d38ab5c1f10e649025c31f04bdadd42fb93e9ab422799925624494fb\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyStorage} from \\\"./IStrategyStorage.sol\\\";\\r\\n\\r\\ninterface IStrategyBase is IStrategyStorage {\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function derivativeBalance() external view returns (uint256);\\r\\n\\r\\n    function rewardBalance() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d2b099e226a7b99500af8c9c2beb5cf8a8da9a6675c6ca9f89ba229a270764\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IStrategyStorage {\\r\\n    function bank() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function derivative() external view returns (address);\\r\\n\\r\\n    function reward() external view returns (address);\\r\\n\\r\\n    // function investedBalance() external view returns (uint256);\\r\\n\\r\\n    // function invest() external;\\r\\n\\r\\n    // function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    // function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe02fa4951275170cfea55e68ec215048a1d2453255563cea3aae5d27d1248f93\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // safely transfer tokens without underflowing\\r\\n    function safeTokenTransfer(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            IERC20(token).safeTransfer(recipient, balance);\\r\\n            return balance;\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(recipient, amount);\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x554436aaa2fe9d290e98e1872d43990d713d8bd1061474cc423edeec6d1eb92d\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @title Oh! Finance Base Upgradeable\\r\\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\\r\\nabstract contract OhUpgradeable {\\r\\n    function getAddress(bytes32 slot) internal view returns (address _address) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _address := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\\r\\n        uint256 bool_;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            bool_ := sload(slot)\\r\\n        }\\r\\n        _bool = bool_ == 1;\\r\\n    }\\r\\n\\r\\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _bytes32 := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _uint := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddress(bytes32 slot, address _address) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _address)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _bytes32)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Set a boolean storage variable in a given slot\\r\\n    /// @dev Convert to a uint to take up an entire contract storage slot\\r\\n    function setBoolean(bytes32 slot, bool _bool) internal {\\r\\n        uint256 bool_ = _bool ? 1 : 0;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, bool_)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _uint)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5dd7d929b429b1987fd0b51a6cd2fa6d65eba8fcea83c08885ba594c14f7bf4e\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/registry/OhSubscriberUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber Upgradeable\\r\\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\\r\\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Verify the registry storage slot is correct\\r\\n    constructor() {\\r\\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.subscriber.registry\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Subscriber\\r\\n    /// @param registry_ The Registry contract address\\r\\n    /// @dev Always call this method in the initializer function for any derived classes\\r\\n    function initializeSubscriber(address registry_) internal initializer {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _setRegistry(registry_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        _setRegistry(registry_);\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return getAddress(_REGISTRY_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address registry_) private {\\r\\n        setAddress(_REGISTRY_SLOT, registry_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32f5c681a6a387937e51f03e9e45762fb0a7d73fa060f9eb6746d273c792e215\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IBank} from \\\"../interfaces/bank/IBank.sol\\\";\\r\\nimport {IStrategyBase} from \\\"../interfaces/strategies/IStrategyBase.sol\\\";\\r\\nimport {ILiquidator} from \\\"../interfaces/ILiquidator.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\r\\nimport {OhSubscriberUpgradeable} from \\\"../registry/OhSubscriberUpgradeable.sol\\\";\\r\\nimport {OhStrategyStorage} from \\\"./OhStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Strategy\\r\\n/// @notice Base Upgradeable Strategy Contract to build strategies on\\r\\ncontract OhStrategy is OhSubscriberUpgradeable, OhStrategyStorage, IStrategyBase {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Liquidate(address indexed router, address indexed token, uint256 amount);\\r\\n    event Sweep(address indexed token, uint256 amount, address recipient);\\r\\n\\r\\n    /// @notice Only the Bank can execute these functions\\r\\n    modifier onlyBank() {\\r\\n        require(msg.sender == bank(), \\\"Strategy: Only Bank\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the base Strategy\\r\\n    /// @param registry_ Address of the Registry\\r\\n    /// @param bank_ Address of Bank\\r\\n    /// @param underlying_ Underying token that is deposited\\r\\n    /// @param derivative_ Derivative token received from protocol, or address(0)\\r\\n    /// @param reward_ Reward token received from protocol, or address(0)\\r\\n    function initializeStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        initializeSubscriber(registry_);\\r\\n        initializeStorage(bank_, underlying_, derivative_, reward_);\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of underlying awaiting Strategy investment\\r\\n    function underlyingBalance() public view override returns (uint256) {\\r\\n        return IERC20(underlying()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of derivative tokens received from Strategy, if applicable\\r\\n    /// @return The balance of derivative tokens\\r\\n    function derivativeBalance() public view override returns (uint256) {\\r\\n        if (derivative() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(derivative()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of reward tokens awaiting liquidation, if applicable\\r\\n    function rewardBalance() public view override returns (uint256) {\\r\\n        if (reward() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(reward()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Governance function to sweep any stuck / airdrop tokens to a given recipient\\r\\n    /// @param token The address of the token to sweep\\r\\n    /// @param amount The amount of tokens to sweep\\r\\n    /// @param recipient The address to send the sweeped tokens to\\r\\n    function sweep(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address recipient\\r\\n    ) external onlyGovernance {\\r\\n        // require(!_protected[token], \\\"Strategy: Cannot sweep\\\");\\r\\n        TransferHelper.safeTokenTransfer(recipient, token, amount);\\r\\n        emit Sweep(token, amount, recipient);\\r\\n    }\\r\\n\\r\\n    /// @dev Liquidation function to swap rewards for underlying\\r\\n    function liquidate(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        // if (amount > minimumSell())\\r\\n\\r\\n        // find the liquidator to use\\r\\n        address manager = manager();\\r\\n        address liquidator = IManager(manager).liquidators(from, to);\\r\\n\\r\\n        // increase allowance and liquidate to the manager\\r\\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\\r\\n        uint256 received = ILiquidator(liquidator).liquidate(manager, from, to, amount, 1);\\r\\n\\r\\n        // notify revenue and transfer proceeds back to strategy\\r\\n        IManager(manager).accrueRevenue(bank(), to, received);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9736e9a693e027f9931a6420d572cb170c369922571592a6ef3439f176a6a8a\",\"license\":\"MIT\"},\"@ohfinance/oh-contracts/contracts/strategies/OhStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IStrategyStorage} from \\\"../interfaces/strategies/IStrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhStrategyStorage is Initializable, OhUpgradeable, IStrategyStorage {\\r\\n    bytes32 internal constant _BANK_SLOT = 0xd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74;\\r\\n    bytes32 internal constant _UNDERLYING_SLOT = 0x0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812;\\r\\n    bytes32 internal constant _DERIVATIVE_SLOT = 0x4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3;\\r\\n    bytes32 internal constant _REWARD_SLOT = 0xaeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_BANK_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.bank\\\")) - 1));\\r\\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.underlying\\\")) - 1));\\r\\n        assert(_DERIVATIVE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.derivative\\\")) - 1));\\r\\n        assert(_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.reward\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeStorage(\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        _setBank(bank_);\\r\\n        _setUnderlying(underlying_);\\r\\n        _setDerivative(derivative_);\\r\\n        _setReward(reward_);\\r\\n    }\\r\\n\\r\\n    /// @notice The Bank that the Strategy is associated with\\r\\n    function bank() public view override returns (address) {\\r\\n        return getAddress(_BANK_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The underlying token the Strategy invests in AaveV2\\r\\n    function underlying() public view override returns (address) {\\r\\n        return getAddress(_UNDERLYING_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The derivative token received from AaveV2 (aToken)\\r\\n    function derivative() public view override returns (address) {\\r\\n        return getAddress(_DERIVATIVE_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The reward token received from AaveV2 (stkAave)\\r\\n    function reward() public view override returns (address) {\\r\\n        return getAddress(_REWARD_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setBank(address _address) internal {\\r\\n        setAddress(_BANK_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setUnderlying(address _address) internal {\\r\\n        setAddress(_UNDERLYING_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setDerivative(address _address) internal {\\r\\n        setAddress(_DERIVATIVE_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setReward(address _address) internal {\\r\\n        setAddress(_REWARD_SLOT, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb844858c0fdd73fdb58f6920a1d6a1cc4b192678f630fa4d0f35133624edbaa5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/curve/ICurveAPoolStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ICurveAPoolStrategyStorage {\\r\\n    function secondaryReward() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function gauge() external view returns (address);\\r\\n\\r\\n    function index() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8090445b1efc1f1bd92b494a04ed426d1b4438b4a81fdb7a1f359823fd56d57f\",\"license\":\"MIT\"},\"contracts/strategies/curve/OhCurveAPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {ICurveAPool} from \\\"./interfaces/ICurveAPool.sol\\\";\\r\\nimport {IGauge} from \\\"./interfaces/IGauge.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Curve APool Helper\\r\\n/// @notice Helper functions for Curve APool Strategies\\r\\nabstract contract OhCurveAPoolHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Add liquidity to Curve's APool, receiving 3CRV in return\\r\\n    /// @param pool The address of Curve APool\\r\\n    /// @param underlying The underlying we want to deposit\\r\\n    /// @param index The index of the underlying\\r\\n    /// @param amount The amount of underlying to deposit\\r\\n    /// @param minMint The min LP tokens to mint before tx reverts (slippage)\\r\\n    function addLiquidity(\\r\\n        address pool,\\r\\n        address underlying,\\r\\n        uint256 index,\\r\\n        uint256 amount,\\r\\n        uint256 minMint\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\\r\\n        amounts[index] = amount;\\r\\n        IERC20(underlying).safeIncreaseAllowance(pool, amount);\\r\\n        ICurveAPool(pool).add_liquidity(amounts, minMint, true);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Remove liquidity from Curve APool, receiving a single underlying\\r\\n    /// @param pool The Curve APool\\r\\n    /// @param index The index of underlying we want to withdraw\\r\\n    /// @param amount The amount of LP tokens to withdraw\\r\\n    /// @param minAmount The min underlying tokens to receive before the tx reverts (slippage)\\r\\n    function removeLiquidity(\\r\\n        address pool,\\r\\n        uint256 index,\\r\\n        uint256 amount,\\r\\n        uint256 minAmount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ICurveAPool(pool).remove_liquidity_one_coin(amount, int128(index), minAmount, true);\\r\\n    }\\r\\n\\r\\n    /// @notice Claim CRV rewards from the given RewardsOnlyGauge\\r\\n    /// @param gauge The Gauge (Staking Contract) to claim from\\r\\n    function claim(address gauge) internal {\\r\\n        IGauge(gauge).claim_rewards(address(this), address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the max withdrawal amount to a single underlying\\r\\n    /// @param pool The Curve LP Pool\\r\\n    /// @param amount The amount of LP tokens to withdraw\\r\\n    /// @param index The index of the underlying in the LP Pool\\r\\n    function calcWithdraw(\\r\\n        address pool,\\r\\n        uint256 amount,\\r\\n        uint256 index\\r\\n    ) internal view returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return ICurveAPool(pool).calc_withdraw_one_coin(amount, int128(index));\\r\\n    }\\r\\n\\r\\n    /// @notice Get the balance of staked tokens in a given Gauge\\r\\n    /// @param gauge The Curve Gauge to check\\r\\n    function staked(address gauge) internal view returns (uint256) {\\r\\n        return IGauge(gauge).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Stake crvUnderlying into the Gauge to earn CRV\\r\\n    /// @param gauge The Curve Gauge to stake into\\r\\n    /// @param crvUnderlying The Curve LP Token to stake\\r\\n    /// @param amount The amount of LP Tokens to stake\\r\\n    function stake(\\r\\n        address gauge,\\r\\n        address crvUnderlying,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20(crvUnderlying).safeIncreaseAllowance(gauge, amount);\\r\\n        IGauge(gauge).deposit(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Unstake crvUnderlying funds from the Curve Gauge\\r\\n    /// @param gauge The Curve Gauge to unstake from\\r\\n    /// @param amount The amount of LP Tokens to withdraw\\r\\n    function unstake(address gauge, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IGauge(gauge).withdraw(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5b9b9ab1a9d8d364f67dec920e5621b9b11d1551d85b228ed74df83569f7ca1\",\"license\":\"MIT\"},\"contracts/strategies/curve/OhCurveAPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport {IStrategy} from \\\"@ohfinance/oh-contracts/contracts/interfaces/strategies/IStrategy.sol\\\";\\r\\nimport {TransferHelper} from \\\"@ohfinance/oh-contracts/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport {OhStrategy} from \\\"@ohfinance/oh-contracts/contracts/strategies/OhStrategy.sol\\\";\\r\\nimport {OhCurveAPoolHelper} from \\\"./OhCurveAPoolHelper.sol\\\";\\r\\nimport {OhCurveAPoolStrategyStorage} from \\\"./OhCurveAPoolStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Curve APool Strategy\\r\\n/// @notice Standard Curve APool LP + Gauge Single Underlying Strategy\\r\\n/// @notice APool Underlying, in order: (aDAI, aUSDC, aUSDT)\\r\\ncontract OhCurveAPoolStrategy is OhStrategy, OhCurveAPoolStrategyStorage, OhCurveAPoolHelper, IStrategy {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Initialize the Curve APool Strategy Logic\\r\\n    constructor() initializer {\\r\\n        assert(registry() == address(0));\\r\\n        assert(bank() == address(0));\\r\\n        assert(underlying() == address(0));\\r\\n        assert(reward() == address(0));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Curve APool Strategy Proxy\\r\\n    /// @param registry_ Address of the Registry\\r\\n    /// @param bank_ Address of the Bank\\r\\n    /// @param underlying_ Underlying (DAI, USDC, USDT)\\r\\n    /// @param derivative_ 3CRV LP Token\\r\\n    /// @param reward_ CRV Gov Token\\r\\n    /// @param pool_ Address of the Curve APool\\r\\n    /// @param gauge_ Curve Gauge, Staking Contract\\r\\n    /// @param index_ Underlying APool Index\\r\\n    function initializeCurveAPoolStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_,\\r\\n        address secondaryReward_,\\r\\n        address pool_,\\r\\n        address gauge_,\\r\\n        uint256 index_\\r\\n    ) public initializer {\\r\\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\\r\\n        initializeCurveAPoolStorage(secondaryReward_, pool_, gauge_, index_);\\r\\n    }\\r\\n\\r\\n    // calculate the total underlying balance\\r\\n    function investedBalance() public view override returns (uint256) {\\r\\n        return calcWithdraw(pool(), stakedBalance(), index());\\r\\n    }\\r\\n\\r\\n    // Get the balance of secondary rewards received by the Strategy\\r\\n    function secondaryRewardBalance() public view returns (uint256) {\\r\\n        address secondaryReward = secondaryReward();\\r\\n        if (secondaryReward == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n    \\r\\n        return IERC20(secondaryReward).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    // amount of av3CRV staked in the Gauge\\r\\n    function stakedBalance() public view returns (uint256) {\\r\\n        return staked(gauge());\\r\\n    }\\r\\n\\r\\n    /// @notice Execute the Curve APool Strategy\\r\\n    /// @dev Compound CRV Yield, Add Liquidity, Stake into Gauge\\r\\n    function invest() external override onlyBank {\\r\\n        _compound();\\r\\n        _deposit();\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw an amount of underlying from Curve APool Strategy\\r\\n    /// @param amount Amount of Underlying tokens to withdraw\\r\\n    /// @dev Unstake from Gauge, Remove Liquidity\\r\\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\\r\\n        uint256 withdrawn = _withdraw(msg.sender, amount);\\r\\n        return withdrawn;\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw all underlying from Curve APool Strategy\\r\\n    /// @dev Unstake from Gauge, Remove Liquidity\\r\\n    function withdrawAll() external override onlyBank {\\r\\n        uint256 invested = investedBalance();\\r\\n        _withdraw(msg.sender, invested);\\r\\n    }\\r\\n\\r\\n    /// @dev Compound rewards into underlying through liquidation\\r\\n    /// @dev Claim Rewards from Mintr, sell CRV and WAVAX for USDC\\r\\n    function _compound() internal {\\r\\n        // claim available CRV and WAVAX rewards\\r\\n        claim(gauge());\\r\\n\\r\\n        uint256 rewardAmount = rewardBalance();\\r\\n        if (rewardAmount > 0) {\\r\\n            liquidate(reward(), underlying(), rewardAmount);\\r\\n        }\\r\\n\\r\\n        uint256 secondaryRewardAmount = secondaryRewardBalance();\\r\\n        if (secondaryRewardAmount > 0) {\\r\\n            liquidate(secondaryReward(), underlying(), secondaryRewardAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // deposit underlying into APool to get av3CRV and stake into Gauge\\r\\n    function _deposit() internal {\\r\\n        uint256 amount = underlyingBalance();\\r\\n        if (amount > 0) {\\r\\n            // add liquidity to APool to receive CRV and WAVAX\\r\\n            addLiquidity(pool(), underlying(), index(), amount, 1);\\r\\n            // stake all received in the AAVE gauge\\r\\n            stake(gauge(), derivative(), derivativeBalance());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // withdraw underlying tokens from the protocol\\r\\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 invested = investedBalance();\\r\\n        if (invested == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 staked = stakedBalance();\\r\\n\\r\\n        // calculate % of supply ownership\\r\\n        uint256 supplyShare = amount.mul(1e18).div(invested);\\r\\n\\r\\n        // find amount to unstake in av3crv, 1e18\\r\\n        uint256 unstakeAmount = Math.min(staked, supplyShare.mul(staked).div(1e18));\\r\\n\\r\\n        // find amount to redeem in underlying, 1e6\\r\\n        uint256 redeemAmount = Math.min(invested, supplyShare.mul(invested).div(1e18));\\r\\n\\r\\n        // unstake from Gauge and remove liquidity from Pool\\r\\n        unstake(gauge(), unstakeAmount);\\r\\n        removeLiquidity(pool(), index(), unstakeAmount, redeemAmount);\\r\\n\\r\\n        // withdraw to bank\\r\\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\\r\\n        return withdrawn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd64821f2cee864192f1d53be54b7efd32566f9b0478b519f3f0cab17619eb0b\",\"license\":\"MIT\"},\"contracts/strategies/curve/OhCurveAPoolStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {ICurveAPoolStrategyStorage} from \\\"../../interfaces/strategies/curve/ICurveAPoolStrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"@ohfinance/oh-contracts/contracts/proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhCurveAPoolStrategyStorage is Initializable, OhUpgradeable, ICurveAPoolStrategyStorage {\\r\\n    bytes32 internal constant _SECONDARY_REWARD_SLOT = 0x5998c690f9a1844257ca5c21cb39f78d4bbd2eae05acb65890e299ab4a7bfa4f;\\r\\n    bytes32 internal constant _POOL_SLOT = 0x330f10e3036378592f49e68634d0df63784e4e3fc8e020d4b867b13c5238eba4;\\r\\n    bytes32 internal constant _GAUGE_SLOT = 0x42abdd437833f719b2143194014e248a0b88732beec95d86e79864eea92009b2;\\r\\n    bytes32 internal constant _INDEX_SLOT = 0xb6b51a75a44d9b0046bc08b5d45e10870e79dec03d49ff1beeb7491b35bfe32f;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_SECONDARY_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.curveAPoolStrategy.secondaryReward\\\")) - 1));\\r\\n        assert(_POOL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.curveAPoolStrategy.pool\\\")) - 1));\\r\\n        assert(_GAUGE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.curveAPoolStrategy.gauge\\\")) - 1));\\r\\n        assert(_INDEX_SLOT == bytes32(uint256(keccak256(\\\"eip1967.curveAPoolStrategy.index\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeCurveAPoolStorage(\\r\\n        address secondaryReward_,\\r\\n        address pool_,\\r\\n        address gauge_,\\r\\n        uint256 index_\\r\\n    ) internal initializer {\\r\\n        _setSecondaryReward(secondaryReward_);\\r\\n        _setPool(pool_);\\r\\n        _setGauge(gauge_);\\r\\n        _setIndex(index_);\\r\\n    }\\r\\n\\r\\n    function secondaryReward() public view override returns (address) {\\r\\n        return getAddress(_SECONDARY_REWARD_SLOT);\\r\\n    }\\r\\n\\r\\n    function pool() public view override returns (address) {\\r\\n        return getAddress(_POOL_SLOT);\\r\\n    }\\r\\n\\r\\n    function gauge() public view override returns (address) {\\r\\n        return getAddress(_GAUGE_SLOT);\\r\\n    }\\r\\n\\r\\n    function index() public view override returns (uint256) {\\r\\n        return getUInt256(_INDEX_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setSecondaryReward(address secondaryReward_) internal {\\r\\n        setAddress(_SECONDARY_REWARD_SLOT, secondaryReward_);\\r\\n    }\\r\\n\\r\\n    function _setPool(address pool_) internal {\\r\\n        setAddress(_POOL_SLOT, pool_);\\r\\n    }\\r\\n\\r\\n    function _setGauge(address gauge_) internal {\\r\\n        setAddress(_GAUGE_SLOT, gauge_);\\r\\n    }\\r\\n\\r\\n    function _setIndex(uint256 index_) internal {\\r\\n        setUInt256(_INDEX_SLOT, index_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa558dcfe5e4004cea074f00ea7186f865348e8dc143e1e0e181c8d3e6062d06d\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveAPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ICurveAPool {\\r\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function calc_withdraw_one_coin(uint256, int128) external view returns (uint256);\\r\\n\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount, bool use_underlying) external;\\r\\n\\r\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount, bool use_underlying)\\r\\n        external;\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 min_amount, bool use_underlying)\\r\\n        external;\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts, bool use_underlying) external;\\r\\n\\r\\n    function exchange(\\r\\n        int128 from,\\r\\n        int128 to,\\r\\n        uint256 _from_amount,\\r\\n        uint256 _min_to_amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe18e3f0b68a7ab90bc7ead1ce90fb4337b1b92b2704bb8ccee692316de9319ad\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IGauge {\\r\\n    function deposit(uint256) external;\\r\\n\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function user_checkpoint(address) external;\\r\\n\\r\\n    function claim_rewards(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5e45dbdb4fd9d87dc31619aeafbe4ebc4f567372373e2fc30a2798b37d732895\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002e57506200002e62000134565b806200003d575060005460ff16155b6200007a5760405162461bcd60e51b815260040180806020018281038252602e81526020018062001f65602e913960400191505060405180910390fd5b600054610100900460ff16158015620000a6576000805460ff1961ff0019909116610100171660011790555b6000620000b262000152565b6001600160a01b031614620000c357fe5b6000620000cf62000184565b6001600160a01b031614620000e057fe5b6000620000ec620001b1565b6001600160a01b031614620000fd57fe5b600062000109620001de565b6001600160a01b0316146200011a57fe5b80156200012d576000805461ff00191690555b5062000215565b60006200014c306200020b60201b62000a8b1760201c565b15905090565b60006200017f7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c62000211565b905090565b60006200017f7fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7462000211565b60006200017f7f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81262000211565b60006200017f7faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c62000211565b3b151590565b5490565b611d4080620002256000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636f307dc3116100c3578063aa5c3ab41161007c578063aa5c3ab41461023d578063c9168a5914610245578063dc2c256f1461024d578063e8b5e51f14610283578063e8da1fd11461028b578063f1d742d5146102f35761014d565b80636f307dc3146101ed57806376cdb03b146101f55780637b103999146101fd578063853828b614610205578063a6f19c841461020f578063a91ee0dc146102175761014d565b80632e1a7d4d116101155780632e1a7d4d146101a857806330ff0b4e146101c5578063481c6a75146101cd57806359356c5c146101d55780635aa6e675146101dd5780635b9f0016146101e55761014d565b806316f0115b1461015257806319776d8e146101765780631985a89f14610190578063228cb733146101985780632986c0e5146101a0575b600080fd5b61015a6102fb565b604080516001600160a01b039092168252519081900360200190f35b61017e61032c565b60408051918252519081900360200190f35b61015a6103d3565b61015a6103fe565b61017e610429565b61017e600480360360208110156101be57600080fd5b5035610454565b61015a6104cc565b61015a6104f7565b61017e610539565b61015a610543565b61017e610585565b61015a610597565b61015a6105c2565b61015a6105ed565b61020d610618565b005b61015a610695565b61020d6004803603602081101561022d57600080fd5b50356001600160a01b03166106c0565b61017e6107a6565b61017e6107d0565b61020d6004803603606081101561026357600080fd5b506001600160a01b038135811691602081013591604090910135166107f2565b61020d6108b5565b61020d60048036036101208110156102a257600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e081013590911690610100013561092a565b61017e6109ee565b60006103267f330f10e3036378592f49e68634d0df63784e4e3fc8e020d4b867b13c5238eba4610a91565b90505b90565b6000806103376103d3565b6001600160a01b0316141561034e57506000610329565b6103566103d3565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b5051905090565b60006103267f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3610a91565b60006103267faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c610a91565b60006103267fb6b51a75a44d9b0046bc08b5d45e10870e79dec03d49ff1beeb7491b35bfe32f610a91565b600061045e6105c2565b6001600160a01b0316336001600160a01b0316146104b9576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006104c53384610a95565b9392505050565b60006103267f5998c690f9a1844257ca5c21cb39f78d4bbd2eae05acb65890e299ab4a7bfa4f610a91565b60006105016105ed565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a257600080fd5b6000610356610597565b600061054d6105ed565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a257600080fd5b6000610326610592610695565b610b7a565b60006103267f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812610a91565b60006103267fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74610a91565b60006103267f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c610a91565b6106206105c2565b6001600160a01b0316336001600160a01b03161461067b576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006106856107d0565b90506106913382610a95565b5050565b60006103267f42abdd437833f719b2143194014e248a0b88732beec95d86e79864eea92009b2610a91565b6106c8610543565b6001600160a01b0316336001600160a01b03161461072d576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61073681610bfb565b61073e610543565b6001600160a01b0316336001600160a01b0316146107a3576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6000806107b16103fe565b6001600160a01b031614156107c857506000610329565b6103566103fe565b60006103266107dd6102fb565b6107e5610585565b6107ed610429565b610c25565b6107fa610543565b6001600160a01b0316336001600160a01b03161461085f576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61086a818484610cb7565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b6108bd6105c2565b6001600160a01b0316336001600160a01b031614610918576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610920610d83565b610928610ddb565b565b600054610100900460ff16806109435750610943610e30565b80610951575060005460ff16155b61098c5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff161580156109b7576000805460ff1961ff0019909116610100171660011790555b6109c48a8a8a8a8a610e41565b6109d085858585610efd565b80156109e2576000805461ff00191690555b50505050505050505050565b6000806109f96104cc565b90506001600160a01b038116610a13576000915050610329565b604080516370a0823160e01b815230600482015290516001600160a01b038316916370a08231916024808301926020929190829003018186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b505191505090565b3b151590565b5490565b600081610aa457506000610b74565b6000610aae6107d0565b905080610abf576000915050610b74565b6000610ac9610585565b90506000610ae983610ae387670de0b6b3a7640000610fc7565b90611020565b90506000610b0c83610b07670de0b6b3a7640000610ae38684610fc7565b611087565b90506000610b2a85610b07670de0b6b3a7640000610ae38784610fc7565b9050610b3d610b37610695565b8361109d565b610b57610b486102fb565b610b50610429565b8484611101565b6000610b6b89610b65610597565b8a610cb7565b96505050505050505b92915050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bc957600080fd5b505afa158015610bdd573d6000803e3d6000fd5b505050506040513d6020811015610bf357600080fd5b505192915050565b6107a37f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c8261118a565b600082610c34575060006104c5565b836001600160a01b031663cc2b27d784846040518363ffffffff1660e01b81526004018083815260200182600f0b81526020019250505060206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d6020811015610cad57600080fd5b5051949350505050565b600081610cc6575060006104c5565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d1557600080fd5b505afa158015610d29573d6000803e3d6000fd5b505050506040513d6020811015610d3f57600080fd5b5051905082811015610d6657610d5f6001600160a01b038516868361118e565b90506104c5565b610d7a6001600160a01b038516868561118e565b829150506104c5565b610d93610d8e610695565b6111e5565b6000610d9d6107a6565b90508015610dbe57610dbe610db06103fe565b610db8610597565b83611247565b6000610dc86109ee565b9050801561069157610691610db06104cc565b6000610de5610539565b905080156107a357610e10610df86102fb565b610e00610597565b610e08610429565b846001611408565b6107a3610e1b610695565b610e236103d3565b610e2b61032c565b6114d8565b6000610e3b30610a8b565b15905090565b600054610100900460ff1680610e5a5750610e5a610e30565b80610e68575060005460ff16155b610ea35760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff16158015610ece576000805460ff1961ff0019909116610100171660011790555b610ed786611559565b610ee38585858561165e565b8015610ef5576000805461ff00191690555b505050505050565b600054610100900460ff1680610f165750610f16610e30565b80610f24575060005460ff16155b610f5f5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff16158015610f8a576000805460ff1961ff0019909116610100171660011790555b610f938561170f565b610f9c84611739565b610fa583611763565b610fae8261178d565b8015610fc0576000805461ff00191690555b5050505050565b600082610fd657506000610b74565b82820282848281610fe357fe5b04146104c55760405162461bcd60e51b8152600401808060200182810382526021815260200180611cc06021913960400191505060405180910390fd5b6000808211611076576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161107f57fe5b049392505050565b600081831061109657816104c5565b5090919050565b806110a757610691565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156110ed57600080fd5b505af1158015610ef5573d6000803e3d6000fd5b8161110b57611184565b6040805163517a55a360e01b815260048101849052600f85900b6024820152604481018390526001606482015290516001600160a01b0386169163517a55a391608480830192600092919082900301818387803b15801561116b57600080fd5b505af115801561117f573d6000803e3d6000fd5b505050505b50505050565b9055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111e09084906117b7565b505050565b60408051639faceb1b60e01b81523060048201819052602482015290516001600160a01b03831691639faceb1b91604480830192600092919082900301818387803b15801561123357600080fd5b505af1158015610fc0573d6000803e3d6000fd5b60006112516104f7565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d60208110156112dd57600080fd5b505190506112ec818685610cb7565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b15801561135757600080fd5b505af115801561136b573d6000803e3d6000fd5b505050506040513d602081101561138157600080fd5b505190506001600160a01b038316634893042861139c6105c2565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156113f457600080fd5b505af11580156109e2573d6000803e3d6000fd5b8161141257610fc0565b600060405180606001604052806000815260200160008152602001600081525090508281856003811061144157fe5b602002015261145a6001600160a01b0386168785611868565b6040516315b74c9d60e11b81526001600160a01b03871690632b6e993a90839085906001906004018084606080838360005b838110156114a457818101518382015260200161148c565b5050505090500183815260200182151581526020019350505050600060405180830381600087803b1580156113f457600080fd5b806114e2576111e0565b6114f66001600160a01b0383168483611868565b826001600160a01b031663b6b55f25826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561153c57600080fd5b505af1158015611550573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16806115725750611572610e30565b80611580575060005460ff16155b6115bb5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff161580156115e6576000805460ff1961ff0019909116610100171660011790555b6115ef82610a8b565b611640576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b61164982610bfb565b8015610691576000805461ff00191690555050565b600054610100900460ff16806116775750611677610e30565b80611685575060005460ff16155b6116c05760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff161580156116eb576000805460ff1961ff0019909116610100171660011790555b6116f485611953565b6116fd8461197d565b611706836119a7565b610fae826119d1565b6107a37f5998c690f9a1844257ca5c21cb39f78d4bbd2eae05acb65890e299ab4a7bfa4f8261118a565b6107a37f330f10e3036378592f49e68634d0df63784e4e3fc8e020d4b867b13c5238eba48261118a565b6107a37f42abdd437833f719b2143194014e248a0b88732beec95d86e79864eea92009b28261118a565b6107a37fb6b51a75a44d9b0046bc08b5d45e10870e79dec03d49ff1beeb7491b35bfe32f8261118a565b600061180c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119fb9092919063ffffffff16565b8051909150156111e05780806020019051602081101561182b57600080fd5b50516111e05760405162461bcd60e51b815260040180806020018281038252602a815260200180611ce1602a913960400191505060405180910390fd5b60006118fe82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156118cc57600080fd5b505afa1580156118e0573d6000803e3d6000fd5b505050506040513d60208110156118f657600080fd5b505190611a12565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506111849085906117b7565b6107a37fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c748261118a565b6107a37f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc8128261118a565b6107a37f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d38261118a565b6107a37faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c8261118a565b6060611a0a8484600085611a6c565b949350505050565b6000828201838110156104c5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b606082471015611aad5760405162461bcd60e51b8152600401808060200182810382526026815260200180611c6c6026913960400191505060405180910390fd5b611ab685610a8b565b611b07576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611b455780518252601f199092019160209182019101611b26565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ba7576040519150601f19603f3d011682016040523d82523d6000602084013e611bac565b606091505b5091509150611bbc828286611bc7565b979650505050505050565b60608315611bd65750816104c5565b825115611be65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c30578181015183820152602001611c18565b50505050905090810190601f168015611c5d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212202f84ad3334159c1c422cd97ba83d904f8d97b5a1ad2dd2ef8af7a4b95d82a15464736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636f307dc3116100c3578063aa5c3ab41161007c578063aa5c3ab41461023d578063c9168a5914610245578063dc2c256f1461024d578063e8b5e51f14610283578063e8da1fd11461028b578063f1d742d5146102f35761014d565b80636f307dc3146101ed57806376cdb03b146101f55780637b103999146101fd578063853828b614610205578063a6f19c841461020f578063a91ee0dc146102175761014d565b80632e1a7d4d116101155780632e1a7d4d146101a857806330ff0b4e146101c5578063481c6a75146101cd57806359356c5c146101d55780635aa6e675146101dd5780635b9f0016146101e55761014d565b806316f0115b1461015257806319776d8e146101765780631985a89f14610190578063228cb733146101985780632986c0e5146101a0575b600080fd5b61015a6102fb565b604080516001600160a01b039092168252519081900360200190f35b61017e61032c565b60408051918252519081900360200190f35b61015a6103d3565b61015a6103fe565b61017e610429565b61017e600480360360208110156101be57600080fd5b5035610454565b61015a6104cc565b61015a6104f7565b61017e610539565b61015a610543565b61017e610585565b61015a610597565b61015a6105c2565b61015a6105ed565b61020d610618565b005b61015a610695565b61020d6004803603602081101561022d57600080fd5b50356001600160a01b03166106c0565b61017e6107a6565b61017e6107d0565b61020d6004803603606081101561026357600080fd5b506001600160a01b038135811691602081013591604090910135166107f2565b61020d6108b5565b61020d60048036036101208110156102a257600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e081013590911690610100013561092a565b61017e6109ee565b60006103267f330f10e3036378592f49e68634d0df63784e4e3fc8e020d4b867b13c5238eba4610a91565b90505b90565b6000806103376103d3565b6001600160a01b0316141561034e57506000610329565b6103566103d3565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b5051905090565b60006103267f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3610a91565b60006103267faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c610a91565b60006103267fb6b51a75a44d9b0046bc08b5d45e10870e79dec03d49ff1beeb7491b35bfe32f610a91565b600061045e6105c2565b6001600160a01b0316336001600160a01b0316146104b9576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006104c53384610a95565b9392505050565b60006103267f5998c690f9a1844257ca5c21cb39f78d4bbd2eae05acb65890e299ab4a7bfa4f610a91565b60006105016105ed565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a257600080fd5b6000610356610597565b600061054d6105ed565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a257600080fd5b6000610326610592610695565b610b7a565b60006103267f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812610a91565b60006103267fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74610a91565b60006103267f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c610a91565b6106206105c2565b6001600160a01b0316336001600160a01b03161461067b576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006106856107d0565b90506106913382610a95565b5050565b60006103267f42abdd437833f719b2143194014e248a0b88732beec95d86e79864eea92009b2610a91565b6106c8610543565b6001600160a01b0316336001600160a01b03161461072d576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61073681610bfb565b61073e610543565b6001600160a01b0316336001600160a01b0316146107a3576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6000806107b16103fe565b6001600160a01b031614156107c857506000610329565b6103566103fe565b60006103266107dd6102fb565b6107e5610585565b6107ed610429565b610c25565b6107fa610543565b6001600160a01b0316336001600160a01b03161461085f576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61086a818484610cb7565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b6108bd6105c2565b6001600160a01b0316336001600160a01b031614610918576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b610920610d83565b610928610ddb565b565b600054610100900460ff16806109435750610943610e30565b80610951575060005460ff16155b61098c5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff161580156109b7576000805460ff1961ff0019909116610100171660011790555b6109c48a8a8a8a8a610e41565b6109d085858585610efd565b80156109e2576000805461ff00191690555b50505050505050505050565b6000806109f96104cc565b90506001600160a01b038116610a13576000915050610329565b604080516370a0823160e01b815230600482015290516001600160a01b038316916370a08231916024808301926020929190829003018186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b505191505090565b3b151590565b5490565b600081610aa457506000610b74565b6000610aae6107d0565b905080610abf576000915050610b74565b6000610ac9610585565b90506000610ae983610ae387670de0b6b3a7640000610fc7565b90611020565b90506000610b0c83610b07670de0b6b3a7640000610ae38684610fc7565b611087565b90506000610b2a85610b07670de0b6b3a7640000610ae38784610fc7565b9050610b3d610b37610695565b8361109d565b610b57610b486102fb565b610b50610429565b8484611101565b6000610b6b89610b65610597565b8a610cb7565b96505050505050505b92915050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bc957600080fd5b505afa158015610bdd573d6000803e3d6000fd5b505050506040513d6020811015610bf357600080fd5b505192915050565b6107a37f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c8261118a565b600082610c34575060006104c5565b836001600160a01b031663cc2b27d784846040518363ffffffff1660e01b81526004018083815260200182600f0b81526020019250505060206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d6020811015610cad57600080fd5b5051949350505050565b600081610cc6575060006104c5565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d1557600080fd5b505afa158015610d29573d6000803e3d6000fd5b505050506040513d6020811015610d3f57600080fd5b5051905082811015610d6657610d5f6001600160a01b038516868361118e565b90506104c5565b610d7a6001600160a01b038516868561118e565b829150506104c5565b610d93610d8e610695565b6111e5565b6000610d9d6107a6565b90508015610dbe57610dbe610db06103fe565b610db8610597565b83611247565b6000610dc86109ee565b9050801561069157610691610db06104cc565b6000610de5610539565b905080156107a357610e10610df86102fb565b610e00610597565b610e08610429565b846001611408565b6107a3610e1b610695565b610e236103d3565b610e2b61032c565b6114d8565b6000610e3b30610a8b565b15905090565b600054610100900460ff1680610e5a5750610e5a610e30565b80610e68575060005460ff16155b610ea35760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff16158015610ece576000805460ff1961ff0019909116610100171660011790555b610ed786611559565b610ee38585858561165e565b8015610ef5576000805461ff00191690555b505050505050565b600054610100900460ff1680610f165750610f16610e30565b80610f24575060005460ff16155b610f5f5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff16158015610f8a576000805460ff1961ff0019909116610100171660011790555b610f938561170f565b610f9c84611739565b610fa583611763565b610fae8261178d565b8015610fc0576000805461ff00191690555b5050505050565b600082610fd657506000610b74565b82820282848281610fe357fe5b04146104c55760405162461bcd60e51b8152600401808060200182810382526021815260200180611cc06021913960400191505060405180910390fd5b6000808211611076576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161107f57fe5b049392505050565b600081831061109657816104c5565b5090919050565b806110a757610691565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156110ed57600080fd5b505af1158015610ef5573d6000803e3d6000fd5b8161110b57611184565b6040805163517a55a360e01b815260048101849052600f85900b6024820152604481018390526001606482015290516001600160a01b0386169163517a55a391608480830192600092919082900301818387803b15801561116b57600080fd5b505af115801561117f573d6000803e3d6000fd5b505050505b50505050565b9055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111e09084906117b7565b505050565b60408051639faceb1b60e01b81523060048201819052602482015290516001600160a01b03831691639faceb1b91604480830192600092919082900301818387803b15801561123357600080fd5b505af1158015610fc0573d6000803e3d6000fd5b60006112516104f7565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d60208110156112dd57600080fd5b505190506112ec818685610cb7565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b15801561135757600080fd5b505af115801561136b573d6000803e3d6000fd5b505050506040513d602081101561138157600080fd5b505190506001600160a01b038316634893042861139c6105c2565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156113f457600080fd5b505af11580156109e2573d6000803e3d6000fd5b8161141257610fc0565b600060405180606001604052806000815260200160008152602001600081525090508281856003811061144157fe5b602002015261145a6001600160a01b0386168785611868565b6040516315b74c9d60e11b81526001600160a01b03871690632b6e993a90839085906001906004018084606080838360005b838110156114a457818101518382015260200161148c565b5050505090500183815260200182151581526020019350505050600060405180830381600087803b1580156113f457600080fd5b806114e2576111e0565b6114f66001600160a01b0383168483611868565b826001600160a01b031663b6b55f25826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561153c57600080fd5b505af1158015611550573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16806115725750611572610e30565b80611580575060005460ff16155b6115bb5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff161580156115e6576000805460ff1961ff0019909116610100171660011790555b6115ef82610a8b565b611640576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b61164982610bfb565b8015610691576000805461ff00191690555050565b600054610100900460ff16806116775750611677610e30565b80611685575060005460ff16155b6116c05760405162461bcd60e51b815260040180806020018281038252602e815260200180611c92602e913960400191505060405180910390fd5b600054610100900460ff161580156116eb576000805460ff1961ff0019909116610100171660011790555b6116f485611953565b6116fd8461197d565b611706836119a7565b610fae826119d1565b6107a37f5998c690f9a1844257ca5c21cb39f78d4bbd2eae05acb65890e299ab4a7bfa4f8261118a565b6107a37f330f10e3036378592f49e68634d0df63784e4e3fc8e020d4b867b13c5238eba48261118a565b6107a37f42abdd437833f719b2143194014e248a0b88732beec95d86e79864eea92009b28261118a565b6107a37fb6b51a75a44d9b0046bc08b5d45e10870e79dec03d49ff1beeb7491b35bfe32f8261118a565b600061180c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119fb9092919063ffffffff16565b8051909150156111e05780806020019051602081101561182b57600080fd5b50516111e05760405162461bcd60e51b815260040180806020018281038252602a815260200180611ce1602a913960400191505060405180910390fd5b60006118fe82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156118cc57600080fd5b505afa1580156118e0573d6000803e3d6000fd5b505050506040513d60208110156118f657600080fd5b505190611a12565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506111849085906117b7565b6107a37fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c748261118a565b6107a37f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc8128261118a565b6107a37f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d38261118a565b6107a37faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c8261118a565b6060611a0a8484600085611a6c565b949350505050565b6000828201838110156104c5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b606082471015611aad5760405162461bcd60e51b8152600401808060200182810382526026815260200180611c6c6026913960400191505060405180910390fd5b611ab685610a8b565b611b07576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611b455780518252601f199092019160209182019101611b26565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ba7576040519150601f19603f3d011682016040523d82523d6000602084013e611bac565b606091505b5091509150611bbc828286611bc7565b979650505050505050565b60608315611bd65750816104c5565b825115611be65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c30578181015183820152602001611c18565b50505050905090810190601f168015611c5d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212202f84ad3334159c1c422cd97ba83d904f8d97b5a1ad2dd2ef8af7a4b95d82a15464736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "derivativeBalance()": {
        "details": "Balance of derivative tokens received from Strategy, if applicable",
        "returns": {
          "_0": "The balance of derivative tokens"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "initializeCurveAPoolStrategy(address,address,address,address,address,address,address,address,uint256)": {
        "params": {
          "bank_": "Address of the Bank",
          "derivative_": "3CRV LP Token",
          "gauge_": "Curve Gauge, Staking Contract",
          "index_": "Underlying APool Index",
          "pool_": "Address of the Curve APool",
          "registry_": "Address of the Registry",
          "reward_": "CRV Gov Token",
          "underlying_": "Underlying (DAI, USDC, USDT)"
        }
      },
      "invest()": {
        "details": "Compound CRV Yield, Add Liquidity, Stake into Gauge"
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "rewardBalance()": {
        "details": "Balance of reward tokens awaiting liquidation, if applicable"
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "sweep(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens to sweep",
          "recipient": "The address to send the sweeped tokens to",
          "token": "The address of the token to sweep"
        }
      },
      "underlyingBalance()": {
        "details": "Balance of underlying awaiting Strategy investment"
      },
      "withdraw(uint256)": {
        "details": "Unstake from Gauge, Remove Liquidity",
        "params": {
          "amount": "Amount of Underlying tokens to withdraw"
        }
      },
      "withdrawAll()": {
        "details": "Unstake from Gauge, Remove Liquidity"
      }
    },
    "title": "Oh! Finance Curve APool Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bank()": {
        "notice": "The Bank that the Strategy is associated with"
      },
      "constructor": {
        "notice": "Initialize the Curve APool Strategy Logic"
      },
      "derivative()": {
        "notice": "The derivative token received from AaveV2 (aToken)"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "initializeCurveAPoolStrategy(address,address,address,address,address,address,address,address,uint256)": {
        "notice": "Initialize the Curve APool Strategy Proxy"
      },
      "invest()": {
        "notice": "Execute the Curve APool Strategy"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "reward()": {
        "notice": "The reward token received from AaveV2 (stkAave)"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "sweep(address,uint256,address)": {
        "notice": "Governance function to sweep any stuck / airdrop tokens to a given recipient"
      },
      "underlying()": {
        "notice": "The underlying token the Strategy invests in AaveV2"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw an amount of underlying from Curve APool Strategy"
      },
      "withdrawAll()": {
        "notice": "Withdraw all underlying from Curve APool Strategy"
      }
    },
    "notice": "Standard Curve APool LP + Gauge Single Underlying StrategyAPool Underlying, in order: (aDAI, aUSDC, aUSDT)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3184,
        "contract": "contracts/strategies/curve/OhCurveAPoolStrategy.sol:OhCurveAPoolStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3187,
        "contract": "contracts/strategies/curve/OhCurveAPoolStrategy.sol:OhCurveAPoolStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}